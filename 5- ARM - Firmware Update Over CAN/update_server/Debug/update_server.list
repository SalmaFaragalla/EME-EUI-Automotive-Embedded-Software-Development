
update_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e9c  08005e9c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005e9c  08005e9c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e9c  08005e9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000078  08005f1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08005f1c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c793  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c65  00000000  00000000  0002c834  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000022f4  00000000  00000000  0002ee20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008666  00000000  00000000  00031114  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000861be  00000000  00000000  0003977a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000bf938  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000008a8  00000000  00000000  000bf9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002970  00000000  00000000  000c0260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e6c 	.word	0x08003e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003e6c 	.word	0x08003e6c

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:

#define CAN_TX_CHUNK_SIZE_IN_WORDS 256 // Word = 32 bit


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// Toggle receive led status
	HAL_GPIO_TogglePin(APP_LED_RX_CAN_ARGS);
 8000154:	2104      	movs	r1, #4
 8000156:	4817      	ldr	r0, [pc, #92]	; (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000158:	f002 f872 	bl	8002240 <HAL_GPIO_TogglePin>

	// Receive Message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800015c:	4b16      	ldr	r3, [pc, #88]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800015e:	4a17      	ldr	r2, [pc, #92]	; (80001bc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000160:	2100      	movs	r1, #0
 8000162:	6878      	ldr	r0, [r7, #4]
 8000164:	f001 fa89 	bl	800167a <HAL_CAN_GetRxMessage>

	if(TRUE == app_check_command_match(RxData, APP_CAN_RESP_CHECK_FOR_UPDATE))
 8000168:	4915      	ldr	r1, [pc, #84]	; (80001c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800016a:	4813      	ldr	r0, [pc, #76]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800016c:	f000 fa42 	bl	80005f4 <app_check_command_match>
 8000170:	4603      	mov	r3, r0
 8000172:	2b01      	cmp	r3, #1
 8000174:	d103      	bne.n	800017e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	{
		/* Respond with OK update available */
		app_tx_over_can(APP_CAN_CMD_OK_UPDATE);
 8000176:	4813      	ldr	r0, [pc, #76]	; (80001c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000178:	f000 fa06 	bl	8000588 <app_tx_over_can>
	{
		/* Update app state to send update */
		en_gs_app_state = APP_STATE_SENDING_UPDATE;
	}

}
 800017c:	e015      	b.n	80001aa <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	else if(TRUE == app_check_command_match(RxData, APP_CAN_RESP_GET_UPDATE_SIZE))
 800017e:	4912      	ldr	r1, [pc, #72]	; (80001c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000182:	f000 fa37 	bl	80005f4 <app_check_command_match>
 8000186:	4603      	mov	r3, r0
 8000188:	2b01      	cmp	r3, #1
 800018a:	d104      	bne.n	8000196 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		app_tx_number_over_can(APP_UPDATE_SIZE);
 800018c:	f44f 5091 	mov.w	r0, #4640	; 0x1220
 8000190:	f000 fa54 	bl	800063c <app_tx_number_over_can>
}
 8000194:	e009      	b.n	80001aa <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	else if(TRUE == app_check_command_match(RxData, APP_CAN_RESP_START_UPDATE))
 8000196:	490d      	ldr	r1, [pc, #52]	; (80001cc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800019a:	f000 fa2b 	bl	80005f4 <app_check_command_match>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d102      	bne.n	80001aa <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		en_gs_app_state = APP_STATE_SENDING_UPDATE;
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	701a      	strb	r2, [r3, #0]
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800
 80001b8:	20000560 	.word	0x20000560
 80001bc:	20000580 	.word	0x20000580
 80001c0:	08003e84 	.word	0x08003e84
 80001c4:	08003e90 	.word	0x08003e90
 80001c8:	08003e9c 	.word	0x08003e9c
 80001cc:	08003ea8 	.word	0x08003ea8
 80001d0:	20000094 	.word	0x20000094

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 febf 	bl	8000f5c <HAL_Init>

  /* USER CODE BEGIN Init */

  // Init OLED
  SSD1306_Init();
 80001de:	f000 fa87 	bl	80006f0 <SSD1306_Init>
  SSD1306_Clear();
 80001e2:	f000 fca8 	bl	8000b36 <SSD1306_Clear>
  SSD1306_GotoXY(0, 0);
 80001e6:	2100      	movs	r1, #0
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 fbe9 	bl	80009c0 <SSD1306_GotoXY>

  SSD1306_Println("TEST EME");
 80001ee:	4856      	ldr	r0, [pc, #344]	; (8000348 <main+0x174>)
 80001f0:	f000 fcaa 	bl	8000b48 <SSD1306_Println>
//  SSD1306_Puts ("API!", &Font_11x18, 1);
  SSD1306_UpdateScreen();
 80001f4:	f000 fb40 	bl	8000878 <SSD1306_UpdateScreen>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f8bc 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f958 	bl	80004b0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000200:	f000 f8f2 	bl	80003e8 <MX_CAN_Init>
  MX_I2C1_Init();
 8000204:	f000 f926 	bl	8000454 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

   TxHeader.DLC=8; //give message size of 8 byte
 8000208:	4b50      	ldr	r3, [pc, #320]	; (800034c <main+0x178>)
 800020a:	2208      	movs	r2, #8
 800020c:	611a      	str	r2, [r3, #16]
   TxHeader.IDE=CAN_ID_STD; //set identifier to standard
 800020e:	4b4f      	ldr	r3, [pc, #316]	; (800034c <main+0x178>)
 8000210:	2200      	movs	r2, #0
 8000212:	609a      	str	r2, [r3, #8]
   TxHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 8000214:	4b4d      	ldr	r3, [pc, #308]	; (800034c <main+0x178>)
 8000216:	2200      	movs	r2, #0
 8000218:	60da      	str	r2, [r3, #12]
   TxHeader.StdId=APP_CAN_TX_MSG_ID; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 800021a:	4b4c      	ldr	r3, [pc, #304]	; (800034c <main+0x178>)
 800021c:	f240 1203 	movw	r2, #259	; 0x103
 8000220:	601a      	str	r2, [r3, #0]


   /* Configure CAN Receiving Filter */
	 /* set FIFO assignment */
	 FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000222:	4b4b      	ldr	r3, [pc, #300]	; (8000350 <main+0x17c>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
	 /* 0x245<<5; the ID that the filter looks for: Zero to pass all IDs */
	 FilterConfig.FilterIdHigh = 0;
 8000228:	4b49      	ldr	r3, [pc, #292]	; (8000350 <main+0x17c>)
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
	 FilterConfig.FilterIdLow = 0;
 800022e:	4b48      	ldr	r3, [pc, #288]	; (8000350 <main+0x17c>)
 8000230:	2200      	movs	r2, #0
 8000232:	605a      	str	r2, [r3, #4]
	 FilterConfig.FilterMaskIdHigh = 0;
 8000234:	4b46      	ldr	r3, [pc, #280]	; (8000350 <main+0x17c>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
	 FilterConfig.FilterMaskIdLow = 0;
 800023a:	4b45      	ldr	r3, [pc, #276]	; (8000350 <main+0x17c>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]

	 /* Set Filter Scale */
	 FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 8000240:	4b43      	ldr	r3, [pc, #268]	; (8000350 <main+0x17c>)
 8000242:	2201      	movs	r2, #1
 8000244:	61da      	str	r2, [r3, #28]

	 /* Enable Filter */
	 FilterConfig.FilterActivation = ENABLE;
 8000246:	4b42      	ldr	r3, [pc, #264]	; (8000350 <main+0x17c>)
 8000248:	2201      	movs	r2, #1
 800024a:	621a      	str	r2, [r3, #32]

	 /* Configure CAN Filter */
	 HAL_CAN_ConfigFilter(&hcan, &FilterConfig); //configure CAN filter
 800024c:	4940      	ldr	r1, [pc, #256]	; (8000350 <main+0x17c>)
 800024e:	4841      	ldr	r0, [pc, #260]	; (8000354 <main+0x180>)
 8000250:	f001 f803 	bl	800125a <HAL_CAN_ConfigFilter>

   HAL_CAN_Start(&hcan); //start CAN
 8000254:	483f      	ldr	r0, [pc, #252]	; (8000354 <main+0x180>)
 8000256:	f001 f8c9 	bl	80013ec <HAL_CAN_Start>

   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800025a:	2102      	movs	r1, #2
 800025c:	483d      	ldr	r0, [pc, #244]	; (8000354 <main+0x180>)
 800025e:	f001 fb2d 	bl	80018bc <HAL_CAN_ActivateNotification>


	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000262:	2104      	movs	r1, #4
 8000264:	483c      	ldr	r0, [pc, #240]	; (8000358 <main+0x184>)
 8000266:	f001 ffeb 	bl	8002240 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	483b      	ldr	r0, [pc, #236]	; (800035c <main+0x188>)
 8000270:	f001 ffe6 	bl	8002240 <HAL_GPIO_TogglePin>

	uint32_t sent_data_count_cpy = ZERO;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
	uint32_t sent_data_count = ZERO;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
	uint32_t next_send_index = ZERO;
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	/* Number of 8-bytes chunks to be sent */
	uint32_t arr_chunks_count = ZERO;
 8000280:	2300      	movs	r3, #0
 8000282:	607b      	str	r3, [r7, #4]

	HAL_StatusTypeDef can_status_retval;
	unsigned int k = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(APP_STATE_SENDING_UPDATE == en_gs_app_state)
 8000288:	4b35      	ldr	r3, [pc, #212]	; (8000360 <main+0x18c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d1fb      	bne.n	8000288 <main+0xb4>
	  {

		  /* Upload Data Startup Delay */
		  HAL_Delay(APP_PRE_UPLOAD_UPDATE_DATA_DELAY);
 8000290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000294:	f000 fec4 	bl	8001020 <HAL_Delay>

		  // Check TX Mailbox free space
		  mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000298:	482e      	ldr	r0, [pc, #184]	; (8000354 <main+0x180>)
 800029a:	f001 f9ba 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 800029e:	4603      	mov	r3, r0
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b30      	ldr	r3, [pc, #192]	; (8000364 <main+0x190>)
 80002a4:	701a      	strb	r2, [r3, #0]

		  // reset count
		  sent_data_count = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
		  arr_chunks_count = ARR_SIZE(update_data_array) / APP_TX_DATA_LENGTH;
 80002aa:	f44f 7311 	mov.w	r3, #580	; 0x244
 80002ae:	607b      	str	r3, [r7, #4]

		  while(sent_data_count < arr_chunks_count)
 80002b0:	e03e      	b.n	8000330 <main+0x15c>
		  {
		//		  		  SSD1306_Println("sending chunk: %i", sent_data_count);
		//		  		   SSD1306_UpdateScreen();

			  // check mailbox
			  mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80002b2:	4828      	ldr	r0, [pc, #160]	; (8000354 <main+0x180>)
 80002b4:	f001 f9ad 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b8:	4603      	mov	r3, r0
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <main+0x190>)
 80002be:	701a      	strb	r2, [r3, #0]

			  // wait until a free CAN mailbox is available
			  while(ZERO == mailbox_free_level)
 80002c0:	e006      	b.n	80002d0 <main+0xfc>
			  {
				  // re-check mailbox status
				  mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80002c2:	4824      	ldr	r0, [pc, #144]	; (8000354 <main+0x180>)
 80002c4:	f001 f9a5 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0x190>)
 80002ce:	701a      	strb	r2, [r3, #0]
			  while(ZERO == mailbox_free_level)
 80002d0:	4b24      	ldr	r3, [pc, #144]	; (8000364 <main+0x190>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f4      	beq.n	80002c2 <main+0xee>
			  }

			  HAL_GPIO_TogglePin(APP_LED_TX_CAN_ARGS);
 80002d8:	2102      	movs	r1, #2
 80002da:	481f      	ldr	r0, [pc, #124]	; (8000358 <main+0x184>)
 80002dc:	f001 ffb0 	bl	8002240 <HAL_GPIO_TogglePin>

			  // free space in mailbox, send next data
			  for (k = 0; k < 8; ++k)
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	e010      	b.n	8000308 <main+0x134>
			  {
				  next_send_index = (k + (sent_data_count * 8));
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	00db      	lsls	r3, r3, #3
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4413      	add	r3, r2
 80002ee:	60bb      	str	r3, [r7, #8]

				  un_gs_TxConv.TxData[k] = update_data_array[next_send_index];
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <main+0x194>)
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	4413      	add	r3, r2
 80002f6:	7819      	ldrb	r1, [r3, #0]
 80002f8:	4a1c      	ldr	r2, [pc, #112]	; (800036c <main+0x198>)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	4413      	add	r3, r2
 80002fe:	460a      	mov	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
			  for (k = 0; k < 8; ++k)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	3301      	adds	r3, #1
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	2b07      	cmp	r3, #7
 800030c:	d9eb      	bls.n	80002e6 <main+0x112>
			  }

			  can_status_retval = HAL_CAN_AddTxMessage(&hcan, &TxHeader, un_gs_TxConv.TxData, &TxMailbox);
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <main+0x19c>)
 8000310:	4a16      	ldr	r2, [pc, #88]	; (800036c <main+0x198>)
 8000312:	490e      	ldr	r1, [pc, #56]	; (800034c <main+0x178>)
 8000314:	480f      	ldr	r0, [pc, #60]	; (8000354 <main+0x180>)
 8000316:	f001 f8ad 	bl	8001474 <HAL_CAN_AddTxMessage>
 800031a:	4603      	mov	r3, r0
 800031c:	70fb      	strb	r3, [r7, #3]

			  // Tx Check
			  if(HAL_OK == can_status_retval)
 800031e:	78fb      	ldrb	r3, [r7, #3]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d105      	bne.n	8000330 <main+0x15c>
			  {
				  // send next
				  sent_data_count++;
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	3301      	adds	r3, #1
 8000328:	613b      	str	r3, [r7, #16]
				  sent_data_count_cpy++;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	3301      	adds	r3, #1
 800032e:	617b      	str	r3, [r7, #20]
		  while(sent_data_count < arr_chunks_count)
 8000330:	693a      	ldr	r2, [r7, #16]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	429a      	cmp	r2, r3
 8000336:	d3bc      	bcc.n	80002b2 <main+0xde>
				  // re-transmit
			  }
		  }

		  // Sending Done - Clear Flags
		  en_gs_app_state = APP_STATE_NORMAL;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x18c>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
		  sent_data_count = ZERO;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
		  next_send_index = ZERO;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
	  if(APP_STATE_SENDING_UPDATE == en_gs_app_state)
 8000346:	e79f      	b.n	8000288 <main+0xb4>
 8000348:	08003eb4 	.word	0x08003eb4
 800034c:	20000568 	.word	0x20000568
 8000350:	20000530 	.word	0x20000530
 8000354:	20000508 	.word	0x20000508
 8000358:	40010800 	.word	0x40010800
 800035c:	40011000 	.word	0x40011000
 8000360:	20000094 	.word	0x20000094
 8000364:	2000059c 	.word	0x2000059c
 8000368:	08003ec0 	.word	0x08003ec0
 800036c:	20000500 	.word	0x20000500
 8000370:	2000055c 	.word	0x2000055c

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b090      	sub	sp, #64	; 0x40
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f003 f958 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fd21 	bl	8002df0 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80003b4:	f000 f997 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 ff8d 	bl	80032f0 <HAL_RCC_ClockConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003dc:	f000 f983 	bl	80006e6 <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3740      	adds	r7, #64	; 0x40
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_CAN_Init+0x64>)
 80003ee:	4a18      	ldr	r2, [pc, #96]	; (8000450 <MX_CAN_Init+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <MX_CAN_Init+0x64>)
 80003f4:	2210      	movs	r2, #16
 80003f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_CAN_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_CAN_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_CAN_Init+0x64>)
 8000406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800040a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_CAN_Init+0x64>)
 800040e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000412:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_CAN_Init+0x64>)
 8000428:	2201      	movs	r2, #1
 800042a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <MX_CAN_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_CAN_Init+0x64>)
 8000434:	2201      	movs	r2, #1
 8000436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_CAN_Init+0x64>)
 800043a:	f000 fe13 	bl	8001064 <HAL_CAN_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000444:	f000 f94f 	bl	80006e6 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000508 	.word	0x20000508
 8000450:	40006400 	.word	0x40006400

08000454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_I2C1_Init+0x50>)
 800045a:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <MX_I2C1_Init+0x54>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000460:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_I2C1_Init+0x58>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_I2C1_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_I2C1_Init+0x50>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000492:	f001 feef 	bl	8002274 <HAL_I2C_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800049c:	f000 f923 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200004ac 	.word	0x200004ac
 80004a8:	40005400 	.word	0x40005400
 80004ac:	00061a80 	.word	0x00061a80

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_GPIO_Init+0xcc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a2c      	ldr	r2, [pc, #176]	; (800057c <MX_GPIO_Init+0xcc>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_GPIO_Init+0xcc>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0310 	and.w	r3, r3, #16
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_GPIO_Init+0xcc>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a26      	ldr	r2, [pc, #152]	; (800057c <MX_GPIO_Init+0xcc>)
 80004e2:	f043 0320 	orr.w	r3, r3, #32
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <MX_GPIO_Init+0xcc>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0320 	and.w	r3, r3, #32
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_GPIO_Init+0xcc>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a20      	ldr	r2, [pc, #128]	; (800057c <MX_GPIO_Init+0xcc>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_GPIO_Init+0xcc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_GPIO_Init+0xcc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a1a      	ldr	r2, [pc, #104]	; (800057c <MX_GPIO_Init+0xcc>)
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_GPIO_Init+0xcc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0308 	and.w	r3, r3, #8
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <MX_GPIO_Init+0xd0>)
 800052c:	f001 fe70 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2106      	movs	r1, #6
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <MX_GPIO_Init+0xd4>)
 8000536:	f001 fe6b 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800053a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_GPIO_Init+0xd0>)
 8000554:	f001 fd02 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000558:	2306      	movs	r3, #6
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_GPIO_Init+0xd4>)
 8000570:	f001 fcf4 	bl	8001f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800

08000588 <app_tx_over_can>:

/* USER CODE BEGIN 4 */

static void app_tx_over_can(uint8_t * msg)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	/* CAN Mailbox free level */
	uint8_t mailbox_free_level;

	mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <app_tx_over_can+0x58>)
 8000592:	f001 f83e 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000596:	4603      	mov	r3, r0
 8000598:	73fb      	strb	r3, [r7, #15]

	/* Block wait until there's a free mailbox */
	while(ZERO == mailbox_free_level)
 800059a:	e004      	b.n	80005a6 <app_tx_over_can+0x1e>
	{
		/* Re-check mailbox free level */
		mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <app_tx_over_can+0x58>)
 800059e:	f001 f838 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73fb      	strb	r3, [r7, #15]
	while(ZERO == mailbox_free_level)
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f7      	beq.n	800059c <app_tx_over_can+0x14>
	}

	TxHeader.StdId = APP_CAN_TX_MSG_ID;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <app_tx_over_can+0x5c>)
 80005ae:	f240 1203 	movw	r2, #259	; 0x103
 80005b2:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = APP_TX_DATA_LENGTH;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <app_tx_over_can+0x5c>)
 80005b6:	2208      	movs	r2, #8
 80005b8:	611a      	str	r2, [r3, #16]

	/* free space in mailbox */

	/* Fill CAN TxData buffer with CMD */
	app_fill_array_with_str(un_gs_TxConv.TxData, msg);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <app_tx_over_can+0x60>)
 80005be:	f000 f871 	bl	80006a4 <app_fill_array_with_str>

	/* Add Message to CAN Tx */
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, un_gs_TxConv.TxData, &TxMailbox);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <app_tx_over_can+0x64>)
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <app_tx_over_can+0x60>)
 80005c6:	4907      	ldr	r1, [pc, #28]	; (80005e4 <app_tx_over_can+0x5c>)
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <app_tx_over_can+0x58>)
 80005ca:	f000 ff53 	bl	8001474 <HAL_CAN_AddTxMessage>

	/* Toggle TX LED indicator */
	HAL_GPIO_TogglePin(APP_LED_TX_CAN_ARGS);
 80005ce:	2102      	movs	r1, #2
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <app_tx_over_can+0x68>)
 80005d2:	f001 fe35 	bl	8002240 <HAL_GPIO_TogglePin>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000508 	.word	0x20000508
 80005e4:	20000568 	.word	0x20000568
 80005e8:	20000500 	.word	0x20000500
 80005ec:	2000055c 	.word	0x2000055c
 80005f0:	40010800 	.word	0x40010800

080005f4 <app_check_command_match>:

/* Checks if an array holds the same data as the str command */
static boolean app_check_command_match(uint8_t * array, uint8_t * command)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    boolean retval = TRUE;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < APP_TX_DATA_LENGTH; ++i)
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	e00f      	b.n	8000628 <app_check_command_match+0x34>
    {
        if(array[i] != command[i])
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	440b      	add	r3, r1
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	d002      	beq.n	8000622 <app_check_command_match+0x2e>
        {
            retval = FALSE;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
            break;
 8000620:	e005      	b.n	800062e <app_check_command_match+0x3a>
    for (int i = 0; i < APP_TX_DATA_LENGTH; ++i)
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b07      	cmp	r3, #7
 800062c:	ddec      	ble.n	8000608 <app_check_command_match+0x14>
        }
    }

    return retval;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
	...

0800063c <app_tx_number_over_can>:

/* Transmits a Uint32_t number over CAN */
static void app_tx_number_over_can(uint32_t number)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	/* CAN Mailbox free level */
	uint8_t mailbox_free_level;

	mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <app_tx_number_over_can+0x54>)
 8000646:	f000 ffe4 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 800064a:	4603      	mov	r3, r0
 800064c:	73fb      	strb	r3, [r7, #15]

	/* Block wait until there's a free mailbox */
	while(ZERO == mailbox_free_level)
 800064e:	e004      	b.n	800065a <app_tx_number_over_can+0x1e>
	{
		/* Re-check mailbox free level */
		mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <app_tx_number_over_can+0x54>)
 8000652:	f000 ffde 	bl	8001612 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	while(ZERO == mailbox_free_level)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f7      	beq.n	8000650 <app_tx_number_over_can+0x14>
	}

	un_gs_TxConv.u32_Tx_Number = number;
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <app_tx_number_over_can+0x58>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]

	TxHeader.StdId = APP_CAN_TX_MSG_ID;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <app_tx_number_over_can+0x5c>)
 8000668:	f240 1203 	movw	r2, #259	; 0x103
 800066c:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = APP_TX_DATA_LENGTH;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <app_tx_number_over_can+0x5c>)
 8000670:	2208      	movs	r2, #8
 8000672:	611a      	str	r2, [r3, #16]

	/* Add Message to CAN Tx */
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, un_gs_TxConv.TxData, &TxMailbox);
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <app_tx_number_over_can+0x60>)
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <app_tx_number_over_can+0x58>)
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <app_tx_number_over_can+0x5c>)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <app_tx_number_over_can+0x54>)
 800067c:	f000 fefa 	bl	8001474 <HAL_CAN_AddTxMessage>

	/* Toggle TX LED indicator */
	HAL_GPIO_TogglePin(APP_LED_TX_CAN_ARGS);
 8000680:	2102      	movs	r1, #2
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <app_tx_number_over_can+0x64>)
 8000684:	f001 fddc 	bl	8002240 <HAL_GPIO_TogglePin>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000508 	.word	0x20000508
 8000694:	20000500 	.word	0x20000500
 8000698:	20000568 	.word	0x20000568
 800069c:	2000055c 	.word	0x2000055c
 80006a0:	40010800 	.word	0x40010800

080006a4 <app_fill_array_with_str>:


/* Fills an array of APP_TX_DATA_LENGTH bytes with an APP_TX_DATA_LENGTH byte string */
static void app_fill_array_with_str(uint8_t * u8ptr_array, uint8_t * u8ptr_a_str)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	uint8_t var;

	if(
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d013      	beq.n	80006dc <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_array) &&
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d010      	beq.n	80006dc <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_a_str)
		)
	{
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e00a      	b.n	80006d6 <app_fill_array_with_str+0x32>
		{
			u8ptr_array[var] = u8ptr_a_str[var];
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	441a      	add	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	440b      	add	r3, r1
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b07      	cmp	r3, #7
 80006da:	d9f1      	bls.n	80006c0 <app_fill_array_with_str+0x1c>
	}
	else
	{
		/* Cancel */
	}
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x6>
	...

080006f0 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006f6:	f000 fa5f 	bl	8000bb8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006fe:	2201      	movs	r2, #1
 8000700:	2178      	movs	r1, #120	; 0x78
 8000702:	485b      	ldr	r0, [pc, #364]	; (8000870 <SSD1306_Init+0x180>)
 8000704:	f001 ffec 	bl	80026e0 <HAL_I2C_IsDeviceReady>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800070e:	2300      	movs	r3, #0
 8000710:	e0a9      	b.n	8000866 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000712:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000716:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000718:	e002      	b.n	8000720 <SSD1306_Init+0x30>
		p--;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3b01      	subs	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f9      	bne.n	800071a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000726:	22ae      	movs	r2, #174	; 0xae
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	; 0x78
 800072c:	f000 faa0 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000730:	2220      	movs	r2, #32
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f000 fa9b 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	; 0x78
 8000740:	f000 fa96 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000744:	22b0      	movs	r2, #176	; 0xb0
 8000746:	2100      	movs	r1, #0
 8000748:	2078      	movs	r0, #120	; 0x78
 800074a:	f000 fa91 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800074e:	22c8      	movs	r2, #200	; 0xc8
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 fa8c 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 fa87 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 fa82 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	2100      	movs	r1, #0
 8000770:	2078      	movs	r0, #120	; 0x78
 8000772:	f000 fa7d 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000776:	2281      	movs	r2, #129	; 0x81
 8000778:	2100      	movs	r1, #0
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f000 fa78 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	2100      	movs	r1, #0
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 fa73 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800078a:	22a1      	movs	r2, #161	; 0xa1
 800078c:	2100      	movs	r1, #0
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f000 fa6e 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000794:	22a6      	movs	r2, #166	; 0xa6
 8000796:	2100      	movs	r1, #0
 8000798:	2078      	movs	r0, #120	; 0x78
 800079a:	f000 fa69 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800079e:	22a8      	movs	r2, #168	; 0xa8
 80007a0:	2100      	movs	r1, #0
 80007a2:	2078      	movs	r0, #120	; 0x78
 80007a4:	f000 fa64 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80007a8:	223f      	movs	r2, #63	; 0x3f
 80007aa:	2100      	movs	r1, #0
 80007ac:	2078      	movs	r0, #120	; 0x78
 80007ae:	f000 fa5f 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007b2:	22a4      	movs	r2, #164	; 0xa4
 80007b4:	2100      	movs	r1, #0
 80007b6:	2078      	movs	r0, #120	; 0x78
 80007b8:	f000 fa5a 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007bc:	22d3      	movs	r2, #211	; 0xd3
 80007be:	2100      	movs	r1, #0
 80007c0:	2078      	movs	r0, #120	; 0x78
 80007c2:	f000 fa55 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2078      	movs	r0, #120	; 0x78
 80007cc:	f000 fa50 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007d0:	22d5      	movs	r2, #213	; 0xd5
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f000 fa4b 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007da:	22f0      	movs	r2, #240	; 0xf0
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	; 0x78
 80007e0:	f000 fa46 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007e4:	22d9      	movs	r2, #217	; 0xd9
 80007e6:	2100      	movs	r1, #0
 80007e8:	2078      	movs	r0, #120	; 0x78
 80007ea:	f000 fa41 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007ee:	2222      	movs	r2, #34	; 0x22
 80007f0:	2100      	movs	r1, #0
 80007f2:	2078      	movs	r0, #120	; 0x78
 80007f4:	f000 fa3c 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007f8:	22da      	movs	r2, #218	; 0xda
 80007fa:	2100      	movs	r1, #0
 80007fc:	2078      	movs	r0, #120	; 0x78
 80007fe:	f000 fa37 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000802:	2212      	movs	r2, #18
 8000804:	2100      	movs	r1, #0
 8000806:	2078      	movs	r0, #120	; 0x78
 8000808:	f000 fa32 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800080c:	22db      	movs	r2, #219	; 0xdb
 800080e:	2100      	movs	r1, #0
 8000810:	2078      	movs	r0, #120	; 0x78
 8000812:	f000 fa2d 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	2078      	movs	r0, #120	; 0x78
 800081c:	f000 fa28 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000820:	228d      	movs	r2, #141	; 0x8d
 8000822:	2100      	movs	r1, #0
 8000824:	2078      	movs	r0, #120	; 0x78
 8000826:	f000 fa23 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800082a:	2214      	movs	r2, #20
 800082c:	2100      	movs	r1, #0
 800082e:	2078      	movs	r0, #120	; 0x78
 8000830:	f000 fa1e 	bl	8000c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000834:	22af      	movs	r2, #175	; 0xaf
 8000836:	2100      	movs	r1, #0
 8000838:	2078      	movs	r0, #120	; 0x78
 800083a:	f000 fa19 	bl	8000c70 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800083e:	222e      	movs	r2, #46	; 0x2e
 8000840:	2100      	movs	r1, #0
 8000842:	2078      	movs	r0, #120	; 0x78
 8000844:	f000 fa14 	bl	8000c70 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000848:	2000      	movs	r0, #0
 800084a:	f000 f843 	bl	80008d4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800084e:	f000 f813 	bl	8000878 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <SSD1306_Init+0x184>)
 8000854:	2200      	movs	r2, #0
 8000856:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SSD1306_Init+0x184>)
 800085a:	2200      	movs	r2, #0
 800085c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SSD1306_Init+0x184>)
 8000860:	2201      	movs	r2, #1
 8000862:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000864:	2301      	movs	r3, #1
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200004ac 	.word	0x200004ac
 8000874:	20000498 	.word	0x20000498

08000878 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	e01d      	b.n	80008c0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3b50      	subs	r3, #80	; 0x50
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	; 0x78
 8000890:	f000 f9ee 	bl	8000c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	; 0x78
 800089a:	f000 f9e9 	bl	8000c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800089e:	2210      	movs	r2, #16
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	; 0x78
 80008a4:	f000 f9e4 	bl	8000c70 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	01db      	lsls	r3, r3, #7
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <SSD1306_UpdateScreen+0x58>)
 80008ae:	441a      	add	r2, r3
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	2078      	movs	r0, #120	; 0x78
 80008b6:	f000 f993 	bl	8000be0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3301      	adds	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d9de      	bls.n	8000884 <SSD1306_UpdateScreen+0xc>
	}
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000098 	.word	0x20000098

080008d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <SSD1306_Fill+0x14>
 80008e4:	2300      	movs	r3, #0
 80008e6:	e000      	b.n	80008ea <SSD1306_Fill+0x16>
 80008e8:	23ff      	movs	r3, #255	; 0xff
 80008ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ee:	4619      	mov	r1, r3
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <SSD1306_Fill+0x2c>)
 80008f2:	f002 fea1 	bl	8003638 <memset>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098

08000904 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	460b      	mov	r3, r1
 8000910:	80bb      	strh	r3, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	70fb      	strb	r3, [r7, #3]
	if (
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b7f      	cmp	r3, #127	; 0x7f
 800091a:	d848      	bhi.n	80009ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	2b3f      	cmp	r3, #63	; 0x3f
 8000920:	d845      	bhi.n	80009ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <SSD1306_DrawPixel+0xb4>)
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d11a      	bne.n	8000974 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	08db      	lsrs	r3, r3, #3
 8000944:	b298      	uxth	r0, r3
 8000946:	4603      	mov	r3, r0
 8000948:	01db      	lsls	r3, r3, #7
 800094a:	4413      	add	r3, r2
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <SSD1306_DrawPixel+0xb8>)
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	b25a      	sxtb	r2, r3
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b259      	sxtb	r1, r3
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	4603      	mov	r3, r0
 8000968:	01db      	lsls	r3, r3, #7
 800096a:	4413      	add	r3, r2
 800096c:	b2c9      	uxtb	r1, r1
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <SSD1306_DrawPixel+0xb8>)
 8000970:	54d1      	strb	r1, [r2, r3]
 8000972:	e01d      	b.n	80009b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000974:	88fa      	ldrh	r2, [r7, #6]
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	b298      	uxth	r0, r3
 800097c:	4603      	mov	r3, r0
 800097e:	01db      	lsls	r3, r3, #7
 8000980:	4413      	add	r3, r2
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <SSD1306_DrawPixel+0xb8>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	b25a      	sxtb	r2, r3
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	b25b      	sxtb	r3, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	b25b      	sxtb	r3, r3
 800099a:	4013      	ands	r3, r2
 800099c:	b259      	sxtb	r1, r3
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	4603      	mov	r3, r0
 80009a2:	01db      	lsls	r3, r3, #7
 80009a4:	4413      	add	r3, r2
 80009a6:	b2c9      	uxtb	r1, r1
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <SSD1306_DrawPixel+0xb8>)
 80009aa:	54d1      	strb	r1, [r2, r3]
 80009ac:	e000      	b.n	80009b0 <SSD1306_DrawPixel+0xac>
		return;
 80009ae:	bf00      	nop
	}
}
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000498 	.word	0x20000498
 80009bc:	20000098 	.word	0x20000098

080009c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	80fb      	strh	r3, [r7, #6]
 80009cc:	4613      	mov	r3, r2
 80009ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SSD1306_GotoXY+0x28>)
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <SSD1306_GotoXY+0x28>)
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	8053      	strh	r3, [r2, #2]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000498 	.word	0x20000498

080009ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <SSD1306_Putc+0xfc>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
	if (
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	dc07      	bgt.n	8000a1c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000a0e:	885b      	ldrh	r3, [r3, #2]
 8000a10:	461a      	mov	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a18:	2b3f      	cmp	r3, #63	; 0x3f
 8000a1a:	dd01      	ble.n	8000a20 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e05e      	b.n	8000ade <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e04b      	b.n	8000abe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3b20      	subs	r3, #32
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	7849      	ldrb	r1, [r1, #1]
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	e030      	b.n	8000aac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d010      	beq.n	8000a7c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	b298      	uxth	r0, r3
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000a68:	885a      	ldrh	r2, [r3, #2]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	79ba      	ldrb	r2, [r7, #6]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f7ff ff45 	bl	8000904 <SSD1306_DrawPixel>
 8000a7a:	e014      	b.n	8000aa6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000a7e:	881a      	ldrh	r2, [r3, #0]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	b298      	uxth	r0, r3
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000a8a:	885a      	ldrh	r2, [r3, #2]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	b299      	uxth	r1, r3
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f7ff ff2f 	bl	8000904 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d3c8      	bcc.n	8000a4a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3ad      	bcc.n	8000a26 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <SSD1306_Putc+0xfc>)
 8000ada:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000498 	.word	0x20000498

08000aec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000afa:	e012      	b.n	8000b22 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff71 	bl	80009ec <SSD1306_Putc>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d002      	beq.n	8000b1c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	e008      	b.n	8000b2e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1e8      	bne.n	8000afc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear (void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff feca 	bl	80008d4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b40:	f7ff fe9a 	bl	8000878 <SSD1306_UpdateScreen>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SSD1306_Println>:
	SSD1306_Puts(currentTimeString, &Font_11x18, 1);
	SSD1306_UpdateScreen();
}

void SSD1306_Println(char* format, ...)
{
 8000b48:	b40f      	push	{r0, r1, r2, r3}
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
	char buffer[20];
	buffer[0] = '\0';
 8000b50:	2300      	movs	r3, #0
 8000b52:	713b      	strb	r3, [r7, #4]

	va_list argList;
	va_start(argList, format);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	603b      	str	r3, [r7, #0]
	vsprintf(buffer, format, argList);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	6a39      	ldr	r1, [r7, #32]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fd87 	bl	8003674 <vsiprintf>

	va_end(argList);

	if (actualYPosition > 40)
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <SSD1306_Println+0x68>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b28      	cmp	r3, #40	; 0x28
 8000b6c:	d904      	bls.n	8000b78 <SSD1306_Println+0x30>
	{
		SSD1306_Clear();
 8000b6e:	f7ff ffe2 	bl	8000b36 <SSD1306_Clear>
		actualYPosition = 0;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <SSD1306_Println+0x68>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(0, actualYPosition);
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <SSD1306_Println+0x68>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff1d 	bl	80009c0 <SSD1306_GotoXY>
	SSD1306_Puts (buffer, &Font_11x18, 1);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2201      	movs	r2, #1
 8000b8a:	490a      	ldr	r1, [pc, #40]	; (8000bb4 <SSD1306_Println+0x6c>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffad 	bl	8000aec <SSD1306_Puts>
	actualYPosition += 20;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <SSD1306_Println+0x68>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3314      	adds	r3, #20
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SSD1306_Println+0x68>)
 8000b9c:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();
 8000b9e:	f7ff fe6b 	bl	8000878 <SSD1306_UpdateScreen>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr
 8000bb0:	2000049e 	.word	0x2000049e
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <ssd1306_I2C_Init>:


/* I2C Functions */

void ssd1306_I2C_Init() {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <ssd1306_I2C_Init+0x24>)
 8000bc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bc2:	e002      	b.n	8000bca <ssd1306_I2C_Init+0x12>
		p--;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f9      	bne.n	8000bc4 <ssd1306_I2C_Init+0xc>
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	0003d090 	.word	0x0003d090

08000be0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b0c7      	sub	sp, #284	; 0x11c
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4639      	mov	r1, r7
 8000bec:	600a      	str	r2, [r1, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	4622      	mov	r2, r4
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	460a      	mov	r2, r1
 8000c00:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	1dba      	adds	r2, r7, #6
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000c12:	e010      	b.n	8000c36 <ssd1306_I2C_WriteMulti+0x56>
	dt[i+1] = data[i];
 8000c14:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c18:	463a      	mov	r2, r7
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c22:	3301      	adds	r3, #1
 8000c24:	7811      	ldrb	r1, [r2, #0]
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000c2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c30:	3301      	adds	r3, #1
 8000c32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000c36:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8e7      	bhi.n	8000c14 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b298      	uxth	r0, r3
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	230a      	movs	r3, #10
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <ssd1306_I2C_WriteMulti+0x8c>)
 8000c5e:	f001 fc41 	bl	80024e4 <HAL_I2C_Master_Transmit>
}
 8000c62:	bf00      	nop
 8000c64:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	200004ac 	.word	0x200004ac

08000c70 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c86:	797b      	ldrb	r3, [r7, #5]
 8000c88:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	f107 020c 	add.w	r2, r7, #12
 8000c92:	230a      	movs	r3, #10
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2302      	movs	r3, #2
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <ssd1306_I2C_Write+0x38>)
 8000c9a:	f001 fc23 	bl	80024e4 <HAL_I2C_Master_Transmit>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200004ac 	.word	0x200004ac

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_MspInit+0x60>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_MspInit+0x60>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000

08000d10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a20      	ldr	r2, [pc, #128]	; (8000dac <HAL_CAN_MspInit+0x9c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d139      	bne.n	8000da4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	61d3      	str	r3, [r2, #28]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_CAN_MspInit+0xa0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <HAL_CAN_MspInit+0xa4>)
 8000d76:	f001 f8f1 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4809      	ldr	r0, [pc, #36]	; (8000db4 <HAL_CAN_MspInit+0xa4>)
 8000d90:	f001 f8e4 	bl	8001f5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2014      	movs	r0, #20
 8000d9a:	f001 f8a8 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d9e:	2014      	movs	r0, #20
 8000da0:	f001 f8c1 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40006400 	.word	0x40006400
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800

08000db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_I2C_MspInit+0x70>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d123      	bne.n	8000e20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df0:	23c0      	movs	r3, #192	; 0xc0
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_I2C_MspInit+0x78>)
 8000e04:	f001 f8aa 	bl	8001f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e12:	61d3      	str	r3, [r2, #28]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_I2C_MspInit+0x74>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f8b5 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e8a:	f000 fd3c 	bl	8001906 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000508 	.word	0x20000508

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f002 fb8c 	bl	80035e4 <__errno>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	230c      	movs	r3, #12
 8000ed0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20005000 	.word	0x20005000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200004a0 	.word	0x200004a0
 8000f00:	200005a8 	.word	0x200005a8

08000f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f10:	f7ff fff8 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f16:	490c      	ldr	r1, [pc, #48]	; (8000f48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f2c:	4c09      	ldr	r4, [pc, #36]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f002 fb59 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3e:	f7ff f949 	bl	80001d4 <main>
  bx lr
 8000f42:	4770      	bx	lr
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f4c:	08005ea4 	.word	0x08005ea4
  ldr r2, =_sbss
 8000f50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f54:	200005a8 	.word	0x200005a8

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x28>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 ffb3 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe98 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 ffcb 	bl	8001f42 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f000 ff93 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x1c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x20>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x20>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000010 	.word	0x20000010
 8001008:	200005a0 	.word	0x200005a0

0800100c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <HAL_GetTick+0x10>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	200005a0 	.word	0x200005a0

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff fff0 	bl	800100c <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_Delay+0x40>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffe0 	bl	800100c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000010 	.word	0x20000010

08001064 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e0ed      	b.n	8001252 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fe44 	bl	8000d10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff ffb8 	bl	800100c <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff ffb4 	bl	800100c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0c5      	b.n	8001252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0e5      	beq.n	80010a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0202 	bic.w	r2, r2, #2
 80010e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff ff92 	bl	800100c <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ea:	e012      	b.n	8001112 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ec:	f7ff ff8e 	bl	800100c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b0a      	cmp	r3, #10
 80010f8:	d90b      	bls.n	8001112 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2205      	movs	r2, #5
 800110a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e09f      	b.n	8001252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e5      	bne.n	80010ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7e1b      	ldrb	r3, [r3, #24]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d108      	bne.n	800113a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e007      	b.n	800114a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e5b      	ldrb	r3, [r3, #25]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e007      	b.n	8001174 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001172:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e9b      	ldrb	r3, [r3, #26]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0220 	orr.w	r2, r2, #32
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e007      	b.n	800119e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0220 	bic.w	r2, r2, #32
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7edb      	ldrb	r3, [r3, #27]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0210 	bic.w	r2, r2, #16
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0210 	orr.w	r2, r2, #16
 80011c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7f1b      	ldrb	r3, [r3, #28]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0208 	orr.w	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e007      	b.n	80011f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0208 	bic.w	r2, r2, #8
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f5b      	ldrb	r3, [r3, #29]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0204 	orr.w	r2, r2, #4
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e007      	b.n	800121c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	ea42 0103 	orr.w	r1, r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800125a:	b480      	push	{r7}
 800125c:	b087      	sub	sp, #28
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001270:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d003      	beq.n	8001280 <HAL_CAN_ConfigFilter+0x26>
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	2b02      	cmp	r3, #2
 800127c:	f040 80aa 	bne.w	80013d4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2201      	movs	r2, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d123      	bne.n	8001302 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3248      	adds	r2, #72	; 0x48
 80012e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	3348      	adds	r3, #72	; 0x48
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d122      	bne.n	8001350 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	431a      	orrs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3248      	adds	r2, #72	; 0x48
 8001330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001344:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001346:	6979      	ldr	r1, [r7, #20]
 8001348:	3348      	adds	r3, #72	; 0x48
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800136a:	e007      	b.n	800137c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d109      	bne.n	8001398 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001396:	e007      	b.n	80013a8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d107      	bne.n	80013c0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013c6:	f023 0201 	bic.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e006      	b.n	80013e2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d12e      	bne.n	800145e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fdf8 	bl	800100c <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800141e:	e012      	b.n	8001446 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001420:	f7ff fdf4 	bl	800100c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d90b      	bls.n	8001446 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2205      	movs	r2, #5
 800143e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e012      	b.n	800146c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e5      	bne.n	8001420 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e006      	b.n	800146c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001488:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <HAL_CAN_AddTxMessage+0x2c>
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	2b02      	cmp	r3, #2
 800149c:	f040 80ad 	bne.w	80015fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10a      	bne.n	80014c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8095 	beq.w	80015ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	0e1b      	lsrs	r3, r3, #24
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	6809      	ldr	r1, [r1, #0]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3318      	adds	r3, #24
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	440b      	add	r3, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00f      	b.n	8001518 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001502:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800150c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3318      	adds	r3, #24
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	440b      	add	r3, r1
 8001516:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3318      	adds	r3, #24
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	440b      	add	r3, r1
 8001528:	3304      	adds	r3, #4
 800152a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	7d1b      	ldrb	r3, [r3, #20]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d111      	bne.n	8001558 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3318      	adds	r3, #24
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	6811      	ldr	r1, [r2, #0]
 8001548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3318      	adds	r3, #24
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3307      	adds	r3, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	061a      	lsls	r2, r3, #24
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3306      	adds	r3, #6
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3305      	adds	r3, #5
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	4313      	orrs	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	3204      	adds	r2, #4
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4610      	mov	r0, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	6811      	ldr	r1, [r2, #0]
 8001580:	ea43 0200 	orr.w	r2, r3, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	440b      	add	r3, r1
 800158a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800158e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3303      	adds	r3, #3
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061a      	lsls	r2, r3, #24
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3302      	adds	r3, #2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	4313      	orrs	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	4610      	mov	r0, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	ea43 0200 	orr.w	r2, r3, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	440b      	add	r3, r1
 80015c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3318      	adds	r3, #24
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6811      	ldr	r1, [r2, #0]
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3318      	adds	r3, #24
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	440b      	add	r3, r1
 80015e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e00e      	b.n	8001608 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e006      	b.n	8001608 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3724      	adds	r7, #36	; 0x24
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d002      	beq.n	8001632 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d11d      	bne.n	800166e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d003      	beq.n	800169e <HAL_CAN_GetRxMessage+0x24>
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 8103 	bne.w	80018a4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10e      	bne.n	80016c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0f7      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0e8      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0204 	and.w	r2, r3, #4
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	331b      	adds	r3, #27
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00b      	b.n	8001730 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0202 	and.w	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	331b      	adds	r3, #27
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	2b07      	cmp	r3, #7
 800175c:	d903      	bls.n	8001766 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2208      	movs	r2, #8
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	e00b      	b.n	800177e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	331b      	adds	r3, #27
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	331b      	adds	r3, #27
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	331b      	adds	r3, #27
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0a1a      	lsrs	r2, r3, #8
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0c1a      	lsrs	r2, r3, #16
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3302      	adds	r3, #2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e1a      	lsrs	r2, r3, #24
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3303      	adds	r3, #3
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3304      	adds	r3, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0a1a      	lsrs	r2, r3, #8
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3305      	adds	r3, #5
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0c1a      	lsrs	r2, r3, #16
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3306      	adds	r3, #6
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e1a      	lsrs	r2, r3, #24
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3307      	adds	r3, #7
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d108      	bne.n	8001890 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0220 	orr.w	r2, r2, #32
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e007      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e006      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d002      	beq.n	80018da <HAL_CAN_ActivateNotification+0x1e>
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d109      	bne.n	80018ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6959      	ldr	r1, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b08a      	sub	sp, #40	; 0x28
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d07c      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d023      	beq.n	800199e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f97d 	bl	8001c68 <HAL_CAN_TxMailbox0CompleteCallback>
 800196e:	e016      	b.n	800199e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e00c      	b.n	800199e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e002      	b.n	800199e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f980 	bl	8001c9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d024      	beq.n	80019f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f95c 	bl	8001c7a <HAL_CAN_TxMailbox1CompleteCallback>
 80019c2:	e016      	b.n	80019f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e00c      	b.n	80019f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e002      	b.n	80019f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f95f 	bl	8001cb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d024      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f93b 	bl	8001c8c <HAL_CAN_TxMailbox2CompleteCallback>
 8001a16:	e016      	b.n	8001a46 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	e00c      	b.n	8001a46 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e002      	b.n	8001a46 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f93e 	bl	8001cc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2210      	movs	r2, #16
 8001a68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2208      	movs	r2, #8
 8001a84:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f924 	bl	8001cd4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fb51 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00c      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f904 	bl	8001cf8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8ec 	bl	8001ce6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8ed 	bl	8001d0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8e5 	bl	8001d1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d075      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06c      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03d      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d038      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d017      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x302>
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d804      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x2e0>
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d009      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x2ee>
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d00c      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be4:	e024      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001be6:	2b50      	cmp	r3, #80	; 0x50
 8001be8:	d018      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x316>
 8001bea:	2b60      	cmp	r3, #96	; 0x60
 8001bec:	d01b      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x320>
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d00f      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001bf2:	e01d      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfc:	e018      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0310 	orr.w	r3, r3, #16
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c06:	e013      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c10:	e00e      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1a:	e009      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c24:	e004      	b.n	8001c30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2204      	movs	r2, #4
 8001c46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f867 	bl	8001d2e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4906      	ldr	r1, [pc, #24]	; (8001dd8 <__NVIC_EnableIRQ+0x34>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb8:	f7ff ff90 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff2d 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff42 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff90 	bl	8001e30 <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5f 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff35 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b08b      	sub	sp, #44	; 0x2c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6e:	e127      	b.n	80021c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f70:	2201      	movs	r2, #1
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 8116 	bne.w	80021ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d034      	beq.n	8002000 <HAL_GPIO_Init+0xa4>
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d80d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x5a>
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d02b      	beq.n	8001ff6 <HAL_GPIO_Init+0x9a>
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d804      	bhi.n	8001fac <HAL_GPIO_Init+0x50>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d031      	beq.n	800200a <HAL_GPIO_Init+0xae>
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d01c      	beq.n	8001fe4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001faa:	e048      	b.n	800203e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d043      	beq.n	8002038 <HAL_GPIO_Init+0xdc>
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d01b      	beq.n	8001fec <HAL_GPIO_Init+0x90>
          break;
 8001fb4:	e043      	b.n	800203e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fb6:	4a89      	ldr	r2, [pc, #548]	; (80021dc <HAL_GPIO_Init+0x280>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d026      	beq.n	800200a <HAL_GPIO_Init+0xae>
 8001fbc:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_GPIO_Init+0x280>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d806      	bhi.n	8001fd0 <HAL_GPIO_Init+0x74>
 8001fc2:	4a87      	ldr	r2, [pc, #540]	; (80021e0 <HAL_GPIO_Init+0x284>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d020      	beq.n	800200a <HAL_GPIO_Init+0xae>
 8001fc8:	4a86      	ldr	r2, [pc, #536]	; (80021e4 <HAL_GPIO_Init+0x288>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_GPIO_Init+0xae>
          break;
 8001fce:	e036      	b.n	800203e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fd0:	4a85      	ldr	r2, [pc, #532]	; (80021e8 <HAL_GPIO_Init+0x28c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0xae>
 8001fd6:	4a85      	ldr	r2, [pc, #532]	; (80021ec <HAL_GPIO_Init+0x290>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d016      	beq.n	800200a <HAL_GPIO_Init+0xae>
 8001fdc:	4a84      	ldr	r2, [pc, #528]	; (80021f0 <HAL_GPIO_Init+0x294>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0xae>
          break;
 8001fe2:	e02c      	b.n	800203e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e028      	b.n	800203e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e023      	b.n	800203e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e01e      	b.n	800203e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	330c      	adds	r3, #12
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e019      	b.n	800203e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002012:	2304      	movs	r3, #4
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e012      	b.n	800203e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	611a      	str	r2, [r3, #16]
          break;
 800202a:	e008      	b.n	800203e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	615a      	str	r2, [r3, #20]
          break;
 8002036:	e002      	b.n	800203e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2bff      	cmp	r3, #255	; 0xff
 8002042:	d801      	bhi.n	8002048 <HAL_GPIO_Init+0xec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	e001      	b.n	800204c <HAL_GPIO_Init+0xf0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	d802      	bhi.n	800205a <HAL_GPIO_Init+0xfe>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x104>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3b08      	subs	r3, #8
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	210f      	movs	r1, #15
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	6a39      	ldr	r1, [r7, #32]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	431a      	orrs	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8096 	beq.w	80021ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800208e:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_GPIO_Init+0x298>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_GPIO_Init+0x298>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <HAL_GPIO_Init+0x298>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a6:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <HAL_GPIO_Init+0x29c>)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x2a0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x19e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x2a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x19a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_GPIO_Init+0x2a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x196>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <HAL_GPIO_Init+0x2ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x192>
 80020ea:	2303      	movs	r3, #3
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x1a0>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x1a0>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x1a0>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x1a0>
 80020fa:	2300      	movs	r3, #0
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800210c:	493a      	ldr	r1, [pc, #232]	; (80021f8 <HAL_GPIO_Init+0x29c>)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4938      	ldr	r1, [pc, #224]	; (800220c <HAL_GPIO_Init+0x2b0>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	4933      	ldr	r1, [pc, #204]	; (800220c <HAL_GPIO_Init+0x2b0>)
 800213e:	4013      	ands	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	492e      	ldr	r1, [pc, #184]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	60cb      	str	r3, [r1, #12]
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_GPIO_Init+0x2b0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4929      	ldr	r1, [pc, #164]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002166:	4013      	ands	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4924      	ldr	r1, [pc, #144]	; (800220c <HAL_GPIO_Init+0x2b0>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e006      	b.n	8002192 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_GPIO_Init+0x2b0>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	43db      	mvns	r3, r3
 800218c:	491f      	ldr	r1, [pc, #124]	; (800220c <HAL_GPIO_Init+0x2b0>)
 800218e:	4013      	ands	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_GPIO_Init+0x2b0>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	491a      	ldr	r1, [pc, #104]	; (800220c <HAL_GPIO_Init+0x2b0>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
 80021aa:	e006      	b.n	80021ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_GPIO_Init+0x2b0>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4915      	ldr	r1, [pc, #84]	; (800220c <HAL_GPIO_Init+0x2b0>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	3301      	adds	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f47f aed0 	bne.w	8001f70 <HAL_GPIO_Init+0x14>
  }
}
 80021d0:	bf00      	nop
 80021d2:	372c      	adds	r7, #44	; 0x2c
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	10210000 	.word	0x10210000
 80021e0:	10110000 	.word	0x10110000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10310000 	.word	0x10310000
 80021ec:	10320000 	.word	0x10320000
 80021f0:	10220000 	.word	0x10220000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	40011400 	.word	0x40011400
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43d9      	mvns	r1, r3
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e11f      	b.n	80024c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fd8c 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d8:	f001 f952 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_I2C_Init+0x25c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d807      	bhi.n	80022f8 <HAL_I2C_Init+0x84>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_I2C_Init+0x260>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e006      	b.n	8002306 <HAL_I2C_Init+0x92>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_I2C_Init+0x264>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0db      	b.n	80024c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a72      	ldr	r2, [pc, #456]	; (80024dc <HAL_I2C_Init+0x268>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <HAL_I2C_Init+0x25c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d802      	bhi.n	8002348 <HAL_I2C_Init+0xd4>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	e009      	b.n	800235c <HAL_I2C_Init+0xe8>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	4a63      	ldr	r2, [pc, #396]	; (80024e0 <HAL_I2C_Init+0x26c>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800236e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4956      	ldr	r1, [pc, #344]	; (80024d0 <HAL_I2C_Init+0x25c>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d80d      	bhi.n	8002398 <HAL_I2C_Init+0x124>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fbb1 f3f3 	udiv	r3, r1, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	bf38      	it	cc
 8002394:	2304      	movcc	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x150>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x176>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x17e>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1a4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1c4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7fe fd88 	bl	800100c <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	; (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa92 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f9ca 	bl	800293c <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fb50 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fb47 	bl	8002d04 <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7fe fc8c 	bl	800100c <HAL_GetTick>
 80026f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 8111 	bne.w	800292a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	4988      	ldr	r1, [pc, #544]	; (8002934 <HAL_I2C_IsDeviceReady+0x254>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f994 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e104      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_IsDeviceReady+0x50>
 800272c:	2302      	movs	r3, #2
 800272e:	e0fd      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d007      	beq.n	8002756 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2224      	movs	r2, #36	; 0x24
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a70      	ldr	r2, [pc, #448]	; (8002938 <HAL_I2C_IsDeviceReady+0x258>)
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002788:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f952 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d103      	bne.n	80027ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b6      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fc1d 	bl	800100c <HAL_GetTick>
 80027d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002802:	e025      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002804:	f7fe fc02 	bl	800100c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d302      	bcc.n	800281a <HAL_I2C_IsDeviceReady+0x13a>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22a0      	movs	r2, #160	; 0xa0
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2ba0      	cmp	r3, #160	; 0xa0
 800285a:	d005      	beq.n	8002868 <HAL_I2C_IsDeviceReady+0x188>
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_I2C_IsDeviceReady+0x188>
 8002862:	7dbb      	ldrb	r3, [r7, #22]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0cd      	beq.n	8002804 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d129      	bne.n	80028d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2319      	movs	r3, #25
 80028aa:	2201      	movs	r2, #1
 80028ac:	4921      	ldr	r1, [pc, #132]	; (8002934 <HAL_I2C_IsDeviceReady+0x254>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8c6 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e036      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e02c      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2319      	movs	r3, #25
 80028f2:	2201      	movs	r2, #1
 80028f4:	490f      	ldr	r1, [pc, #60]	; (8002934 <HAL_I2C_IsDeviceReady+0x254>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f8a2 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e012      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3301      	adds	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	f4ff af32 	bcc.w	800277a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	00100002 	.word	0x00100002
 8002938:	ffff0000 	.word	0xffff0000

0800293c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d006      	beq.n	8002966 <I2C_MasterRequestWrite+0x2a>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d003      	beq.n	8002966 <I2C_MasterRequestWrite+0x2a>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002964:	d108      	bne.n	8002978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00b      	b.n	8002990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	2b12      	cmp	r3, #18
 800297e:	d107      	bne.n	8002990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f84f 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b6:	d103      	bne.n	80029c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e035      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	e01b      	b.n	8002a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	11db      	asrs	r3, r3, #7
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0306 	and.w	r3, r3, #6
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f063 030f 	orn	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <I2C_MasterRequestWrite+0xfc>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f898 	bl	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e010      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <I2C_MasterRequestWrite+0x100>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f888 	bl	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	00010008 	.word	0x00010008
 8002a3c:	00010002 	.word	0x00010002

08002a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	e048      	b.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a58:	d044      	beq.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe fad7 	bl	800100c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d139      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10d      	bne.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	e00c      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e023      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10d      	bne.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	e00c      	b.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d093      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b42:	e071      	b.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d123      	bne.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e067      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba2:	d041      	beq.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7fe fa32 	bl	800100c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d136      	bne.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10c      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e00b      	b.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e021      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10c      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e00b      	b.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af6d 	bne.w	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c80:	e034      	b.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f886 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e034      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d028      	beq.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe f9b7 	bl	800100c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11d      	bne.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d016      	beq.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e007      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d1c3      	bne.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d10:	e034      	b.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f83e 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e034      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d28:	d028      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe f96f 	bl	800100c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d016      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d1c3      	bne.n	8002d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d11b      	bne.n	8002de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e26c      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8087 	beq.w	8002f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d00c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e1c:	4b8f      	ldr	r3, [pc, #572]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d112      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b89      	ldr	r3, [pc, #548]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x12c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d168      	bne.n	8002f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e246      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x76>
 8002e58:	4b80      	ldr	r3, [pc, #512]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7f      	ldr	r2, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x98>
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7a      	ldr	r2, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b78      	ldr	r3, [pc, #480]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xbc>
 8002e92:	4b72      	ldr	r3, [pc, #456]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002eac:	4b6b      	ldr	r3, [pc, #428]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a67      	ldr	r2, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f89e 	bl	800100c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe f89a 	bl	800100c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1fa      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe4>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f88a 	bl	800100c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe f886 	bl	800100c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1e6      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x10c>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d063      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1ba      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4939      	ldr	r1, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x270>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe f83f 	bl	800100c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe f83b 	bl	800100c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e19b      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4927      	ldr	r1, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f81e 	bl	800100c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7fe f81a 	bl	800100c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e17a      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03a      	beq.n	8003074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <HAL_RCC_OscConfig+0x274>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fd fffe 	bl	800100c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd fffa 	bl	800100c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e15a      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003032:	2001      	movs	r0, #1
 8003034:	f000 fab8 	bl	80035a8 <RCC_Delay>
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_OscConfig+0x274>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fd ffe4 	bl	800100c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003046:	e00f      	b.n	8003068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7fd ffe0 	bl	800100c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d908      	bls.n	8003068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e140      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	42420000 	.word	0x42420000
 8003064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b9e      	ldr	r3, [pc, #632]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e9      	bne.n	8003048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a6 	beq.w	80031ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b97      	ldr	r3, [pc, #604]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b94      	ldr	r3, [pc, #592]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a93      	ldr	r2, [pc, #588]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	61d3      	str	r3, [r2, #28]
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b8e      	ldr	r3, [pc, #568]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b8b      	ldr	r3, [pc, #556]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a8a      	ldr	r2, [pc, #552]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fd ffa1 	bl	800100c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7fd ff9d 	bl	800100c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0fd      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x312>
 80030f4:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e02d      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x334>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a72      	ldr	r2, [pc, #456]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	e01c      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x356>
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e00b      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a66      	ldr	r2, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6213      	str	r3, [r2, #32]
 8003152:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a63      	ldr	r2, [pc, #396]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fd ff51 	bl	800100c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd ff4d 	bl	800100c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0ab      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCC_OscConfig+0x37e>
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fd ff3b 	bl	800100c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fd ff37 	bl	800100c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e095      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8081 	beq.w	80032da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d8:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d061      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d146      	bne.n	800327a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fd ff0b 	bl	800100c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fd ff07 	bl	800100c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e067      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d108      	bne.n	8003234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	492d      	ldr	r1, [pc, #180]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a19      	ldr	r1, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	430b      	orrs	r3, r1
 8003246:	4927      	ldr	r1, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fedb 	bl	800100c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fed7 	bl	800100c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e037      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x46a>
 8003278:	e02f      	b.n	80032da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd fec4 	bl	800100c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd fec0 	bl	800100c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e020      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x498>
 80032a6:	e018      	b.n	80032da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e013      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	42420060 	.word	0x42420060

080032f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0d0      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b6a      	ldr	r3, [pc, #424]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4965      	ldr	r1, [pc, #404]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b8      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800334c:	4b59      	ldr	r3, [pc, #356]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	494d      	ldr	r1, [pc, #308]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d040      	beq.n	8003410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d115      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e07f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e073      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06b      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4936      	ldr	r1, [pc, #216]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e0:	f7fd fe14 	bl	800100c <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fd fe10 	bl	800100c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e053      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d210      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e032      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4916      	ldr	r1, [pc, #88]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347e:	f000 f821 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003482:	4601      	mov	r1, r0
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	fa21 f303 	lsr.w	r3, r1, r3
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1cc>)
 8003498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1d0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fd72 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08005e3c 	.word	0x08005e3c
 80034bc:	20000008 	.word	0x20000008
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_GetSysClockFreq+0x94>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e027      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 80034f6:	613b      	str	r3, [r7, #16]
      break;
 80034f8:	e027      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0c9b      	lsrs	r3, r3, #18
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_GetSysClockFreq+0x94>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0c5b      	lsrs	r3, r3, #17
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e004      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	613b      	str	r3, [r7, #16]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 8003546:	613b      	str	r3, [r7, #16]
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	693b      	ldr	r3, [r7, #16]
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	08005e54 	.word	0x08005e54
 8003564:	08005e64 	.word	0x08005e64
 8003568:	003d0900 	.word	0x003d0900

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <HAL_RCC_GetHCLKFreq+0x10>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000008 	.word	0x20000008

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff2 	bl	800356c <HAL_RCC_GetHCLKFreq>
 8003588:	4601      	mov	r1, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08005e4c 	.word	0x08005e4c

080035a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <RCC_Delay+0x34>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <RCC_Delay+0x38>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0a5b      	lsrs	r3, r3, #9
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c4:	bf00      	nop
  }
  while (Delay --);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f9      	bne.n	80035c4 <RCC_Delay+0x1c>
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000008 	.word	0x20000008
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <__errno>:
 80035e4:	4b01      	ldr	r3, [pc, #4]	; (80035ec <__errno+0x8>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000014 	.word	0x20000014

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	2500      	movs	r5, #0
 80035f4:	4e0c      	ldr	r6, [pc, #48]	; (8003628 <__libc_init_array+0x38>)
 80035f6:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f8:	1ba4      	subs	r4, r4, r6
 80035fa:	10a4      	asrs	r4, r4, #2
 80035fc:	42a5      	cmp	r5, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	f000 fc34 	bl	8003e6c <_init>
 8003604:	2500      	movs	r5, #0
 8003606:	4e0a      	ldr	r6, [pc, #40]	; (8003630 <__libc_init_array+0x40>)
 8003608:	4c0a      	ldr	r4, [pc, #40]	; (8003634 <__libc_init_array+0x44>)
 800360a:	1ba4      	subs	r4, r4, r6
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	42a5      	cmp	r5, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003618:	4798      	blx	r3
 800361a:	3501      	adds	r5, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003622:	4798      	blx	r3
 8003624:	3501      	adds	r5, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08005e9c 	.word	0x08005e9c
 800362c:	08005e9c 	.word	0x08005e9c
 8003630:	08005e9c 	.word	0x08005e9c
 8003634:	08005ea0 	.word	0x08005ea0

08003638 <memset>:
 8003638:	4603      	mov	r3, r0
 800363a:	4402      	add	r2, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <_vsiprintf_r>:
 8003648:	b500      	push	{lr}
 800364a:	b09b      	sub	sp, #108	; 0x6c
 800364c:	9100      	str	r1, [sp, #0]
 800364e:	9104      	str	r1, [sp, #16]
 8003650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003654:	9105      	str	r1, [sp, #20]
 8003656:	9102      	str	r1, [sp, #8]
 8003658:	4905      	ldr	r1, [pc, #20]	; (8003670 <_vsiprintf_r+0x28>)
 800365a:	9103      	str	r1, [sp, #12]
 800365c:	4669      	mov	r1, sp
 800365e:	f000 f86d 	bl	800373c <_svfiprintf_r>
 8003662:	2200      	movs	r2, #0
 8003664:	9b00      	ldr	r3, [sp, #0]
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	b01b      	add	sp, #108	; 0x6c
 800366a:	f85d fb04 	ldr.w	pc, [sp], #4
 800366e:	bf00      	nop
 8003670:	ffff0208 	.word	0xffff0208

08003674 <vsiprintf>:
 8003674:	4613      	mov	r3, r2
 8003676:	460a      	mov	r2, r1
 8003678:	4601      	mov	r1, r0
 800367a:	4802      	ldr	r0, [pc, #8]	; (8003684 <vsiprintf+0x10>)
 800367c:	6800      	ldr	r0, [r0, #0]
 800367e:	f7ff bfe3 	b.w	8003648 <_vsiprintf_r>
 8003682:	bf00      	nop
 8003684:	20000014 	.word	0x20000014

08003688 <__ssputs_r>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	688e      	ldr	r6, [r1, #8]
 800368e:	4682      	mov	sl, r0
 8003690:	429e      	cmp	r6, r3
 8003692:	460c      	mov	r4, r1
 8003694:	4690      	mov	r8, r2
 8003696:	4699      	mov	r9, r3
 8003698:	d837      	bhi.n	800370a <__ssputs_r+0x82>
 800369a:	898a      	ldrh	r2, [r1, #12]
 800369c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036a0:	d031      	beq.n	8003706 <__ssputs_r+0x7e>
 80036a2:	2302      	movs	r3, #2
 80036a4:	6825      	ldr	r5, [r4, #0]
 80036a6:	6909      	ldr	r1, [r1, #16]
 80036a8:	1a6f      	subs	r7, r5, r1
 80036aa:	6965      	ldr	r5, [r4, #20]
 80036ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80036b4:	f109 0301 	add.w	r3, r9, #1
 80036b8:	443b      	add	r3, r7
 80036ba:	429d      	cmp	r5, r3
 80036bc:	bf38      	it	cc
 80036be:	461d      	movcc	r5, r3
 80036c0:	0553      	lsls	r3, r2, #21
 80036c2:	d530      	bpl.n	8003726 <__ssputs_r+0x9e>
 80036c4:	4629      	mov	r1, r5
 80036c6:	f000 fb37 	bl	8003d38 <_malloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	b950      	cbnz	r0, 80036e4 <__ssputs_r+0x5c>
 80036ce:	230c      	movs	r3, #12
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d4:	f8ca 3000 	str.w	r3, [sl]
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e4:	463a      	mov	r2, r7
 80036e6:	6921      	ldr	r1, [r4, #16]
 80036e8:	f000 fab6 	bl	8003c58 <memcpy>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	6126      	str	r6, [r4, #16]
 80036fa:	443e      	add	r6, r7
 80036fc:	6026      	str	r6, [r4, #0]
 80036fe:	464e      	mov	r6, r9
 8003700:	6165      	str	r5, [r4, #20]
 8003702:	1bed      	subs	r5, r5, r7
 8003704:	60a5      	str	r5, [r4, #8]
 8003706:	454e      	cmp	r6, r9
 8003708:	d900      	bls.n	800370c <__ssputs_r+0x84>
 800370a:	464e      	mov	r6, r9
 800370c:	4632      	mov	r2, r6
 800370e:	4641      	mov	r1, r8
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	f000 faac 	bl	8003c6e <memmove>
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	2000      	movs	r0, #0
 800371a:	1b9b      	subs	r3, r3, r6
 800371c:	60a3      	str	r3, [r4, #8]
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	441e      	add	r6, r3
 8003722:	6026      	str	r6, [r4, #0]
 8003724:	e7dc      	b.n	80036e0 <__ssputs_r+0x58>
 8003726:	462a      	mov	r2, r5
 8003728:	f000 fb60 	bl	8003dec <_realloc_r>
 800372c:	4606      	mov	r6, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	d1e2      	bne.n	80036f8 <__ssputs_r+0x70>
 8003732:	6921      	ldr	r1, [r4, #16]
 8003734:	4650      	mov	r0, sl
 8003736:	f000 fab3 	bl	8003ca0 <_free_r>
 800373a:	e7c8      	b.n	80036ce <__ssputs_r+0x46>

0800373c <_svfiprintf_r>:
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003740:	461d      	mov	r5, r3
 8003742:	898b      	ldrh	r3, [r1, #12]
 8003744:	b09d      	sub	sp, #116	; 0x74
 8003746:	061f      	lsls	r7, r3, #24
 8003748:	4680      	mov	r8, r0
 800374a:	460c      	mov	r4, r1
 800374c:	4616      	mov	r6, r2
 800374e:	d50f      	bpl.n	8003770 <_svfiprintf_r+0x34>
 8003750:	690b      	ldr	r3, [r1, #16]
 8003752:	b96b      	cbnz	r3, 8003770 <_svfiprintf_r+0x34>
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	f000 faef 	bl	8003d38 <_malloc_r>
 800375a:	6020      	str	r0, [r4, #0]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b928      	cbnz	r0, 800376c <_svfiprintf_r+0x30>
 8003760:	230c      	movs	r3, #12
 8003762:	f8c8 3000 	str.w	r3, [r8]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376a:	e0c8      	b.n	80038fe <_svfiprintf_r+0x1c2>
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	6163      	str	r3, [r4, #20]
 8003770:	2300      	movs	r3, #0
 8003772:	9309      	str	r3, [sp, #36]	; 0x24
 8003774:	2320      	movs	r3, #32
 8003776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377a:	2330      	movs	r3, #48	; 0x30
 800377c:	f04f 0b01 	mov.w	fp, #1
 8003780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003784:	9503      	str	r5, [sp, #12]
 8003786:	4637      	mov	r7, r6
 8003788:	463d      	mov	r5, r7
 800378a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800378e:	b10b      	cbz	r3, 8003794 <_svfiprintf_r+0x58>
 8003790:	2b25      	cmp	r3, #37	; 0x25
 8003792:	d13e      	bne.n	8003812 <_svfiprintf_r+0xd6>
 8003794:	ebb7 0a06 	subs.w	sl, r7, r6
 8003798:	d00b      	beq.n	80037b2 <_svfiprintf_r+0x76>
 800379a:	4653      	mov	r3, sl
 800379c:	4632      	mov	r2, r6
 800379e:	4621      	mov	r1, r4
 80037a0:	4640      	mov	r0, r8
 80037a2:	f7ff ff71 	bl	8003688 <__ssputs_r>
 80037a6:	3001      	adds	r0, #1
 80037a8:	f000 80a4 	beq.w	80038f4 <_svfiprintf_r+0x1b8>
 80037ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ae:	4453      	add	r3, sl
 80037b0:	9309      	str	r3, [sp, #36]	; 0x24
 80037b2:	783b      	ldrb	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 809d 	beq.w	80038f4 <_svfiprintf_r+0x1b8>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	9307      	str	r3, [sp, #28]
 80037c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037cc:	931a      	str	r3, [sp, #104]	; 0x68
 80037ce:	462f      	mov	r7, r5
 80037d0:	2205      	movs	r2, #5
 80037d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80037d6:	4850      	ldr	r0, [pc, #320]	; (8003918 <_svfiprintf_r+0x1dc>)
 80037d8:	f000 fa30 	bl	8003c3c <memchr>
 80037dc:	9b04      	ldr	r3, [sp, #16]
 80037de:	b9d0      	cbnz	r0, 8003816 <_svfiprintf_r+0xda>
 80037e0:	06d9      	lsls	r1, r3, #27
 80037e2:	bf44      	itt	mi
 80037e4:	2220      	movmi	r2, #32
 80037e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037ea:	071a      	lsls	r2, r3, #28
 80037ec:	bf44      	itt	mi
 80037ee:	222b      	movmi	r2, #43	; 0x2b
 80037f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037f4:	782a      	ldrb	r2, [r5, #0]
 80037f6:	2a2a      	cmp	r2, #42	; 0x2a
 80037f8:	d015      	beq.n	8003826 <_svfiprintf_r+0xea>
 80037fa:	462f      	mov	r7, r5
 80037fc:	2000      	movs	r0, #0
 80037fe:	250a      	movs	r5, #10
 8003800:	9a07      	ldr	r2, [sp, #28]
 8003802:	4639      	mov	r1, r7
 8003804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003808:	3b30      	subs	r3, #48	; 0x30
 800380a:	2b09      	cmp	r3, #9
 800380c:	d94d      	bls.n	80038aa <_svfiprintf_r+0x16e>
 800380e:	b1b8      	cbz	r0, 8003840 <_svfiprintf_r+0x104>
 8003810:	e00f      	b.n	8003832 <_svfiprintf_r+0xf6>
 8003812:	462f      	mov	r7, r5
 8003814:	e7b8      	b.n	8003788 <_svfiprintf_r+0x4c>
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <_svfiprintf_r+0x1dc>)
 8003818:	463d      	mov	r5, r7
 800381a:	1a80      	subs	r0, r0, r2
 800381c:	fa0b f000 	lsl.w	r0, fp, r0
 8003820:	4318      	orrs	r0, r3
 8003822:	9004      	str	r0, [sp, #16]
 8003824:	e7d3      	b.n	80037ce <_svfiprintf_r+0x92>
 8003826:	9a03      	ldr	r2, [sp, #12]
 8003828:	1d11      	adds	r1, r2, #4
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	9103      	str	r1, [sp, #12]
 800382e:	2a00      	cmp	r2, #0
 8003830:	db01      	blt.n	8003836 <_svfiprintf_r+0xfa>
 8003832:	9207      	str	r2, [sp, #28]
 8003834:	e004      	b.n	8003840 <_svfiprintf_r+0x104>
 8003836:	4252      	negs	r2, r2
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	9207      	str	r2, [sp, #28]
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	783b      	ldrb	r3, [r7, #0]
 8003842:	2b2e      	cmp	r3, #46	; 0x2e
 8003844:	d10c      	bne.n	8003860 <_svfiprintf_r+0x124>
 8003846:	787b      	ldrb	r3, [r7, #1]
 8003848:	2b2a      	cmp	r3, #42	; 0x2a
 800384a:	d133      	bne.n	80038b4 <_svfiprintf_r+0x178>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	3702      	adds	r7, #2
 8003850:	1d1a      	adds	r2, r3, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	9203      	str	r2, [sp, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	bfb8      	it	lt
 800385a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	4d2e      	ldr	r5, [pc, #184]	; (800391c <_svfiprintf_r+0x1e0>)
 8003862:	2203      	movs	r2, #3
 8003864:	7839      	ldrb	r1, [r7, #0]
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f9e8 	bl	8003c3c <memchr>
 800386c:	b138      	cbz	r0, 800387e <_svfiprintf_r+0x142>
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	1b40      	subs	r0, r0, r5
 8003872:	fa03 f000 	lsl.w	r0, r3, r0
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	3701      	adds	r7, #1
 800387a:	4303      	orrs	r3, r0
 800387c:	9304      	str	r3, [sp, #16]
 800387e:	7839      	ldrb	r1, [r7, #0]
 8003880:	2206      	movs	r2, #6
 8003882:	4827      	ldr	r0, [pc, #156]	; (8003920 <_svfiprintf_r+0x1e4>)
 8003884:	1c7e      	adds	r6, r7, #1
 8003886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800388a:	f000 f9d7 	bl	8003c3c <memchr>
 800388e:	2800      	cmp	r0, #0
 8003890:	d038      	beq.n	8003904 <_svfiprintf_r+0x1c8>
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <_svfiprintf_r+0x1e8>)
 8003894:	bb13      	cbnz	r3, 80038dc <_svfiprintf_r+0x1a0>
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	3307      	adds	r3, #7
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	3308      	adds	r3, #8
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a4:	444b      	add	r3, r9
 80038a6:	9309      	str	r3, [sp, #36]	; 0x24
 80038a8:	e76d      	b.n	8003786 <_svfiprintf_r+0x4a>
 80038aa:	fb05 3202 	mla	r2, r5, r2, r3
 80038ae:	2001      	movs	r0, #1
 80038b0:	460f      	mov	r7, r1
 80038b2:	e7a6      	b.n	8003802 <_svfiprintf_r+0xc6>
 80038b4:	2300      	movs	r3, #0
 80038b6:	250a      	movs	r5, #10
 80038b8:	4619      	mov	r1, r3
 80038ba:	3701      	adds	r7, #1
 80038bc:	9305      	str	r3, [sp, #20]
 80038be:	4638      	mov	r0, r7
 80038c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038c4:	3a30      	subs	r2, #48	; 0x30
 80038c6:	2a09      	cmp	r2, #9
 80038c8:	d903      	bls.n	80038d2 <_svfiprintf_r+0x196>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0c8      	beq.n	8003860 <_svfiprintf_r+0x124>
 80038ce:	9105      	str	r1, [sp, #20]
 80038d0:	e7c6      	b.n	8003860 <_svfiprintf_r+0x124>
 80038d2:	fb05 2101 	mla	r1, r5, r1, r2
 80038d6:	2301      	movs	r3, #1
 80038d8:	4607      	mov	r7, r0
 80038da:	e7f0      	b.n	80038be <_svfiprintf_r+0x182>
 80038dc:	ab03      	add	r3, sp, #12
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4622      	mov	r2, r4
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <_svfiprintf_r+0x1ec>)
 80038e4:	a904      	add	r1, sp, #16
 80038e6:	4640      	mov	r0, r8
 80038e8:	f3af 8000 	nop.w
 80038ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80038f0:	4681      	mov	r9, r0
 80038f2:	d1d6      	bne.n	80038a2 <_svfiprintf_r+0x166>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	065b      	lsls	r3, r3, #25
 80038f8:	f53f af35 	bmi.w	8003766 <_svfiprintf_r+0x2a>
 80038fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038fe:	b01d      	add	sp, #116	; 0x74
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	ab03      	add	r3, sp, #12
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4622      	mov	r2, r4
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <_svfiprintf_r+0x1ec>)
 800390c:	a904      	add	r1, sp, #16
 800390e:	4640      	mov	r0, r8
 8003910:	f000 f882 	bl	8003a18 <_printf_i>
 8003914:	e7ea      	b.n	80038ec <_svfiprintf_r+0x1b0>
 8003916:	bf00      	nop
 8003918:	08005e66 	.word	0x08005e66
 800391c:	08005e6c 	.word	0x08005e6c
 8003920:	08005e70 	.word	0x08005e70
 8003924:	00000000 	.word	0x00000000
 8003928:	08003689 	.word	0x08003689

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4691      	mov	r9, r2
 8003932:	461f      	mov	r7, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	4606      	mov	r6, r0
 800393a:	4293      	cmp	r3, r2
 800393c:	bfb8      	it	lt
 800393e:	4613      	movlt	r3, r2
 8003940:	f8c9 3000 	str.w	r3, [r9]
 8003944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003948:	460c      	mov	r4, r1
 800394a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800394e:	b112      	cbz	r2, 8003956 <_printf_common+0x2a>
 8003950:	3301      	adds	r3, #1
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003960:	3302      	addmi	r3, #2
 8003962:	f8c9 3000 	strmi.w	r3, [r9]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d107      	bne.n	800397e <_printf_common+0x52>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f8d9 2000 	ldr.w	r2, [r9]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc29      	bgt.n	80039d2 <_printf_common+0xa6>
 800397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	3300      	adds	r3, #0
 8003986:	bf18      	it	ne
 8003988:	2301      	movne	r3, #1
 800398a:	0692      	lsls	r2, r2, #26
 800398c:	d42e      	bmi.n	80039ec <_printf_common+0xc0>
 800398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003992:	4639      	mov	r1, r7
 8003994:	4630      	mov	r0, r6
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d021      	beq.n	80039e0 <_printf_common+0xb4>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	68e5      	ldr	r5, [r4, #12]
 80039a0:	f003 0306 	and.w	r3, r3, #6
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	bf18      	it	ne
 80039a8:	2500      	movne	r5, #0
 80039aa:	f8d9 2000 	ldr.w	r2, [r9]
 80039ae:	f04f 0900 	mov.w	r9, #0
 80039b2:	bf08      	it	eq
 80039b4:	1aad      	subeq	r5, r5, r2
 80039b6:	68a3      	ldr	r3, [r4, #8]
 80039b8:	6922      	ldr	r2, [r4, #16]
 80039ba:	bf08      	it	eq
 80039bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039c0:	4293      	cmp	r3, r2
 80039c2:	bfc4      	itt	gt
 80039c4:	1a9b      	subgt	r3, r3, r2
 80039c6:	18ed      	addgt	r5, r5, r3
 80039c8:	341a      	adds	r4, #26
 80039ca:	454d      	cmp	r5, r9
 80039cc:	d11a      	bne.n	8003a04 <_printf_common+0xd8>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e008      	b.n	80039e4 <_printf_common+0xb8>
 80039d2:	2301      	movs	r3, #1
 80039d4:	4652      	mov	r2, sl
 80039d6:	4639      	mov	r1, r7
 80039d8:	4630      	mov	r0, r6
 80039da:	47c0      	blx	r8
 80039dc:	3001      	adds	r0, #1
 80039de:	d103      	bne.n	80039e8 <_printf_common+0xbc>
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e8:	3501      	adds	r5, #1
 80039ea:	e7c2      	b.n	8003972 <_printf_common+0x46>
 80039ec:	2030      	movs	r0, #48	; 0x30
 80039ee:	18e1      	adds	r1, r4, r3
 80039f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fa:	4422      	add	r2, r4
 80039fc:	3302      	adds	r3, #2
 80039fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a02:	e7c4      	b.n	800398e <_printf_common+0x62>
 8003a04:	2301      	movs	r3, #1
 8003a06:	4622      	mov	r2, r4
 8003a08:	4639      	mov	r1, r7
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	47c0      	blx	r8
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d0e6      	beq.n	80039e0 <_printf_common+0xb4>
 8003a12:	f109 0901 	add.w	r9, r9, #1
 8003a16:	e7d8      	b.n	80039ca <_printf_common+0x9e>

08003a18 <_printf_i>:
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a20:	460c      	mov	r4, r1
 8003a22:	7e09      	ldrb	r1, [r1, #24]
 8003a24:	b085      	sub	sp, #20
 8003a26:	296e      	cmp	r1, #110	; 0x6e
 8003a28:	4617      	mov	r7, r2
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	4698      	mov	r8, r3
 8003a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a30:	f000 80b3 	beq.w	8003b9a <_printf_i+0x182>
 8003a34:	d822      	bhi.n	8003a7c <_printf_i+0x64>
 8003a36:	2963      	cmp	r1, #99	; 0x63
 8003a38:	d036      	beq.n	8003aa8 <_printf_i+0x90>
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x3a>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	f000 80b9 	beq.w	8003bb4 <_printf_i+0x19c>
 8003a42:	2958      	cmp	r1, #88	; 0x58
 8003a44:	f000 8083 	beq.w	8003b4e <_printf_i+0x136>
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a50:	e032      	b.n	8003ab8 <_printf_i+0xa0>
 8003a52:	2964      	cmp	r1, #100	; 0x64
 8003a54:	d001      	beq.n	8003a5a <_printf_i+0x42>
 8003a56:	2969      	cmp	r1, #105	; 0x69
 8003a58:	d1f6      	bne.n	8003a48 <_printf_i+0x30>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	0605      	lsls	r5, r0, #24
 8003a60:	f103 0104 	add.w	r1, r3, #4
 8003a64:	d52a      	bpl.n	8003abc <_printf_i+0xa4>
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0x5e>
 8003a6e:	222d      	movs	r2, #45	; 0x2d
 8003a70:	425b      	negs	r3, r3
 8003a72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a76:	486f      	ldr	r0, [pc, #444]	; (8003c34 <_printf_i+0x21c>)
 8003a78:	220a      	movs	r2, #10
 8003a7a:	e039      	b.n	8003af0 <_printf_i+0xd8>
 8003a7c:	2973      	cmp	r1, #115	; 0x73
 8003a7e:	f000 809d 	beq.w	8003bbc <_printf_i+0x1a4>
 8003a82:	d808      	bhi.n	8003a96 <_printf_i+0x7e>
 8003a84:	296f      	cmp	r1, #111	; 0x6f
 8003a86:	d020      	beq.n	8003aca <_printf_i+0xb2>
 8003a88:	2970      	cmp	r1, #112	; 0x70
 8003a8a:	d1dd      	bne.n	8003a48 <_printf_i+0x30>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	e003      	b.n	8003a9e <_printf_i+0x86>
 8003a96:	2975      	cmp	r1, #117	; 0x75
 8003a98:	d017      	beq.n	8003aca <_printf_i+0xb2>
 8003a9a:	2978      	cmp	r1, #120	; 0x78
 8003a9c:	d1d4      	bne.n	8003a48 <_printf_i+0x30>
 8003a9e:	2378      	movs	r3, #120	; 0x78
 8003aa0:	4865      	ldr	r0, [pc, #404]	; (8003c38 <_printf_i+0x220>)
 8003aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa6:	e055      	b.n	8003b54 <_printf_i+0x13c>
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aae:	1d19      	adds	r1, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6011      	str	r1, [r2, #0]
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08c      	b.n	8003bd6 <_printf_i+0x1be>
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac2:	6011      	str	r1, [r2, #0]
 8003ac4:	bf18      	it	ne
 8003ac6:	b21b      	sxthne	r3, r3
 8003ac8:	e7cf      	b.n	8003a6a <_printf_i+0x52>
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6010      	str	r0, [r2, #0]
 8003ad2:	0628      	lsls	r0, r5, #24
 8003ad4:	d501      	bpl.n	8003ada <_printf_i+0xc2>
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_printf_i+0xc8>
 8003ada:	0668      	lsls	r0, r5, #25
 8003adc:	d5fb      	bpl.n	8003ad6 <_printf_i+0xbe>
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	296f      	cmp	r1, #111	; 0x6f
 8003ae2:	bf14      	ite	ne
 8003ae4:	220a      	movne	r2, #10
 8003ae6:	2208      	moveq	r2, #8
 8003ae8:	4852      	ldr	r0, [pc, #328]	; (8003c34 <_printf_i+0x21c>)
 8003aea:	2100      	movs	r1, #0
 8003aec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af0:	6865      	ldr	r5, [r4, #4]
 8003af2:	2d00      	cmp	r5, #0
 8003af4:	60a5      	str	r5, [r4, #8]
 8003af6:	f2c0 8095 	blt.w	8003c24 <_printf_i+0x20c>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	f021 0104 	bic.w	r1, r1, #4
 8003b00:	6021      	str	r1, [r4, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <_printf_i+0x16a>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	f040 808e 	bne.w	8003c28 <_printf_i+0x210>
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	2a08      	cmp	r2, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x112>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x112>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b26:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b2a:	ebac 0305 	sub.w	r3, ip, r5
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	f8cd 8000 	str.w	r8, [sp]
 8003b34:	463b      	mov	r3, r7
 8003b36:	aa03      	add	r2, sp, #12
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff fef6 	bl	800392c <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d14d      	bne.n	8003be0 <_printf_i+0x1c8>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b48:	b005      	add	sp, #20
 8003b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b4e:	4839      	ldr	r0, [pc, #228]	; (8003c34 <_printf_i+0x21c>)
 8003b50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	1d1d      	adds	r5, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6015      	str	r5, [r2, #0]
 8003b5e:	060a      	lsls	r2, r1, #24
 8003b60:	d50b      	bpl.n	8003b7a <_printf_i+0x162>
 8003b62:	07ca      	lsls	r2, r1, #31
 8003b64:	bf44      	itt	mi
 8003b66:	f041 0120 	orrmi.w	r1, r1, #32
 8003b6a:	6021      	strmi	r1, [r4, #0]
 8003b6c:	b91b      	cbnz	r3, 8003b76 <_printf_i+0x15e>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	f022 0220 	bic.w	r2, r2, #32
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	e7b7      	b.n	8003aea <_printf_i+0xd2>
 8003b7a:	064d      	lsls	r5, r1, #25
 8003b7c:	bf48      	it	mi
 8003b7e:	b29b      	uxthmi	r3, r3
 8003b80:	e7ef      	b.n	8003b62 <_printf_i+0x14a>
 8003b82:	4665      	mov	r5, ip
 8003b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b88:	fb02 3311 	mls	r3, r2, r1, r3
 8003b8c:	5cc3      	ldrb	r3, [r0, r3]
 8003b8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b92:	460b      	mov	r3, r1
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f5      	bne.n	8003b84 <_printf_i+0x16c>
 8003b98:	e7b9      	b.n	8003b0e <_printf_i+0xf6>
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	1d18      	adds	r0, r3, #4
 8003ba0:	6961      	ldr	r1, [r4, #20]
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	0628      	lsls	r0, r5, #24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0x196>
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0x19c>
 8003bae:	066a      	lsls	r2, r5, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0x192>
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4665      	mov	r5, ip
 8003bb8:	6123      	str	r3, [r4, #16]
 8003bba:	e7b9      	b.n	8003b30 <_printf_i+0x118>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	681d      	ldr	r5, [r3, #0]
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f837 	bl	8003c3c <memchr>
 8003bce:	b108      	cbz	r0, 8003bd4 <_printf_i+0x1bc>
 8003bd0:	1b40      	subs	r0, r0, r5
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bde:	e7a7      	b.n	8003b30 <_printf_i+0x118>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	462a      	mov	r2, r5
 8003be4:	4639      	mov	r1, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0aa      	beq.n	8003b44 <_printf_i+0x12c>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d413      	bmi.n	8003c1c <_printf_i+0x204>
 8003bf4:	68e0      	ldr	r0, [r4, #12]
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	bfb8      	it	lt
 8003bfc:	4618      	movlt	r0, r3
 8003bfe:	e7a3      	b.n	8003b48 <_printf_i+0x130>
 8003c00:	2301      	movs	r3, #1
 8003c02:	464a      	mov	r2, r9
 8003c04:	4639      	mov	r1, r7
 8003c06:	4630      	mov	r0, r6
 8003c08:	47c0      	blx	r8
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d09a      	beq.n	8003b44 <_printf_i+0x12c>
 8003c0e:	3501      	adds	r5, #1
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9a03      	ldr	r2, [sp, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	dcf2      	bgt.n	8003c00 <_printf_i+0x1e8>
 8003c1a:	e7eb      	b.n	8003bf4 <_printf_i+0x1dc>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	f104 0919 	add.w	r9, r4, #25
 8003c22:	e7f5      	b.n	8003c10 <_printf_i+0x1f8>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ac      	bne.n	8003b82 <_printf_i+0x16a>
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c32:	e76c      	b.n	8003b0e <_printf_i+0xf6>
 8003c34:	08005e77 	.word	0x08005e77
 8003c38:	08005e88 	.word	0x08005e88

08003c3c <memchr>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	b2c9      	uxtb	r1, r1
 8003c40:	4402      	add	r2, r0
 8003c42:	4290      	cmp	r0, r2
 8003c44:	4603      	mov	r3, r0
 8003c46:	d101      	bne.n	8003c4c <memchr+0x10>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e003      	b.n	8003c54 <memchr+0x18>
 8003c4c:	781c      	ldrb	r4, [r3, #0]
 8003c4e:	3001      	adds	r0, #1
 8003c50:	428c      	cmp	r4, r1
 8003c52:	d1f6      	bne.n	8003c42 <memchr+0x6>
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <memcpy>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	1e43      	subs	r3, r0, #1
 8003c5c:	440a      	add	r2, r1
 8003c5e:	4291      	cmp	r1, r2
 8003c60:	d100      	bne.n	8003c64 <memcpy+0xc>
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6c:	e7f7      	b.n	8003c5e <memcpy+0x6>

08003c6e <memmove>:
 8003c6e:	4288      	cmp	r0, r1
 8003c70:	b510      	push	{r4, lr}
 8003c72:	eb01 0302 	add.w	r3, r1, r2
 8003c76:	d807      	bhi.n	8003c88 <memmove+0x1a>
 8003c78:	1e42      	subs	r2, r0, #1
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	d00a      	beq.n	8003c94 <memmove+0x26>
 8003c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c86:	e7f8      	b.n	8003c7a <memmove+0xc>
 8003c88:	4283      	cmp	r3, r0
 8003c8a:	d9f5      	bls.n	8003c78 <memmove+0xa>
 8003c8c:	1881      	adds	r1, r0, r2
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	42d3      	cmn	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memmove+0x28>
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c9e:	e7f7      	b.n	8003c90 <memmove+0x22>

08003ca0 <_free_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d043      	beq.n	8003d30 <_free_r+0x90>
 8003ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cac:	1f0c      	subs	r4, r1, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfb8      	it	lt
 8003cb2:	18e4      	addlt	r4, r4, r3
 8003cb4:	f000 f8d0 	bl	8003e58 <__malloc_lock>
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <_free_r+0x94>)
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	b933      	cbnz	r3, 8003cce <_free_r+0x2e>
 8003cc0:	6063      	str	r3, [r4, #4]
 8003cc2:	6014      	str	r4, [r2, #0]
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cca:	f000 b8c6 	b.w	8003e5a <__malloc_unlock>
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	d90b      	bls.n	8003cea <_free_r+0x4a>
 8003cd2:	6821      	ldr	r1, [r4, #0]
 8003cd4:	1862      	adds	r2, r4, r1
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bf01      	itttt	eq
 8003cda:	681a      	ldreq	r2, [r3, #0]
 8003cdc:	685b      	ldreq	r3, [r3, #4]
 8003cde:	1852      	addeq	r2, r2, r1
 8003ce0:	6022      	streq	r2, [r4, #0]
 8003ce2:	6063      	str	r3, [r4, #4]
 8003ce4:	6004      	str	r4, [r0, #0]
 8003ce6:	e7ed      	b.n	8003cc4 <_free_r+0x24>
 8003ce8:	4613      	mov	r3, r2
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	b10a      	cbz	r2, 8003cf2 <_free_r+0x52>
 8003cee:	42a2      	cmp	r2, r4
 8003cf0:	d9fa      	bls.n	8003ce8 <_free_r+0x48>
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	1858      	adds	r0, r3, r1
 8003cf6:	42a0      	cmp	r0, r4
 8003cf8:	d10b      	bne.n	8003d12 <_free_r+0x72>
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	4401      	add	r1, r0
 8003cfe:	1858      	adds	r0, r3, r1
 8003d00:	4282      	cmp	r2, r0
 8003d02:	6019      	str	r1, [r3, #0]
 8003d04:	d1de      	bne.n	8003cc4 <_free_r+0x24>
 8003d06:	6810      	ldr	r0, [r2, #0]
 8003d08:	6852      	ldr	r2, [r2, #4]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	e7d8      	b.n	8003cc4 <_free_r+0x24>
 8003d12:	d902      	bls.n	8003d1a <_free_r+0x7a>
 8003d14:	230c      	movs	r3, #12
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	e7d4      	b.n	8003cc4 <_free_r+0x24>
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	1821      	adds	r1, r4, r0
 8003d1e:	428a      	cmp	r2, r1
 8003d20:	bf01      	itttt	eq
 8003d22:	6811      	ldreq	r1, [r2, #0]
 8003d24:	6852      	ldreq	r2, [r2, #4]
 8003d26:	1809      	addeq	r1, r1, r0
 8003d28:	6021      	streq	r1, [r4, #0]
 8003d2a:	6062      	str	r2, [r4, #4]
 8003d2c:	605c      	str	r4, [r3, #4]
 8003d2e:	e7c9      	b.n	8003cc4 <_free_r+0x24>
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	200004a4 	.word	0x200004a4

08003d38 <_malloc_r>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	1ccd      	adds	r5, r1, #3
 8003d3c:	f025 0503 	bic.w	r5, r5, #3
 8003d40:	3508      	adds	r5, #8
 8003d42:	2d0c      	cmp	r5, #12
 8003d44:	bf38      	it	cc
 8003d46:	250c      	movcc	r5, #12
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	db01      	blt.n	8003d52 <_malloc_r+0x1a>
 8003d4e:	42a9      	cmp	r1, r5
 8003d50:	d903      	bls.n	8003d5a <_malloc_r+0x22>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	2000      	movs	r0, #0
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	f000 f87d 	bl	8003e58 <__malloc_lock>
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <_malloc_r+0xac>)
 8003d60:	6814      	ldr	r4, [r2, #0]
 8003d62:	4621      	mov	r1, r4
 8003d64:	b991      	cbnz	r1, 8003d8c <_malloc_r+0x54>
 8003d66:	4c20      	ldr	r4, [pc, #128]	; (8003de8 <_malloc_r+0xb0>)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	b91b      	cbnz	r3, 8003d74 <_malloc_r+0x3c>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 f863 	bl	8003e38 <_sbrk_r>
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	4629      	mov	r1, r5
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f85e 	bl	8003e38 <_sbrk_r>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d124      	bne.n	8003dca <_malloc_r+0x92>
 8003d80:	230c      	movs	r3, #12
 8003d82:	4630      	mov	r0, r6
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	f000 f868 	bl	8003e5a <__malloc_unlock>
 8003d8a:	e7e4      	b.n	8003d56 <_malloc_r+0x1e>
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	1b5b      	subs	r3, r3, r5
 8003d90:	d418      	bmi.n	8003dc4 <_malloc_r+0x8c>
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d90f      	bls.n	8003db6 <_malloc_r+0x7e>
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	18cc      	adds	r4, r1, r3
 8003d9a:	50cd      	str	r5, [r1, r3]
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f85c 	bl	8003e5a <__malloc_unlock>
 8003da2:	f104 000b 	add.w	r0, r4, #11
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	f020 0007 	bic.w	r0, r0, #7
 8003dac:	1ac3      	subs	r3, r0, r3
 8003dae:	d0d3      	beq.n	8003d58 <_malloc_r+0x20>
 8003db0:	425a      	negs	r2, r3
 8003db2:	50e2      	str	r2, [r4, r3]
 8003db4:	e7d0      	b.n	8003d58 <_malloc_r+0x20>
 8003db6:	684b      	ldr	r3, [r1, #4]
 8003db8:	428c      	cmp	r4, r1
 8003dba:	bf16      	itet	ne
 8003dbc:	6063      	strne	r3, [r4, #4]
 8003dbe:	6013      	streq	r3, [r2, #0]
 8003dc0:	460c      	movne	r4, r1
 8003dc2:	e7eb      	b.n	8003d9c <_malloc_r+0x64>
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	6849      	ldr	r1, [r1, #4]
 8003dc8:	e7cc      	b.n	8003d64 <_malloc_r+0x2c>
 8003dca:	1cc4      	adds	r4, r0, #3
 8003dcc:	f024 0403 	bic.w	r4, r4, #3
 8003dd0:	42a0      	cmp	r0, r4
 8003dd2:	d005      	beq.n	8003de0 <_malloc_r+0xa8>
 8003dd4:	1a21      	subs	r1, r4, r0
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 f82e 	bl	8003e38 <_sbrk_r>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0cf      	beq.n	8003d80 <_malloc_r+0x48>
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	e7db      	b.n	8003d9c <_malloc_r+0x64>
 8003de4:	200004a4 	.word	0x200004a4
 8003de8:	200004a8 	.word	0x200004a8

08003dec <_realloc_r>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	4607      	mov	r7, r0
 8003df0:	4614      	mov	r4, r2
 8003df2:	460e      	mov	r6, r1
 8003df4:	b921      	cbnz	r1, 8003e00 <_realloc_r+0x14>
 8003df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	f7ff bf9c 	b.w	8003d38 <_malloc_r>
 8003e00:	b922      	cbnz	r2, 8003e0c <_realloc_r+0x20>
 8003e02:	f7ff ff4d 	bl	8003ca0 <_free_r>
 8003e06:	4625      	mov	r5, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0c:	f000 f826 	bl	8003e5c <_malloc_usable_size_r>
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d20f      	bcs.n	8003e34 <_realloc_r+0x48>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4638      	mov	r0, r7
 8003e18:	f7ff ff8e 	bl	8003d38 <_malloc_r>
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d0f2      	beq.n	8003e08 <_realloc_r+0x1c>
 8003e22:	4631      	mov	r1, r6
 8003e24:	4622      	mov	r2, r4
 8003e26:	f7ff ff17 	bl	8003c58 <memcpy>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f7ff ff37 	bl	8003ca0 <_free_r>
 8003e32:	e7e9      	b.n	8003e08 <_realloc_r+0x1c>
 8003e34:	4635      	mov	r5, r6
 8003e36:	e7e7      	b.n	8003e08 <_realloc_r+0x1c>

08003e38 <_sbrk_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	4c05      	ldr	r4, [pc, #20]	; (8003e54 <_sbrk_r+0x1c>)
 8003e3e:	4605      	mov	r5, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	f7fd f828 	bl	8000e98 <_sbrk>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_sbrk_r+0x1a>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_sbrk_r+0x1a>
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	200005a4 	.word	0x200005a4

08003e58 <__malloc_lock>:
 8003e58:	4770      	bx	lr

08003e5a <__malloc_unlock>:
 8003e5a:	4770      	bx	lr

08003e5c <_malloc_usable_size_r>:
 8003e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e60:	1f18      	subs	r0, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfbc      	itt	lt
 8003e66:	580b      	ldrlt	r3, [r1, r0]
 8003e68:	18c0      	addlt	r0, r0, r3
 8003e6a:	4770      	bx	lr

08003e6c <_init>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

08003e78 <_fini>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr
