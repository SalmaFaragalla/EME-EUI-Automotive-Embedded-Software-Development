
firmware_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004c00  08004c00  00004c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e64  08004d0c  08004d0c  00004d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08008b70  08008b70  00008b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  00010014  2**0
                  CONTENTS
  4 .ARM          00000000  08009470  08009470  00010014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009470  08009470  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009470  08009470  00009470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009474  08009474  00009474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009478  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020b0  20000018  0800948c  00010018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020c8  0800948c  000120c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc87  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020aa  00000000  00000000  0001ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0001ed70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0001f828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017da6  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009600  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086845  00000000  00000000  000415a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7deb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b74  00000000  00000000  000c7e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08004d0c <__do_global_dtors_aux>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4c05      	ldr	r4, [pc, #20]	; (8004d24 <__do_global_dtors_aux+0x18>)
 8004d10:	7823      	ldrb	r3, [r4, #0]
 8004d12:	b933      	cbnz	r3, 8004d22 <__do_global_dtors_aux+0x16>
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__do_global_dtors_aux+0x1c>)
 8004d16:	b113      	cbz	r3, 8004d1e <__do_global_dtors_aux+0x12>
 8004d18:	4804      	ldr	r0, [pc, #16]	; (8004d2c <__do_global_dtors_aux+0x20>)
 8004d1a:	f3af 8000 	nop.w
 8004d1e:	2301      	movs	r3, #1
 8004d20:	7023      	strb	r3, [r4, #0]
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	20000018 	.word	0x20000018
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08008b58 	.word	0x08008b58

08004d30 <frame_dummy>:
 8004d30:	b508      	push	{r3, lr}
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <frame_dummy+0x10>)
 8004d34:	b11b      	cbz	r3, 8004d3e <frame_dummy+0xe>
 8004d36:	4903      	ldr	r1, [pc, #12]	; (8004d44 <frame_dummy+0x14>)
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <frame_dummy+0x18>)
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	00000000 	.word	0x00000000
 8004d44:	2000001c 	.word	0x2000001c
 8004d48:	08008b58 	.word	0x08008b58

08004d4c <strcmp>:
 8004d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d54:	2a01      	cmp	r2, #1
 8004d56:	bf28      	it	cs
 8004d58:	429a      	cmpcs	r2, r3
 8004d5a:	d0f7      	beq.n	8004d4c <strcmp>
 8004d5c:	1ad0      	subs	r0, r2, r3
 8004d5e:	4770      	bx	lr

08004d60 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e016      	b.n	8004d9c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d74:	3301      	adds	r3, #1
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20b      	bcs.n	8004d96 <GetPage+0x36>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d304      	bcc.n	8004d96 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	e006      	b.n	8004da4 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004da0:	dde5      	ble.n	8004d6e <GetPage+0xe>
	  }
  }

  return 0;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b08b      	sub	sp, #44	; 0x2c
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8004dc2:	f002 f9a9 	bl	8007118 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff ffca 	bl	8004d60 <GetPage>
 8004dcc:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8004dda:	69f8      	ldr	r0, [r7, #28]
 8004ddc:	f7ff ffc0 	bl	8004d60 <GetPage>
 8004de0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	0a9b      	lsrs	r3, r3, #10
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004dfa:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	4818      	ldr	r0, [pc, #96]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004e04:	f002 fa7a 	bl	80072fc <HAL_FLASHEx_Erase>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01e      	beq.n	8004e4c <Flash_Write_Data+0x9c>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8004e0e:	f002 f9b9 	bl	8007184 <HAL_FLASH_GetError>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e021      	b.n	8004e5a <Flash_Write_Data+0xaa>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	461a      	mov	r2, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	2002      	movs	r0, #2
 8004e2c:	f002 f904 	bl	8007038 <HAL_FLASH_Program>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <Flash_Write_Data+0x94>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
 8004e42:	e003      	b.n	8004e4c <Flash_Write_Data+0x9c>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8004e44:	f002 f99e 	bl	8007184 <HAL_FLASH_GetError>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	e006      	b.n	8004e5a <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	429a      	cmp	r2, r3
 8004e52:	dbe0      	blt.n	8004e16 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8004e54:	f002 f986 	bl	8007164 <HAL_FLASH_Lock>

	   return 0;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	372c      	adds	r7, #44	; 0x2c
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000034 	.word	0x20000034

08004e68 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3304      	adds	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3304      	adds	r3, #4
 8004e88:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	1e5a      	subs	r2, r3, #1
 8004e8e:	80fa      	strh	r2, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d000      	beq.n	8004e96 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004e94:	e7ef      	b.n	8004e76 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8004e96:	bf00      	nop
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
	...

08004ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	6039      	str	r1, [r7, #0]
 8004eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	db0a      	blt.n	8004ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	490c      	ldr	r1, [pc, #48]	; (8004ef0 <__NVIC_SetPriority+0x4c>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	0112      	lsls	r2, r2, #4
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ecc:	e00a      	b.n	8004ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4908      	ldr	r1, [pc, #32]	; (8004ef4 <__NVIC_SetPriority+0x50>)
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	3b04      	subs	r3, #4
 8004edc:	0112      	lsls	r2, r2, #4
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	761a      	strb	r2, [r3, #24]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004efc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <__NVIC_SystemReset+0x20>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <__NVIC_SystemReset+0x20>)
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <__NVIC_SystemReset+0x24>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
 8004f10:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <__NVIC_SystemReset+0x1c>
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	05fa0004 	.word	0x05fa0004

08004f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f30:	d301      	bcc.n	8004f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00f      	b.n	8004f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <SysTick_Config+0x40>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3e:	210f      	movs	r1, #15
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f44:	f7ff ffae 	bl	8004ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SysTick_Config+0x40>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SysTick_Config+0x40>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	/* loop counter for received update data */
	int i = ZERO;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

	/* Read Message into local buffer [RxData] */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, un_gs_RxConv.RxData);
 8004f70:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004f72:	4a43      	ldr	r2, [pc, #268]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fbed 	bl	8006756 <HAL_CAN_GetRxMessage>

	// Toggle Receive LED indicator
	HAL_GPIO_TogglePin(APP_LED_RX_CAN_ARGS);
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	4841      	ldr	r0, [pc, #260]	; (8005084 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8004f80:	f002 fbed 	bl	800775e <HAL_GPIO_TogglePin>


	/* Switch over APP states to take appropriate actions */
	switch(en_gs_app_state)
 8004f84:	4b40      	ldr	r3, [pc, #256]	; (8005088 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b0a      	cmp	r3, #10
 8004f8a:	d86d      	bhi.n	8005068 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08005069 	.word	0x08005069
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08005069 	.word	0x08005069
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08005069 	.word	0x08005069
 8004fac:	08005069 	.word	0x08005069
 8004fb0:	08005025 	.word	0x08005025
 8004fb4:	08005069 	.word	0x08005069
 8004fb8:	08005069 	.word	0x08005069
 8004fbc:	08005069 	.word	0x08005069
		 break;
		}
		case APP_STATE_CHECK_FOR_UPDATES:
		{
			/* Check for response */
			if(ZERO == strcmp((char *)un_gs_RxConv.RxData, (char *)APP_CAN_RESP_OK_UPDATE))
 8004fc0:	4932      	ldr	r1, [pc, #200]	; (800508c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8004fc2:	482e      	ldr	r0, [pc, #184]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004fc4:	f7ff fec2 	bl	8004d4c <strcmp>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
			{
				/* Update Available - Request update size */
                app_switch_state(APP_STATE_GET_UPDATE_SIZE);
 8004fce:	2003      	movs	r0, #3
 8004fd0:	f000 fa90 	bl	80054f4 <app_switch_state>
            }
			else
			{
				/* Drop */
			}
			break;
 8004fd4:	e04a      	b.n	800506c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
			else if(ZERO == strcmp((char *)un_gs_RxConv.RxData, (char *)APP_CAN_RESP_NO_UPDATE))
 8004fd6:	492e      	ldr	r1, [pc, #184]	; (8005090 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8004fd8:	4828      	ldr	r0, [pc, #160]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004fda:	f7ff feb7 	bl	8004d4c <strcmp>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d143      	bne.n	800506c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
                app_switch_state(APP_STATE_NO_UPDATE_AV);
 8004fe4:	2002      	movs	r0, #2
 8004fe6:	f000 fa85 	bl	80054f4 <app_switch_state>
			break;
 8004fea:	e03f      	b.n	800506c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
		}
		case APP_STATE_GET_UPDATE_SIZE:
		{
			/* Store size */
			u32_gs_update_size = un_gs_RxConv.u32_Rx_Number;
 8004fec:	4b23      	ldr	r3, [pc, #140]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8004ff2:	6013      	str	r3, [r2, #0]

			/* Fetch again */
            app_switch_state(APP_STATE_GET_UPDATE_SIZE_AGAIN);
 8004ff4:	2004      	movs	r0, #4
 8004ff6:	f000 fa7d 	bl	80054f4 <app_switch_state>
			break;
 8004ffa:	e03a      	b.n	8005072 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		}
		case APP_STATE_GET_UPDATE_SIZE_AGAIN:
		{
			/* Verify size */
			if(
					(u32_gs_update_size == un_gs_RxConv.u32_Rx_Number) &&
 8004ffc:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8005002:	681b      	ldr	r3, [r3, #0]
			if(
 8005004:	429a      	cmp	r2, r3
 8005006:	d109      	bne.n	800501c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
					(u32_gs_update_size < APP_UPDATE_MAX_SIZE_BYTES)
 8005008:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800500a:	681b      	ldr	r3, [r3, #0]
					(u32_gs_update_size == un_gs_RxConv.u32_Rx_Number) &&
 800500c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8005010:	4293      	cmp	r3, r2
 8005012:	d803      	bhi.n	800501c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
			)
			{
				/* Sizes Matches and Valid - Proceed with update */
                app_switch_state(APP_STATE_START_UPDATE);
 8005014:	2006      	movs	r0, #6
 8005016:	f000 fa6d 	bl	80054f4 <app_switch_state>
			{
				/* Fail */
                app_switch_state(APP_STATE_INVALID_UPDATE_SIZE);
			}

			break;
 800501a:	e02a      	b.n	8005072 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
                app_switch_state(APP_STATE_INVALID_UPDATE_SIZE);
 800501c:	2005      	movs	r0, #5
 800501e:	f000 fa69 	bl	80054f4 <app_switch_state>
			break;
 8005022:	e026      	b.n	8005072 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		}
		case APP_STATE_RECEIVING_UPDATE:
		{
			/* Parse and Store Update Bytes */

			  for(i = 0; i < APP_RX_DATA_LENGTH; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e00c      	b.n	8005044 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			  {
				  update_data_arr[i + u32_gs_rec_count] = un_gs_RxConv.RxData[i];
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4413      	add	r3, r2
 8005032:	4912      	ldr	r1, [pc, #72]	; (800507c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	440a      	add	r2, r1
 8005038:	7811      	ldrb	r1, [r2, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800503c:	54d1      	strb	r1, [r2, r3]
			  for(i = 0; i < APP_RX_DATA_LENGTH; i++)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b07      	cmp	r3, #7
 8005048:	ddef      	ble.n	800502a <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
			  }

			  u32_gs_rec_count += APP_RX_DATA_LENGTH;
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	4a11      	ldr	r2, [pc, #68]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8005052:	6013      	str	r3, [r2, #0]


			  // Check if total received count is correct
			  if(u32_gs_rec_count >= u32_gs_update_size)
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d307      	bcc.n	8005070 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			  {
				  /* Update APP state */
                  app_switch_state(APP_STATE_UPDATE_RECEIVED);
 8005060:	2008      	movs	r0, #8
 8005062:	f000 fa47 	bl	80054f4 <app_switch_state>
			  else
			  {
				  /* Do Nothing */
			  }

		  break;
 8005066:	e003      	b.n	8005070 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
            break;
        }
        default:
		{
		  /* Do Nothing */
		  break;
 8005068:	bf00      	nop
 800506a:	e002      	b.n	8005072 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
			break;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		  break;
 8005070:	bf00      	nop
		}

    }
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20001fb0 	.word	0x20001fb0
 8005080:	20002084 	.word	0x20002084
 8005084:	40010800 	.word	0x40010800
 8005088:	20000045 	.word	0x20000045
 800508c:	08008b70 	.word	0x08008b70
 8005090:	08008b7c 	.word	0x08008b7c
 8005094:	20001ba4 	.word	0x20001ba4
 8005098:	20001ba0 	.word	0x20001ba0
 800509c:	20000048 	.word	0x20000048

080050a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050a6:	f000 ffc7 	bl	8006038 <HAL_Init>

  /* USER CODE BEGIN Init */
	GPIO_Loc_UpdateBtnState = GPIO_PIN_SET;
 80050aa:	2301      	movs	r3, #1
 80050ac:	70fb      	strb	r3, [r7, #3]
	GPIO_Loc_ResetBtnState = GPIO_PIN_SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	70bb      	strb	r3, [r7, #2]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050b2:	f000 f907 	bl	80052c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050b6:	f000 f9a3 	bl	8005400 <MX_GPIO_Init>
  MX_CAN_Init();
 80050ba:	f000 f93d 	bl	8005338 <MX_CAN_Init>
  MX_I2C1_Init();
 80050be:	f000 f971 	bl	80053a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init (); // initialize the display
 80050c2:	f000 fb7d 	bl	80057c0 <SSD1306_Init>

  SSD1306_Clear();
 80050c6:	f000 fd9e 	bl	8005c06 <SSD1306_Clear>

  /* Systick Config */
  /* Update SystemCoreClock variable according to Clock Register Values */
	SystemCoreClockUpdate();
 80050ca:	f000 ff23 	bl	8005f14 <SystemCoreClockUpdate>

	/* Generates interrupt every 2 seconds
	 * Handler inside stm32f1xx_it.c -> SysTick_Handler
	 * */
	SysTick_Config(SystemCoreClock*2);
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <main+0x1e4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff23 	bl	8004f20 <SysTick_Config>

	SysTick->CTRL = 0;
 80050da:	4b6b      	ldr	r3, [pc, #428]	; (8005288 <main+0x1e8>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 80050e0:	4b69      	ldr	r3, [pc, #420]	; (8005288 <main+0x1e8>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL =
 80050e6:	4b68      	ldr	r3, [pc, #416]	; (8005288 <main+0x1e8>)
 80050e8:	2207      	movs	r2, #7
 80050ea:	601a      	str	r2, [r3, #0]
	  | SysTick_CTRL_ENABLE_Msk
	  | SysTick_CTRL_CLKSOURCE_Msk);


	/* Init CAN Tx Variables */
	TxData[0] = 0x00;
 80050ec:	4b67      	ldr	r3, [pc, #412]	; (800528c <main+0x1ec>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]

	TxHeader.DLC=1; //give message size of 1 byte
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <main+0x1f0>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	611a      	str	r2, [r3, #16]
	TxHeader.IDE=CAN_ID_STD; //set identifier to standard
 80050f8:	4b65      	ldr	r3, [pc, #404]	; (8005290 <main+0x1f0>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
	TxHeader.RTR=CAN_RTR_DATA; //RTR bit is set to data
 80050fe:	4b64      	ldr	r3, [pc, #400]	; (8005290 <main+0x1f0>)
 8005100:	2200      	movs	r2, #0
 8005102:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8005104:	4b62      	ldr	r3, [pc, #392]	; (8005290 <main+0x1f0>)
 8005106:	2200      	movs	r2, #0
 8005108:	751a      	strb	r2, [r3, #20]

   /* Configure CAN Receiving Filter */
   /* set FIFO assignment */
   FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800510a:	4b62      	ldr	r3, [pc, #392]	; (8005294 <main+0x1f4>)
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
   /* 0x245<<5; the ID that the filter looks for: Zero to pass all IDs */
   FilterConfig.FilterIdHigh = 0;
 8005110:	4b60      	ldr	r3, [pc, #384]	; (8005294 <main+0x1f4>)
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
   FilterConfig.FilterIdLow = 0;
 8005116:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <main+0x1f4>)
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
   FilterConfig.FilterMaskIdHigh = 0;
 800511c:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <main+0x1f4>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
   FilterConfig.FilterMaskIdLow = 0;
 8005122:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <main+0x1f4>)
 8005124:	2200      	movs	r2, #0
 8005126:	60da      	str	r2, [r3, #12]

   /* Set Filter Scale */
   FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 8005128:	4b5a      	ldr	r3, [pc, #360]	; (8005294 <main+0x1f4>)
 800512a:	2201      	movs	r2, #1
 800512c:	61da      	str	r2, [r3, #28]

   /* Enable Filter */
   FilterConfig.FilterActivation = ENABLE;
 800512e:	4b59      	ldr	r3, [pc, #356]	; (8005294 <main+0x1f4>)
 8005130:	2201      	movs	r2, #1
 8005132:	621a      	str	r2, [r3, #32]

   /* Configure CAN Filter */
   HAL_CAN_ConfigFilter(&hcan, &FilterConfig); //configure CAN filter
 8005134:	4957      	ldr	r1, [pc, #348]	; (8005294 <main+0x1f4>)
 8005136:	4858      	ldr	r0, [pc, #352]	; (8005298 <main+0x1f8>)
 8005138:	f001 f8fd 	bl	8006336 <HAL_CAN_ConfigFilter>

   /* Start CAN */
   HAL_CAN_Start(&hcan);
 800513c:	4856      	ldr	r0, [pc, #344]	; (8005298 <main+0x1f8>)
 800513e:	f001 f9c3 	bl	80064c8 <HAL_CAN_Start>

   /* Enable Rx FIFO0 Interrupt */
   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005142:	2102      	movs	r1, #2
 8005144:	4854      	ldr	r0, [pc, #336]	; (8005298 <main+0x1f8>)
 8005146:	f001 fc27 	bl	8006998 <HAL_CAN_ActivateNotification>

    /* Switch app state to normal */
    app_switch_state(APP_STATE_NORMAL);
 800514a:	2000      	movs	r0, #0
 800514c:	f000 f9d2 	bl	80054f4 <app_switch_state>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* switch on current app state */
	  switch(en_gs_app_state)
 8005150:	4b52      	ldr	r3, [pc, #328]	; (800529c <main+0x1fc>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b0a      	cmp	r3, #10
 8005156:	f200 8091 	bhi.w	800527c <main+0x1dc>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <main+0xc0>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	0800518d 	.word	0x0800518d
 8005164:	0800527d 	.word	0x0800527d
 8005168:	080051db 	.word	0x080051db
 800516c:	0800527d 	.word	0x0800527d
 8005170:	0800527d 	.word	0x0800527d
 8005174:	080051c1 	.word	0x080051c1
 8005178:	0800527d 	.word	0x0800527d
 800517c:	0800527d 	.word	0x0800527d
 8005180:	080051f5 	.word	0x080051f5
 8005184:	08005245 	.word	0x08005245
 8005188:	0800527d 	.word	0x0800527d
	  {
		  case APP_STATE_NORMAL:
		  {

			  /* Check if update button is pressed */
			  GPIO_Loc_UpdateBtnState = HAL_GPIO_ReadPin(APP_UPDATE_BTN_ARGS);
 800518c:	2101      	movs	r1, #1
 800518e:	4844      	ldr	r0, [pc, #272]	; (80052a0 <main+0x200>)
 8005190:	f002 fab6 	bl	8007700 <HAL_GPIO_ReadPin>
 8005194:	4603      	mov	r3, r0
 8005196:	70fb      	strb	r3, [r7, #3]
			  GPIO_Loc_ResetBtnState = HAL_GPIO_ReadPin(APP_RESET_BTN_ARGS);
 8005198:	2102      	movs	r1, #2
 800519a:	4841      	ldr	r0, [pc, #260]	; (80052a0 <main+0x200>)
 800519c:	f002 fab0 	bl	8007700 <HAL_GPIO_ReadPin>
 80051a0:	4603      	mov	r3, r0
 80051a2:	70bb      	strb	r3, [r7, #2]

			  if(GPIO_PIN_RESET == GPIO_Loc_ResetBtnState)
 80051a4:	78bb      	ldrb	r3, [r7, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <main+0x112>
			  {
				  /* Clear Screen */
                  SSD1306_Clear();
 80051aa:	f000 fd2c 	bl	8005c06 <SSD1306_Clear>

                  /* Reset system - bootloader will handle the switching */
                  NVIC_SystemReset();
 80051ae:	f7ff fea3 	bl	8004ef8 <__NVIC_SystemReset>
			  }
			  else if(GPIO_PIN_RESET == GPIO_Loc_UpdateBtnState)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d163      	bne.n	8005280 <main+0x1e0>
			  {
				  /* Btn is pressed
				   * Check for updates */
                  app_switch_state(APP_STATE_CHECK_FOR_UPDATES);
 80051b8:	2001      	movs	r0, #1
 80051ba:	f000 f99b 	bl	80054f4 <app_switch_state>
			  {
				  /* Do Nothing */
			  }


			  break;
 80051be:	e05f      	b.n	8005280 <main+0x1e0>
			  /* IDLE - Receiving Data */
			  break;
		  }
		  case APP_STATE_INVALID_UPDATE_SIZE:
		  {
              APP_OLED_CLEAR_WRITE(APP_OLED_INVALID_UPDATE_SIZE, 0, 0);
 80051c0:	2301      	movs	r3, #1
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	4837      	ldr	r0, [pc, #220]	; (80052a4 <main+0x204>)
 80051c8:	f000 fa68 	bl	800569c <app_write_on_screen>
              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 80051cc:	2001      	movs	r0, #1
 80051ce:	f000 ff95 	bl	80060fc <HAL_Delay>
              /* Reset state back to normal */
              app_switch_state(APP_STATE_NORMAL);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f000 f98e 	bl	80054f4 <app_switch_state>
              break;
 80051d8:	e053      	b.n	8005282 <main+0x1e2>
		  }

		  case APP_STATE_NO_UPDATE_AV:
		  {
              APP_OLED_CLEAR_WRITE(APP_OLED_NO_UPDATES, 0, 0);
 80051da:	2301      	movs	r3, #1
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	4831      	ldr	r0, [pc, #196]	; (80052a8 <main+0x208>)
 80051e2:	f000 fa5b 	bl	800569c <app_write_on_screen>
              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 80051e6:	2001      	movs	r0, #1
 80051e8:	f000 ff88 	bl	80060fc <HAL_Delay>
              /* Reset state back to normal */
              app_switch_state(APP_STATE_NORMAL);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f000 f981 	bl	80054f4 <app_switch_state>
              break;
 80051f2:	e046      	b.n	8005282 <main+0x1e2>
		  }
		  case APP_STATE_UPDATE_RECEIVED:
		  {

			  /* Add Padding If needed */
			  uint8_t mod_result = MOD(u32_gs_update_size, APP_TX_DATA_LENGTH);
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <main+0x20c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	707b      	strb	r3, [r7, #1]

			  if(ZERO == mod_result)
 8005200:	787b      	ldrb	r3, [r7, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <main+0x19c>
				  /* No Padding Needed */
			  }
			  else
			  {
				  /* Add Padding */
				  uint8_t padding_count = APP_TX_DATA_LENGTH - mod_result;
 8005206:	787b      	ldrb	r3, [r7, #1]
 8005208:	f1c3 0308 	rsb	r3, r3, #8
 800520c:	703b      	strb	r3, [r7, #0]

				  /* Add 0xFF padding */
				  for (int var = 0; var < padding_count; ++var)
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e009      	b.n	8005228 <main+0x188>
				  {
					  update_data_arr[u32_gs_rec_count + var] = BYTE_MAX_VAL;
 8005214:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <main+0x210>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4413      	add	r3, r2
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <main+0x214>)
 800521e:	21ff      	movs	r1, #255	; 0xff
 8005220:	54d1      	strb	r1, [r2, r3]
				  for (int var = 0; var < padding_count; ++var)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3301      	adds	r3, #1
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	783b      	ldrb	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	dbf1      	blt.n	8005214 <main+0x174>
				  }

				  /* Update size to be flashed */
				  u32_gs_update_size += padding_count;
 8005230:	783a      	ldrb	r2, [r7, #0]
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <main+0x20c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4413      	add	r3, r2
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <main+0x20c>)
 800523a:	6013      	str	r3, [r2, #0]
			  }

              app_switch_state(APP_STATE_FLASHING);
 800523c:	2009      	movs	r0, #9
 800523e:	f000 f959 	bl	80054f4 <app_switch_state>
			  break;
 8005242:	e01e      	b.n	8005282 <main+0x1e2>
          {
              /* Flash Update
               * Division by two because we flash 16 bits (2-bytes) per write
               *  */
              Flash_Write_Data(APP_UPDATE_START_ADDRESS,
                               ((uint32_t *)update_data_arr), u32_gs_update_size / 2);
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <main+0x20c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	085b      	lsrs	r3, r3, #1
              Flash_Write_Data(APP_UPDATE_START_ADDRESS,
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	4919      	ldr	r1, [pc, #100]	; (80052b4 <main+0x214>)
 8005250:	4819      	ldr	r0, [pc, #100]	; (80052b8 <main+0x218>)
 8005252:	f7ff fdad 	bl	8004db0 <Flash_Write_Data>

              /* Turn on status LED indicator to indicate flash is done */
              APP_UPDATE_STATUS_LED(GPIO_PIN_SET);
 8005256:	2201      	movs	r2, #1
 8005258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800525c:	4817      	ldr	r0, [pc, #92]	; (80052bc <main+0x21c>)
 800525e:	f002 fa66 	bl	800772e <HAL_GPIO_WritePin>

              APP_OLED_WRITE(APP_OLED_UPDATED_INSTALLED, 0, 4);
 8005262:	2300      	movs	r3, #0
 8005264:	2204      	movs	r2, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4815      	ldr	r0, [pc, #84]	; (80052c0 <main+0x220>)
 800526a:	f000 fa17 	bl	800569c <app_write_on_screen>

              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 800526e:	2001      	movs	r0, #1
 8005270:	f000 ff44 	bl	80060fc <HAL_Delay>

              app_switch_state(APP_STATE_NORMAL);
 8005274:	2000      	movs	r0, #0
 8005276:	f000 f93d 	bl	80054f4 <app_switch_state>
              break;
 800527a:	e002      	b.n	8005282 <main+0x1e2>
              break;
          }
		  default:
		  {
			  /* Do Nothing */
			  break;
 800527c:	bf00      	nop
 800527e:	e767      	b.n	8005150 <main+0xb0>
			  break;
 8005280:	bf00      	nop
	  switch(en_gs_app_state)
 8005282:	e765      	b.n	8005150 <main+0xb0>
 8005284:	20000008 	.word	0x20000008
 8005288:	e000e010 	.word	0xe000e010
 800528c:	2000205c 	.word	0x2000205c
 8005290:	2000206c 	.word	0x2000206c
 8005294:	20002034 	.word	0x20002034
 8005298:	2000200c 	.word	0x2000200c
 800529c:	20000045 	.word	0x20000045
 80052a0:	40010c00 	.word	0x40010c00
 80052a4:	08008b88 	.word	0x08008b88
 80052a8:	08008b9c 	.word	0x08008b9c
 80052ac:	20001ba4 	.word	0x20001ba4
 80052b0:	20001ba0 	.word	0x20001ba0
 80052b4:	20000048 	.word	0x20000048
 80052b8:	08001c00 	.word	0x08001c00
 80052bc:	40011000 	.word	0x40011000
 80052c0:	08008bb0 	.word	0x08008bb0

080052c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b090      	sub	sp, #64	; 0x40
 80052c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052ca:	f107 0318 	add.w	r3, r7, #24
 80052ce:	2228      	movs	r2, #40	; 0x28
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f003 fc38 	bl	8008b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052f4:	f107 0318 	add.w	r3, r7, #24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 f807 	bl	800830c <HAL_RCC_OscConfig>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8005304:	f000 fa58 	bl	80057b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005308:	230f      	movs	r3, #15
 800530a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800530c:	2301      	movs	r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f003 fa73 	bl	800880c <HAL_RCC_ClockConfig>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800532c:	f000 fa44 	bl	80057b8 <Error_Handler>
  }
}
 8005330:	bf00      	nop
 8005332:	3740      	adds	r7, #64	; 0x40
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <MX_CAN_Init+0x64>)
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <MX_CAN_Init+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <MX_CAN_Init+0x64>)
 8005344:	2210      	movs	r2, #16
 8005346:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <MX_CAN_Init+0x64>)
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <MX_CAN_Init+0x64>)
 8005350:	2200      	movs	r2, #0
 8005352:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005354:	4b11      	ldr	r3, [pc, #68]	; (800539c <MX_CAN_Init+0x64>)
 8005356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800535a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <MX_CAN_Init+0x64>)
 800535e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005362:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <MX_CAN_Init+0x64>)
 8005366:	2200      	movs	r2, #0
 8005368:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <MX_CAN_Init+0x64>)
 800536c:	2200      	movs	r2, #0
 800536e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <MX_CAN_Init+0x64>)
 8005372:	2200      	movs	r2, #0
 8005374:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <MX_CAN_Init+0x64>)
 8005378:	2201      	movs	r2, #1
 800537a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <MX_CAN_Init+0x64>)
 800537e:	2200      	movs	r2, #0
 8005380:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <MX_CAN_Init+0x64>)
 8005384:	2201      	movs	r2, #1
 8005386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005388:	4804      	ldr	r0, [pc, #16]	; (800539c <MX_CAN_Init+0x64>)
 800538a:	f000 fed9 	bl	8006140 <HAL_CAN_Init>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005394:	f000 fa10 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}
 800539c:	2000200c 	.word	0x2000200c
 80053a0:	40006400 	.word	0x40006400

080053a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053aa:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <MX_I2C1_Init+0x54>)
 80053ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053b0:	4a12      	ldr	r2, [pc, #72]	; (80053fc <MX_I2C1_Init+0x58>)
 80053b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053bc:	2200      	movs	r2, #0
 80053be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053dc:	2200      	movs	r2, #0
 80053de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053e0:	4804      	ldr	r0, [pc, #16]	; (80053f4 <MX_I2C1_Init+0x50>)
 80053e2:	f002 f9d5 	bl	8007790 <HAL_I2C_Init>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053ec:	f000 f9e4 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20001fb8 	.word	0x20001fb8
 80053f8:	40005400 	.word	0x40005400
 80053fc:	00061a80 	.word	0x00061a80

08005400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005406:	f107 0310 	add.w	r3, r7, #16
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005414:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800541a:	f043 0310 	orr.w	r3, r3, #16
 800541e:	6193      	str	r3, [r2, #24]
 8005420:	4b30      	ldr	r3, [pc, #192]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800542c:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005432:	f043 0320 	orr.w	r3, r3, #32
 8005436:	6193      	str	r3, [r2, #24]
 8005438:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800544a:	f043 0304 	orr.w	r3, r3, #4
 800544e:	6193      	str	r3, [r2, #24]
 8005450:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800545c:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <MX_GPIO_Init+0xe4>)
 8005462:	f043 0308 	orr.w	r3, r3, #8
 8005466:	6193      	str	r3, [r2, #24]
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <MX_GPIO_Init+0xe4>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800547a:	481b      	ldr	r0, [pc, #108]	; (80054e8 <MX_GPIO_Init+0xe8>)
 800547c:	f002 f957 	bl	800772e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005480:	2200      	movs	r2, #0
 8005482:	2106      	movs	r1, #6
 8005484:	4819      	ldr	r0, [pc, #100]	; (80054ec <MX_GPIO_Init+0xec>)
 8005486:	f002 f952 	bl	800772e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800548a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005498:	2302      	movs	r3, #2
 800549a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	4619      	mov	r1, r3
 80054a2:	4811      	ldr	r0, [pc, #68]	; (80054e8 <MX_GPIO_Init+0xe8>)
 80054a4:	f001 ffd2 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80054a8:	2306      	movs	r3, #6
 80054aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b4:	2302      	movs	r3, #2
 80054b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	4619      	mov	r1, r3
 80054be:	480b      	ldr	r0, [pc, #44]	; (80054ec <MX_GPIO_Init+0xec>)
 80054c0:	f001 ffc4 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054c4:	2303      	movs	r3, #3
 80054c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d0:	f107 0310 	add.w	r3, r7, #16
 80054d4:	4619      	mov	r1, r3
 80054d6:	4806      	ldr	r0, [pc, #24]	; (80054f0 <MX_GPIO_Init+0xf0>)
 80054d8:	f001 ffb8 	bl	800744c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054dc:	bf00      	nop
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40010800 	.word	0x40010800
 80054f0:	40010c00 	.word	0x40010c00

080054f4 <app_switch_state>:

/* USER CODE BEGIN 4 */

static void app_switch_state(en_app_state_t en_a_app_new_state)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
    switch(en_a_app_new_state)
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b0a      	cmp	r3, #10
 8005502:	f200 809a 	bhi.w	800563a <app_switch_state+0x146>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <app_switch_state+0x18>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005539 	.word	0x08005539
 8005510:	080055a1 	.word	0x080055a1
 8005514:	0800563b 	.word	0x0800563b
 8005518:	080055cd 	.word	0x080055cd
 800551c:	080055e1 	.word	0x080055e1
 8005520:	0800563b 	.word	0x0800563b
 8005524:	080055f5 	.word	0x080055f5
 8005528:	08005611 	.word	0x08005611
 800552c:	0800561f 	.word	0x0800561f
 8005530:	0800562d 	.word	0x0800562d
 8005534:	0800563b 	.word	0x0800563b
    {
        case APP_STATE_NORMAL:
        {
            /* Print welcome message */
            APP_PRINT_MAIN_WELCOME_SCREEN();
 8005538:	2301      	movs	r3, #1
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	4843      	ldr	r0, [pc, #268]	; (800564c <app_switch_state+0x158>)
 8005540:	f000 f8ac 	bl	800569c <app_write_on_screen>
 8005544:	2300      	movs	r3, #0
 8005546:	2201      	movs	r2, #1
 8005548:	2100      	movs	r1, #0
 800554a:	4841      	ldr	r0, [pc, #260]	; (8005650 <app_switch_state+0x15c>)
 800554c:	f000 f8a6 	bl	800569c <app_write_on_screen>
 8005550:	2300      	movs	r3, #0
 8005552:	2202      	movs	r2, #2
 8005554:	2100      	movs	r1, #0
 8005556:	483f      	ldr	r0, [pc, #252]	; (8005654 <app_switch_state+0x160>)
 8005558:	f000 f8a0 	bl	800569c <app_write_on_screen>

            /* Check for new version installation to switch to */
            /* Buffer for flash data */
            uint32_t dataBuffer[1] = {0};
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

            /* Read flash data at new version installation address */
            Flash_Read_Data(APP_UPDATE_START_ADDRESS, dataBuffer, 0);
 8005560:	f107 030c 	add.w	r3, r7, #12
 8005564:	2200      	movs	r2, #0
 8005566:	4619      	mov	r1, r3
 8005568:	483b      	ldr	r0, [pc, #236]	; (8005658 <app_switch_state+0x164>)
 800556a:	f7ff fc7d 	bl	8004e68 <Flash_Read_Data>

            /* Check if there's actually new version installed in that address */
            if(dataBuffer[0] != UINT32_MAX_VAL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005574:	d00f      	beq.n	8005596 <app_switch_state+0xa2>
            {
                /* New Version Available */
                APP_PRINT_NEW_VERSION_AVAILABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	2204      	movs	r2, #4
 800557a:	2100      	movs	r1, #0
 800557c:	4837      	ldr	r0, [pc, #220]	; (800565c <app_switch_state+0x168>)
 800557e:	f000 f88d 	bl	800569c <app_write_on_screen>
 8005582:	2300      	movs	r3, #0
 8005584:	2205      	movs	r2, #5
 8005586:	2100      	movs	r1, #0
 8005588:	4835      	ldr	r0, [pc, #212]	; (8005660 <app_switch_state+0x16c>)
 800558a:	f000 f887 	bl	800569c <app_write_on_screen>

                /* Update Global Flag */
                bool_gs_new_version_available = TRUE;
 800558e:	4b35      	ldr	r3, [pc, #212]	; (8005664 <app_switch_state+0x170>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
            {
                /* Update Global Flag */
                bool_gs_new_version_available = FALSE;
            }

            break;
 8005594:	e052      	b.n	800563c <app_switch_state+0x148>
                bool_gs_new_version_available = FALSE;
 8005596:	4b33      	ldr	r3, [pc, #204]	; (8005664 <app_switch_state+0x170>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
            break;
 800559c:	bf00      	nop
 800559e:	e04d      	b.n	800563c <app_switch_state+0x148>
        }
        case APP_STATE_CHECK_FOR_UPDATES:
        {
            /* Update OLED */
            APP_PRINT_CHECKING_FOR_UPDATES();
 80055a0:	2301      	movs	r3, #1
 80055a2:	2200      	movs	r2, #0
 80055a4:	2100      	movs	r1, #0
 80055a6:	4830      	ldr	r0, [pc, #192]	; (8005668 <app_switch_state+0x174>)
 80055a8:	f000 f878 	bl	800569c <app_write_on_screen>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2202      	movs	r2, #2
 80055b0:	2100      	movs	r1, #0
 80055b2:	482e      	ldr	r0, [pc, #184]	; (800566c <app_switch_state+0x178>)
 80055b4:	f000 f872 	bl	800569c <app_write_on_screen>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2203      	movs	r2, #3
 80055bc:	2106      	movs	r1, #6
 80055be:	482c      	ldr	r0, [pc, #176]	; (8005670 <app_switch_state+0x17c>)
 80055c0:	f000 f86c 	bl	800569c <app_write_on_screen>

            /* Send Check for Updates Command */
            app_tx_over_can(APP_CAN_CMD_CHECK_FOR_UPDATE);
 80055c4:	482b      	ldr	r0, [pc, #172]	; (8005674 <app_switch_state+0x180>)
 80055c6:	f000 f8c1 	bl	800574c <app_tx_over_can>
            break;
 80055ca:	e037      	b.n	800563c <app_switch_state+0x148>
        }
        case APP_STATE_GET_UPDATE_SIZE:
        {
            /* Send Get Update Size Command */
            app_tx_over_can(APP_CAN_CMD_GET_UPDATE_SIZE);
 80055cc:	482a      	ldr	r0, [pc, #168]	; (8005678 <app_switch_state+0x184>)
 80055ce:	f000 f8bd 	bl	800574c <app_tx_over_can>

            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_GETTING_UPDATE_SIZE, 0, 4);
 80055d2:	2300      	movs	r3, #0
 80055d4:	2204      	movs	r2, #4
 80055d6:	2100      	movs	r1, #0
 80055d8:	4828      	ldr	r0, [pc, #160]	; (800567c <app_switch_state+0x188>)
 80055da:	f000 f85f 	bl	800569c <app_write_on_screen>
            break;
 80055de:	e02d      	b.n	800563c <app_switch_state+0x148>
        }
        case APP_STATE_GET_UPDATE_SIZE_AGAIN:
        {
            /* Send Get Update Size Command */
            app_tx_over_can(APP_CAN_CMD_GET_UPDATE_SIZE);
 80055e0:	4825      	ldr	r0, [pc, #148]	; (8005678 <app_switch_state+0x184>)
 80055e2:	f000 f8b3 	bl	800574c <app_tx_over_can>

            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_VERIFYING_UPDATE_SIZE, 0, 5);
 80055e6:	2300      	movs	r3, #0
 80055e8:	2205      	movs	r2, #5
 80055ea:	2100      	movs	r1, #0
 80055ec:	4824      	ldr	r0, [pc, #144]	; (8005680 <app_switch_state+0x18c>)
 80055ee:	f000 f855 	bl	800569c <app_write_on_screen>
            break;
 80055f2:	e023      	b.n	800563c <app_switch_state+0x148>
        }
        case APP_STATE_START_UPDATE:
        {
            /* Update OLED */
            APP_OLED_CLEAR_WRITE(APP_OLED_STARTING_UPDATE, 0, 0);
 80055f4:	2301      	movs	r3, #1
 80055f6:	2200      	movs	r2, #0
 80055f8:	2100      	movs	r1, #0
 80055fa:	4822      	ldr	r0, [pc, #136]	; (8005684 <app_switch_state+0x190>)
 80055fc:	f000 f84e 	bl	800569c <app_write_on_screen>

            /* Immediately Switch to Receiving update state to prevent data loss */
            en_gs_app_state = APP_STATE_RECEIVING_UPDATE;
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <app_switch_state+0x194>)
 8005602:	2207      	movs	r2, #7
 8005604:	701a      	strb	r2, [r3, #0]
            en_a_app_new_state = APP_STATE_RECEIVING_UPDATE;
 8005606:	2307      	movs	r3, #7
 8005608:	71fb      	strb	r3, [r7, #7]

            /* Send Start Update Command */
            app_tx_over_can(APP_CAN_CMD_START_UPDATE);
 800560a:	4820      	ldr	r0, [pc, #128]	; (800568c <app_switch_state+0x198>)
 800560c:	f000 f89e 	bl	800574c <app_tx_over_can>
            /* No Break to process the Receiving update section */
        }
        case APP_STATE_RECEIVING_UPDATE:
        {
            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_UPDATE_IN_PROGRESS, 0, 1);
 8005610:	2300      	movs	r3, #0
 8005612:	2201      	movs	r2, #1
 8005614:	2100      	movs	r1, #0
 8005616:	481e      	ldr	r0, [pc, #120]	; (8005690 <app_switch_state+0x19c>)
 8005618:	f000 f840 	bl	800569c <app_write_on_screen>
            break;
 800561c:	e00e      	b.n	800563c <app_switch_state+0x148>
            break;
        }
        case APP_STATE_UPDATE_RECEIVED:
        {
            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_UPDATED_DATA_PROCESS, 0, 2);
 800561e:	2300      	movs	r3, #0
 8005620:	2202      	movs	r2, #2
 8005622:	2100      	movs	r1, #0
 8005624:	481b      	ldr	r0, [pc, #108]	; (8005694 <app_switch_state+0x1a0>)
 8005626:	f000 f839 	bl	800569c <app_write_on_screen>
            break;
 800562a:	e007      	b.n	800563c <app_switch_state+0x148>
        }
        case APP_STATE_FLASHING:
        {
            /* Do Nothing */
            APP_OLED_WRITE(APP_OLED_UPDATED_INSTALLING, 0, 3);
 800562c:	2300      	movs	r3, #0
 800562e:	2203      	movs	r2, #3
 8005630:	2100      	movs	r1, #0
 8005632:	4819      	ldr	r0, [pc, #100]	; (8005698 <app_switch_state+0x1a4>)
 8005634:	f000 f832 	bl	800569c <app_write_on_screen>
            break;
 8005638:	e000      	b.n	800563c <app_switch_state+0x148>
            break;
        }
        default:
        {
            /* Do Nothing */
            break;
 800563a:	bf00      	nop
        }

    }

    /* Update global app state */
    en_gs_app_state = en_a_app_new_state;
 800563c:	4a12      	ldr	r2, [pc, #72]	; (8005688 <app_switch_state+0x194>)
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	7013      	strb	r3, [r2, #0]

}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08008bc4 	.word	0x08008bc4
 8005650:	08008bc8 	.word	0x08008bc8
 8005654:	08008bdc 	.word	0x08008bdc
 8005658:	08001c00 	.word	0x08001c00
 800565c:	08008bf0 	.word	0x08008bf0
 8005660:	08008c00 	.word	0x08008c00
 8005664:	20000044 	.word	0x20000044
 8005668:	08008c14 	.word	0x08008c14
 800566c:	08008c20 	.word	0x08008c20
 8005670:	08008c30 	.word	0x08008c30
 8005674:	08008c3c 	.word	0x08008c3c
 8005678:	08008c48 	.word	0x08008c48
 800567c:	08008c54 	.word	0x08008c54
 8005680:	08008c68 	.word	0x08008c68
 8005684:	08008c7c 	.word	0x08008c7c
 8005688:	20000045 	.word	0x20000045
 800568c:	08008c90 	.word	0x08008c90
 8005690:	08008c9c 	.word	0x08008c9c
 8005694:	08008cb0 	.word	0x08008cb0
 8005698:	08008cc4 	.word	0x08008cc4

0800569c <app_write_on_screen>:
/* Custom Function to write on OLED Screen
 * According to Font 7x10 and Screen Size 128x64
 * Max Col, Rows are 17, 5 respectively
 * */
static void app_write_on_screen(uint8_t * string, uint8_t Col, uint8_t Row, boolean clearScreen)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	70fb      	strb	r3, [r7, #3]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70bb      	strb	r3, [r7, #2]
 80056b2:	4613      	mov	r3, r2
 80056b4:	707b      	strb	r3, [r7, #1]
	if((Col > 17) || (Row > 5))
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b11      	cmp	r3, #17
 80056ba:	d81f      	bhi.n	80056fc <app_write_on_screen+0x60>
 80056bc:	78bb      	ldrb	r3, [r7, #2]
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d81c      	bhi.n	80056fc <app_write_on_screen+0x60>
	{
		/* Cancel */
	}
	else
	{
		if(TRUE == clearScreen)
 80056c2:	787b      	ldrb	r3, [r7, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <app_write_on_screen+0x30>
		{
			SSD1306_Clear();
 80056c8:	f000 fa9d 	bl	8005c06 <SSD1306_Clear>
		{
			/* Do Nothing */
		}

	/* Goto Requested Position */
	  SSD1306_GotoXY (Col * 7, Row * 10);
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	00d2      	lsls	r2, r2, #3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	78bb      	ldrb	r3, [r7, #2]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4619      	mov	r1, r3
 80056de:	0089      	lsls	r1, r1, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 f9d1 	bl	8005a90 <SSD1306_GotoXY>

	  /* Write String */
	  SSD1306_Puts ((char *) string, &Font_7x10, SSD1306_COLOR_WHITE);
 80056ee:	2201      	movs	r2, #1
 80056f0:	4904      	ldr	r1, [pc, #16]	; (8005704 <app_write_on_screen+0x68>)
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa62 	bl	8005bbc <SSD1306_Puts>

	  /* Update Screen */
	  SSD1306_UpdateScreen(); //display
 80056f8:	f000 f926 	bl	8005948 <SSD1306_UpdateScreen>

	}
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000000 	.word	0x20000000

08005708 <app_fill_array_with_str>:


/* Fills an array with APP_TX_DATA_LENGTH bytes with an APP_TX_DATA_LENGTH byte string */
static void app_fill_array_with_str(uint8_t * u8ptr_array, uint8_t * u8ptr_a_str)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	uint8_t var;

	if(
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_array) &&
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_a_str)
		)
	{
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	e00a      	b.n	800573a <app_fill_array_with_str+0x32>
		{
			u8ptr_array[var] = u8ptr_a_str[var];
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	441a      	add	r2, r3
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	440b      	add	r3, r1
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	3301      	adds	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b07      	cmp	r3, #7
 800573e:	d9f1      	bls.n	8005724 <app_fill_array_with_str+0x1c>
	}
	else
	{
		/* Cancel */
	}
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
	...

0800574c <app_tx_over_can>:

static void app_tx_over_can(uint8_t * msg)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	/* CAN Mailbox free level */
	uint8_t mailbox_free_level;

	mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8005754:	4813      	ldr	r0, [pc, #76]	; (80057a4 <app_tx_over_can+0x58>)
 8005756:	f000 ffca 	bl	80066ee <HAL_CAN_GetTxMailboxesFreeLevel>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]

	/* Block wait until there's a free mailbox */
	while(ZERO == mailbox_free_level)
 800575e:	e004      	b.n	800576a <app_tx_over_can+0x1e>
	{
		/* Re-check mailbox free level */
		mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8005760:	4810      	ldr	r0, [pc, #64]	; (80057a4 <app_tx_over_can+0x58>)
 8005762:	f000 ffc4 	bl	80066ee <HAL_CAN_GetTxMailboxesFreeLevel>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
	while(ZERO == mailbox_free_level)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f7      	beq.n	8005760 <app_tx_over_can+0x14>
	}

	TxHeader.StdId = APP_CAN_TX_MSG_ID;
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <app_tx_over_can+0x5c>)
 8005772:	f240 1201 	movw	r2, #257	; 0x101
 8005776:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = APP_TX_DATA_LENGTH;
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <app_tx_over_can+0x5c>)
 800577a:	2208      	movs	r2, #8
 800577c:	611a      	str	r2, [r3, #16]

	/* free space in mailbox */

	/* Fill CAN TxData buffer with CMD */
	app_fill_array_with_str(TxData, msg);
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	480a      	ldr	r0, [pc, #40]	; (80057ac <app_tx_over_can+0x60>)
 8005782:	f7ff ffc1 	bl	8005708 <app_fill_array_with_str>

	/* Add Message to CAN Tx */
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <app_tx_over_can+0x64>)
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <app_tx_over_can+0x60>)
 800578a:	4907      	ldr	r1, [pc, #28]	; (80057a8 <app_tx_over_can+0x5c>)
 800578c:	4805      	ldr	r0, [pc, #20]	; (80057a4 <app_tx_over_can+0x58>)
 800578e:	f000 fedf 	bl	8006550 <HAL_CAN_AddTxMessage>

	/* Toggle TX LED indicator */
	HAL_GPIO_TogglePin(APP_LED_TX_CAN_ARGS);
 8005792:	2102      	movs	r1, #2
 8005794:	4807      	ldr	r0, [pc, #28]	; (80057b4 <app_tx_over_can+0x68>)
 8005796:	f001 ffe2 	bl	800775e <HAL_GPIO_TogglePin>
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000200c 	.word	0x2000200c
 80057a8:	2000206c 	.word	0x2000206c
 80057ac:	2000205c 	.word	0x2000205c
 80057b0:	20002068 	.word	0x20002068
 80057b4:	40010800 	.word	0x40010800

080057b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80057bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057be:	e7fe      	b.n	80057be <Error_Handler+0x6>

080057c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80057c6:	f000 fa27 	bl	8005c18 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80057ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80057ce:	2201      	movs	r2, #1
 80057d0:	2178      	movs	r1, #120	; 0x78
 80057d2:	485b      	ldr	r0, [pc, #364]	; (8005940 <SSD1306_Init+0x180>)
 80057d4:	f002 fa12 	bl	8007bfc <HAL_I2C_IsDeviceReady>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	e0a9      	b.n	8005936 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80057e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80057e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80057e8:	e002      	b.n	80057f0 <SSD1306_Init+0x30>
		p--;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f9      	bne.n	80057ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80057f6:	22ae      	movs	r2, #174	; 0xae
 80057f8:	2100      	movs	r1, #0
 80057fa:	2078      	movs	r0, #120	; 0x78
 80057fc:	f000 fa68 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8005800:	2220      	movs	r2, #32
 8005802:	2100      	movs	r1, #0
 8005804:	2078      	movs	r0, #120	; 0x78
 8005806:	f000 fa63 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800580a:	2210      	movs	r2, #16
 800580c:	2100      	movs	r1, #0
 800580e:	2078      	movs	r0, #120	; 0x78
 8005810:	f000 fa5e 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005814:	22b0      	movs	r2, #176	; 0xb0
 8005816:	2100      	movs	r1, #0
 8005818:	2078      	movs	r0, #120	; 0x78
 800581a:	f000 fa59 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800581e:	22c8      	movs	r2, #200	; 0xc8
 8005820:	2100      	movs	r1, #0
 8005822:	2078      	movs	r0, #120	; 0x78
 8005824:	f000 fa54 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005828:	2200      	movs	r2, #0
 800582a:	2100      	movs	r1, #0
 800582c:	2078      	movs	r0, #120	; 0x78
 800582e:	f000 fa4f 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005832:	2210      	movs	r2, #16
 8005834:	2100      	movs	r1, #0
 8005836:	2078      	movs	r0, #120	; 0x78
 8005838:	f000 fa4a 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	2100      	movs	r1, #0
 8005840:	2078      	movs	r0, #120	; 0x78
 8005842:	f000 fa45 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005846:	2281      	movs	r2, #129	; 0x81
 8005848:	2100      	movs	r1, #0
 800584a:	2078      	movs	r0, #120	; 0x78
 800584c:	f000 fa40 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	2100      	movs	r1, #0
 8005854:	2078      	movs	r0, #120	; 0x78
 8005856:	f000 fa3b 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800585a:	22a1      	movs	r2, #161	; 0xa1
 800585c:	2100      	movs	r1, #0
 800585e:	2078      	movs	r0, #120	; 0x78
 8005860:	f000 fa36 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005864:	22a6      	movs	r2, #166	; 0xa6
 8005866:	2100      	movs	r1, #0
 8005868:	2078      	movs	r0, #120	; 0x78
 800586a:	f000 fa31 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800586e:	22a8      	movs	r2, #168	; 0xa8
 8005870:	2100      	movs	r1, #0
 8005872:	2078      	movs	r0, #120	; 0x78
 8005874:	f000 fa2c 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005878:	223f      	movs	r2, #63	; 0x3f
 800587a:	2100      	movs	r1, #0
 800587c:	2078      	movs	r0, #120	; 0x78
 800587e:	f000 fa27 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005882:	22a4      	movs	r2, #164	; 0xa4
 8005884:	2100      	movs	r1, #0
 8005886:	2078      	movs	r0, #120	; 0x78
 8005888:	f000 fa22 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800588c:	22d3      	movs	r2, #211	; 0xd3
 800588e:	2100      	movs	r1, #0
 8005890:	2078      	movs	r0, #120	; 0x78
 8005892:	f000 fa1d 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005896:	2200      	movs	r2, #0
 8005898:	2100      	movs	r1, #0
 800589a:	2078      	movs	r0, #120	; 0x78
 800589c:	f000 fa18 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80058a0:	22d5      	movs	r2, #213	; 0xd5
 80058a2:	2100      	movs	r1, #0
 80058a4:	2078      	movs	r0, #120	; 0x78
 80058a6:	f000 fa13 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80058aa:	22f0      	movs	r2, #240	; 0xf0
 80058ac:	2100      	movs	r1, #0
 80058ae:	2078      	movs	r0, #120	; 0x78
 80058b0:	f000 fa0e 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80058b4:	22d9      	movs	r2, #217	; 0xd9
 80058b6:	2100      	movs	r1, #0
 80058b8:	2078      	movs	r0, #120	; 0x78
 80058ba:	f000 fa09 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80058be:	2222      	movs	r2, #34	; 0x22
 80058c0:	2100      	movs	r1, #0
 80058c2:	2078      	movs	r0, #120	; 0x78
 80058c4:	f000 fa04 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80058c8:	22da      	movs	r2, #218	; 0xda
 80058ca:	2100      	movs	r1, #0
 80058cc:	2078      	movs	r0, #120	; 0x78
 80058ce:	f000 f9ff 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80058d2:	2212      	movs	r2, #18
 80058d4:	2100      	movs	r1, #0
 80058d6:	2078      	movs	r0, #120	; 0x78
 80058d8:	f000 f9fa 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80058dc:	22db      	movs	r2, #219	; 0xdb
 80058de:	2100      	movs	r1, #0
 80058e0:	2078      	movs	r0, #120	; 0x78
 80058e2:	f000 f9f5 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80058e6:	2220      	movs	r2, #32
 80058e8:	2100      	movs	r1, #0
 80058ea:	2078      	movs	r0, #120	; 0x78
 80058ec:	f000 f9f0 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80058f0:	228d      	movs	r2, #141	; 0x8d
 80058f2:	2100      	movs	r1, #0
 80058f4:	2078      	movs	r0, #120	; 0x78
 80058f6:	f000 f9eb 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80058fa:	2214      	movs	r2, #20
 80058fc:	2100      	movs	r1, #0
 80058fe:	2078      	movs	r0, #120	; 0x78
 8005900:	f000 f9e6 	bl	8005cd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005904:	22af      	movs	r2, #175	; 0xaf
 8005906:	2100      	movs	r1, #0
 8005908:	2078      	movs	r0, #120	; 0x78
 800590a:	f000 f9e1 	bl	8005cd0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800590e:	222e      	movs	r2, #46	; 0x2e
 8005910:	2100      	movs	r1, #0
 8005912:	2078      	movs	r0, #120	; 0x78
 8005914:	f000 f9dc 	bl	8005cd0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005918:	2000      	movs	r0, #0
 800591a:	f000 f843 	bl	80059a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800591e:	f000 f813 	bl	8005948 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <SSD1306_Init+0x184>)
 8005924:	2200      	movs	r2, #0
 8005926:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <SSD1306_Init+0x184>)
 800592a:	2200      	movs	r2, #0
 800592c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <SSD1306_Init+0x184>)
 8005930:	2201      	movs	r2, #1
 8005932:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20001fb8 	.word	0x20001fb8
 8005944:	20001fa8 	.word	0x20001fa8

08005948 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800594e:	2300      	movs	r3, #0
 8005950:	71fb      	strb	r3, [r7, #7]
 8005952:	e01d      	b.n	8005990 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	3b50      	subs	r3, #80	; 0x50
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	2100      	movs	r1, #0
 800595e:	2078      	movs	r0, #120	; 0x78
 8005960:	f000 f9b6 	bl	8005cd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	2078      	movs	r0, #120	; 0x78
 800596a:	f000 f9b1 	bl	8005cd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800596e:	2210      	movs	r2, #16
 8005970:	2100      	movs	r1, #0
 8005972:	2078      	movs	r0, #120	; 0x78
 8005974:	f000 f9ac 	bl	8005cd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	01db      	lsls	r3, r3, #7
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <SSD1306_UpdateScreen+0x58>)
 800597e:	441a      	add	r2, r3
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	2078      	movs	r0, #120	; 0x78
 8005986:	f000 f95b 	bl	8005c40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	3301      	adds	r3, #1
 800598e:	71fb      	strb	r3, [r7, #7]
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2b07      	cmp	r3, #7
 8005994:	d9de      	bls.n	8005954 <SSD1306_UpdateScreen+0xc>
	}
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20001ba8 	.word	0x20001ba8

080059a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <SSD1306_Fill+0x14>
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <SSD1306_Fill+0x16>
 80059b8:	23ff      	movs	r3, #255	; 0xff
 80059ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059be:	4619      	mov	r1, r3
 80059c0:	4803      	ldr	r0, [pc, #12]	; (80059d0 <SSD1306_Fill+0x2c>)
 80059c2:	f003 f8c1 	bl	8008b48 <memset>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20001ba8 	.word	0x20001ba8

080059d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	80fb      	strh	r3, [r7, #6]
 80059de:	460b      	mov	r3, r1
 80059e0:	80bb      	strh	r3, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	70fb      	strb	r3, [r7, #3]
	if (
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d848      	bhi.n	8005a7e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80059ec:	88bb      	ldrh	r3, [r7, #4]
 80059ee:	2b3f      	cmp	r3, #63	; 0x3f
 80059f0:	d845      	bhi.n	8005a7e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <SSD1306_DrawPixel+0xb4>)
 80059f4:	791b      	ldrb	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d11a      	bne.n	8005a44 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	88bb      	ldrh	r3, [r7, #4]
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	b298      	uxth	r0, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <SSD1306_DrawPixel+0xb8>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	b25a      	sxtb	r2, r3
 8005a22:	88bb      	ldrh	r3, [r7, #4]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b259      	sxtb	r1, r3
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	4603      	mov	r3, r0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	4413      	add	r3, r2
 8005a3c:	b2c9      	uxtb	r1, r1
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <SSD1306_DrawPixel+0xb8>)
 8005a40:	54d1      	strb	r1, [r2, r3]
 8005a42:	e01d      	b.n	8005a80 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	08db      	lsrs	r3, r3, #3
 8005a4a:	b298      	uxth	r0, r3
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	4413      	add	r3, r2
 8005a52:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <SSD1306_DrawPixel+0xb8>)
 8005a54:	5cd3      	ldrb	r3, [r2, r3]
 8005a56:	b25a      	sxtb	r2, r3
 8005a58:	88bb      	ldrh	r3, [r7, #4]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	b259      	sxtb	r1, r3
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	4603      	mov	r3, r0
 8005a72:	01db      	lsls	r3, r3, #7
 8005a74:	4413      	add	r3, r2
 8005a76:	b2c9      	uxtb	r1, r1
 8005a78:	4a04      	ldr	r2, [pc, #16]	; (8005a8c <SSD1306_DrawPixel+0xb8>)
 8005a7a:	54d1      	strb	r1, [r2, r3]
 8005a7c:	e000      	b.n	8005a80 <SSD1306_DrawPixel+0xac>
		return;
 8005a7e:	bf00      	nop
	}
}
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	20001fa8 	.word	0x20001fa8
 8005a8c:	20001ba8 	.word	0x20001ba8

08005a90 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	460a      	mov	r2, r1
 8005a9a:	80fb      	strh	r3, [r7, #6]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005aa0:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <SSD1306_GotoXY+0x28>)
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005aa6:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <SSD1306_GotoXY+0x28>)
 8005aa8:	88bb      	ldrh	r3, [r7, #4]
 8005aaa:	8053      	strh	r3, [r2, #2]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20001fa8 	.word	0x20001fa8

08005abc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	6039      	str	r1, [r7, #0]
 8005ac6:	71fb      	strb	r3, [r7, #7]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005acc:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	4413      	add	r3, r2
	if (
 8005ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8005ada:	dc07      	bgt.n	8005aec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005adc:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005ade:	885b      	ldrh	r3, [r3, #2]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8005aea:	dd01      	ble.n	8005af0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e05e      	b.n	8005bae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e04b      	b.n	8005b8e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	3b20      	subs	r3, #32
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	7849      	ldrb	r1, [r1, #1]
 8005b02:	fb01 f303 	mul.w	r3, r1, r3
 8005b06:	4619      	mov	r1, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	440b      	add	r3, r1
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e030      	b.n	8005b7c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d010      	beq.n	8005b4c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	b298      	uxth	r0, r3
 8005b36:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005b38:	885a      	ldrh	r2, [r3, #2]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	79ba      	ldrb	r2, [r7, #6]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7ff ff45 	bl	80059d4 <SSD1306_DrawPixel>
 8005b4a:	e014      	b.n	8005b76 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	b298      	uxth	r0, r3
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005b5a:	885a      	ldrh	r2, [r3, #2]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	b299      	uxth	r1, r3
 8005b64:	79bb      	ldrb	r3, [r7, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	f7ff ff2f 	bl	80059d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d3c8      	bcc.n	8005b1a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	461a      	mov	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d3ad      	bcc.n	8005af6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <SSD1306_Putc+0xfc>)
 8005baa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005bac:	79fb      	ldrb	r3, [r7, #7]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20001fa8 	.word	0x20001fa8

08005bbc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005bca:	e012      	b.n	8005bf2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	79fa      	ldrb	r2, [r7, #7]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff71 	bl	8005abc <SSD1306_Putc>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d002      	beq.n	8005bec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	e008      	b.n	8005bfe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e8      	bne.n	8005bcc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7ff feca 	bl	80059a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8005c10:	f7ff fe9a 	bl	8005948 <SSD1306_UpdateScreen>
}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <ssd1306_I2C_Init+0x24>)
 8005c20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c22:	e002      	b.n	8005c2a <ssd1306_I2C_Init+0x12>
		p--;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f9      	bne.n	8005c24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	0003d090 	.word	0x0003d090

08005c40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b0c7      	sub	sp, #284	; 0x11c
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	600a      	str	r2, [r1, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	1dfb      	adds	r3, r7, #7
 8005c52:	4622      	mov	r2, r4
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	1dbb      	adds	r3, r7, #6
 8005c58:	4602      	mov	r2, r0
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	460a      	mov	r2, r1
 8005c60:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	1dba      	adds	r2, r7, #6
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005c72:	e010      	b.n	8005c96 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8005c74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005c78:	463a      	mov	r2, r7
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005c82:	3301      	adds	r3, #1
 8005c84:	7811      	ldrb	r1, [r2, #0]
 8005c86:	f107 020c 	add.w	r2, r7, #12
 8005c8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005c8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005c90:	3301      	adds	r3, #1
 8005c92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005c96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	1d3a      	adds	r2, r7, #4
 8005c9e:	8812      	ldrh	r2, [r2, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d8e7      	bhi.n	8005c74 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b299      	uxth	r1, r3
 8005caa:	1d3b      	adds	r3, r7, #4
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	b298      	uxth	r0, r3
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4803      	ldr	r0, [pc, #12]	; (8005ccc <ssd1306_I2C_WriteMulti+0x8c>)
 8005cbe:	f001 fe9f 	bl	8007a00 <HAL_I2C_Master_Transmit>
}
 8005cc2:	bf00      	nop
 8005cc4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}
 8005ccc:	20001fb8 	.word	0x20001fb8

08005cd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	71fb      	strb	r3, [r7, #7]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	71bb      	strb	r3, [r7, #6]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005ce2:	79bb      	ldrb	r3, [r7, #6]
 8005ce4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005ce6:	797b      	ldrb	r3, [r7, #5]
 8005ce8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	b299      	uxth	r1, r3
 8005cee:	f107 020c 	add.w	r2, r7, #12
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	4803      	ldr	r0, [pc, #12]	; (8005d08 <ssd1306_I2C_Write+0x38>)
 8005cfa:	f001 fe81 	bl	8007a00 <HAL_I2C_Master_Transmit>
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20001fb8 	.word	0x20001fb8

08005d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6193      	str	r3, [r2, #24]
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d34:	61d3      	str	r3, [r2, #28]
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <HAL_MspInit+0x5c>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <HAL_MspInit+0x60>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <HAL_MspInit+0x60>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40010000 	.word	0x40010000

08005d70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 0310 	add.w	r3, r7, #16
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <HAL_CAN_MspInit+0x9c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d139      	bne.n	8005e04 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005d90:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	61d3      	str	r3, [r2, #28]
 8005d9c:	4b1c      	ldr	r3, [pc, #112]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005dae:	f043 0304 	orr.w	r3, r3, #4
 8005db2:	6193      	str	r3, [r2, #24]
 8005db4:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <HAL_CAN_MspInit+0xa0>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	480f      	ldr	r0, [pc, #60]	; (8005e14 <HAL_CAN_MspInit+0xa4>)
 8005dd6:	f001 fb39 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de0:	2302      	movs	r3, #2
 8005de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005de4:	2303      	movs	r3, #3
 8005de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	4619      	mov	r1, r3
 8005dee:	4809      	ldr	r0, [pc, #36]	; (8005e14 <HAL_CAN_MspInit+0xa4>)
 8005df0:	f001 fb2c 	bl	800744c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005df4:	2200      	movs	r2, #0
 8005df6:	2100      	movs	r1, #0
 8005df8:	2014      	movs	r0, #20
 8005dfa:	f001 f8e6 	bl	8006fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005dfe:	2014      	movs	r0, #20
 8005e00:	f001 f8ff 	bl	8007002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005e04:	bf00      	nop
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40006400 	.word	0x40006400
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40010800 	.word	0x40010800

08005e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e20:	f107 0310 	add.w	r3, r7, #16
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <HAL_I2C_MspInit+0x70>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d123      	bne.n	8005e80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e3e:	f043 0308 	orr.w	r3, r3, #8
 8005e42:	6193      	str	r3, [r2, #24]
 8005e44:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e50:	23c0      	movs	r3, #192	; 0xc0
 8005e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e54:	2312      	movs	r3, #18
 8005e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	4619      	mov	r1, r3
 8005e62:	480b      	ldr	r0, [pc, #44]	; (8005e90 <HAL_I2C_MspInit+0x78>)
 8005e64:	f001 faf2 	bl	800744c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e72:	61d3      	str	r3, [r2, #28]
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_I2C_MspInit+0x74>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e80:	bf00      	nop
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40005400 	.word	0x40005400
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40010c00 	.word	0x40010c00

08005e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e98:	e7fe      	b.n	8005e98 <NMI_Handler+0x4>

08005e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e9e:	e7fe      	b.n	8005e9e <HardFault_Handler+0x4>

08005ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ea4:	e7fe      	b.n	8005ea4 <MemManage_Handler+0x4>

08005ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005eaa:	e7fe      	b.n	8005eaa <BusFault_Handler+0x4>

08005eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005eb0:	e7fe      	b.n	8005eb0 <UsageFault_Handler+0x4>

08005eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005eb6:	bf00      	nop
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
	...

08005ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	/* Toggle APP Status LED */
	  APP_TOGGLE_STATUS_LED();
 8005edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ee0:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <SysTick_Handler+0x18>)
 8005ee2:	f001 fc3c 	bl	800775e <HAL_GPIO_TogglePin>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ee6:	f000 f8ed 	bl	80060c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40011000 	.word	0x40011000

08005ef4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8005ef8:	4802      	ldr	r0, [pc, #8]	; (8005f04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005efa:	f000 fd72 	bl	80069e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	2000200c 	.word	0x2000200c

08005f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <SystemCoreClockUpdate+0xc4>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d007      	beq.n	8005f46 <SystemCoreClockUpdate+0x32>
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d009      	beq.n	8005f4e <SystemCoreClockUpdate+0x3a>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d133      	bne.n	8005fa6 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005f3e:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005f40:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <SystemCoreClockUpdate+0xcc>)
 8005f42:	601a      	str	r2, [r3, #0]
      break;
 8005f44:	e033      	b.n	8005fae <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8005f46:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <SystemCoreClockUpdate+0xcc>)
 8005f4a:	601a      	str	r2, [r3, #0]
      break;
 8005f4c:	e02f      	b.n	8005fae <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8005f4e:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <SystemCoreClockUpdate+0xc4>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005f56:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005f58:	4b1f      	ldr	r3, [pc, #124]	; (8005fd8 <SystemCoreClockUpdate+0xc4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f60:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c9b      	lsrs	r3, r3, #18
 8005f66:	3302      	adds	r3, #2
 8005f68:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <SystemCoreClockUpdate+0xd0>)
 8005f74:	fb02 f303 	mul.w	r3, r2, r3
 8005f78:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005f7a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8005f7c:	e017      	b.n	8005fae <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8005f7e:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <SystemCoreClockUpdate+0xc4>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <SystemCoreClockUpdate+0xd0>)
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005f94:	6013      	str	r3, [r2, #0]
      break;
 8005f96:	e00a      	b.n	8005fae <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <SystemCoreClockUpdate+0xcc>)
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005fa2:	6013      	str	r3, [r2, #0]
      break;
 8005fa4:	e003      	b.n	8005fae <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <SystemCoreClockUpdate+0xcc>)
 8005faa:	601a      	str	r2, [r3, #0]
      break;
 8005fac:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <SystemCoreClockUpdate+0xc4>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <SystemCoreClockUpdate+0xd4>)
 8005fba:	5cd3      	ldrb	r3, [r2, r3]
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8005fbe:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <SystemCoreClockUpdate+0xc8>)
 8005fca:	6013      	str	r3, [r2, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	20000008 	.word	0x20000008
 8005fe0:	007a1200 	.word	0x007a1200
 8005fe4:	003d0900 	.word	0x003d0900
 8005fe8:	08009444 	.word	0x08009444

08005fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005fec:	f7ff ff8c 	bl	8005f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ff0:	480b      	ldr	r0, [pc, #44]	; (8006020 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005ff2:	490c      	ldr	r1, [pc, #48]	; (8006024 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005ff4:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ff8:	e002      	b.n	8006000 <LoopCopyDataInit>

08005ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ffe:	3304      	adds	r3, #4

08006000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006004:	d3f9      	bcc.n	8005ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006006:	4a09      	ldr	r2, [pc, #36]	; (800602c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006008:	4c09      	ldr	r4, [pc, #36]	; (8006030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800600a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800600c:	e001      	b.n	8006012 <LoopFillZerobss>

0800600e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800600e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006010:	3204      	adds	r2, #4

08006012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006014:	d3fb      	bcc.n	800600e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006016:	f002 fd73 	bl	8008b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800601a:	f7ff f841 	bl	80050a0 <main>
  bx lr
 800601e:	4770      	bx	lr
  ldr r0, =_sdata
 8006020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006024:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8006028:	08009478 	.word	0x08009478
  ldr r2, =_sbss
 800602c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8006030:	200020c8 	.word	0x200020c8

08006034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006034:	e7fe      	b.n	8006034 <ADC1_2_IRQHandler>
	...

08006038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <HAL_Init+0x28>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a07      	ldr	r2, [pc, #28]	; (8006060 <HAL_Init+0x28>)
 8006042:	f043 0310 	orr.w	r3, r3, #16
 8006046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006048:	2003      	movs	r0, #3
 800604a:	f000 ffb3 	bl	8006fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800604e:	200f      	movs	r0, #15
 8006050:	f000 f808 	bl	8006064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006054:	f7ff fe5a 	bl	8005d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40022000 	.word	0x40022000

08006064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <HAL_InitTick+0x54>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_InitTick+0x58>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800607a:	fbb3 f3f1 	udiv	r3, r3, r1
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	4618      	mov	r0, r3
 8006084:	f000 ffcb 	bl	800701e <HAL_SYSTICK_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e00e      	b.n	80060b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d80a      	bhi.n	80060ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006098:	2200      	movs	r2, #0
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a0:	f000 ff93 	bl	8006fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060a4:	4a06      	ldr	r2, [pc, #24]	; (80060c0 <HAL_InitTick+0x5c>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000008 	.word	0x20000008
 80060bc:	20000010 	.word	0x20000010
 80060c0:	2000000c 	.word	0x2000000c

080060c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_IncTick+0x1c>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_IncTick+0x20>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4413      	add	r3, r2
 80060d4:	4a03      	ldr	r2, [pc, #12]	; (80060e4 <HAL_IncTick+0x20>)
 80060d6:	6013      	str	r3, [r2, #0]
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr
 80060e0:	20000010 	.word	0x20000010
 80060e4:	200020a0 	.word	0x200020a0

080060e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return uwTick;
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <HAL_GetTick+0x10>)
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	200020a0 	.word	0x200020a0

080060fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006104:	f7ff fff0 	bl	80060e8 <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006114:	d005      	beq.n	8006122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <HAL_Delay+0x40>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006122:	bf00      	nop
 8006124:	f7ff ffe0 	bl	80060e8 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d8f7      	bhi.n	8006124 <HAL_Delay+0x28>
  {
  }
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000010 	.word	0x20000010

08006140 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0ed      	b.n	800632e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff fe06 	bl	8005d70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006174:	f7ff ffb8 	bl	80060e8 <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800617a:	e012      	b.n	80061a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800617c:	f7ff ffb4 	bl	80060e8 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b0a      	cmp	r3, #10
 8006188:	d90b      	bls.n	80061a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2205      	movs	r2, #5
 800619a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0c5      	b.n	800632e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0e5      	beq.n	800617c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0202 	bic.w	r2, r2, #2
 80061be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061c0:	f7ff ff92 	bl	80060e8 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061c6:	e012      	b.n	80061ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061c8:	f7ff ff8e 	bl	80060e8 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b0a      	cmp	r3, #10
 80061d4:	d90b      	bls.n	80061ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2205      	movs	r2, #5
 80061e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e09f      	b.n	800632e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e5      	bne.n	80061c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	7e1b      	ldrb	r3, [r3, #24]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d108      	bne.n	8006216 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e007      	b.n	8006226 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7e5b      	ldrb	r3, [r3, #25]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d108      	bne.n	8006240 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e007      	b.n	8006250 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7e9b      	ldrb	r3, [r3, #26]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d108      	bne.n	800626a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0220 	orr.w	r2, r2, #32
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e007      	b.n	800627a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0220 	bic.w	r2, r2, #32
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7edb      	ldrb	r3, [r3, #27]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d108      	bne.n	8006294 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0210 	bic.w	r2, r2, #16
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e007      	b.n	80062a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0210 	orr.w	r2, r2, #16
 80062a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7f1b      	ldrb	r3, [r3, #28]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d108      	bne.n	80062be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0208 	orr.w	r2, r2, #8
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e007      	b.n	80062ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0208 	bic.w	r2, r2, #8
 80062cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7f5b      	ldrb	r3, [r3, #29]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d108      	bne.n	80062e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0204 	orr.w	r2, r2, #4
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	e007      	b.n	80062f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800634c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d003      	beq.n	800635c <HAL_CAN_ConfigFilter+0x26>
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	2b02      	cmp	r3, #2
 8006358:	f040 80aa 	bne.w	80064b0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006362:	f043 0201 	orr.w	r2, r3, #1
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2201      	movs	r2, #1
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	43db      	mvns	r3, r3
 8006386:	401a      	ands	r2, r3
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d123      	bne.n	80063de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	43db      	mvns	r3, r3
 80063a0:	401a      	ands	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3248      	adds	r2, #72	; 0x48
 80063be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063d4:	6979      	ldr	r1, [r7, #20]
 80063d6:	3348      	adds	r3, #72	; 0x48
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d122      	bne.n	800642c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006406:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3248      	adds	r2, #72	; 0x48
 800640c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006420:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	3348      	adds	r3, #72	; 0x48
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	440b      	add	r3, r1
 800642a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	43db      	mvns	r3, r3
 800643e:	401a      	ands	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006446:	e007      	b.n	8006458 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	431a      	orrs	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006472:	e007      	b.n	8006484 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	431a      	orrs	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	431a      	orrs	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e006      	b.n	80064be <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d12e      	bne.n	800653a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064f4:	f7ff fdf8 	bl	80060e8 <HAL_GetTick>
 80064f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80064fa:	e012      	b.n	8006522 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80064fc:	f7ff fdf4 	bl	80060e8 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b0a      	cmp	r3, #10
 8006508:	d90b      	bls.n	8006522 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2205      	movs	r2, #5
 800651a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e012      	b.n	8006548 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e006      	b.n	8006548 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006564:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800656e:	7ffb      	ldrb	r3, [r7, #31]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d003      	beq.n	800657c <HAL_CAN_AddTxMessage+0x2c>
 8006574:	7ffb      	ldrb	r3, [r7, #31]
 8006576:	2b02      	cmp	r3, #2
 8006578:	f040 80ad 	bne.w	80066d6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8095 	beq.w	80066c6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	0e1b      	lsrs	r3, r3, #24
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80065a6:	2201      	movs	r2, #1
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	409a      	lsls	r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10d      	bne.n	80065d4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	6809      	ldr	r1, [r1, #0]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3318      	adds	r3, #24
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	440b      	add	r3, r1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e00f      	b.n	80065f4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80065e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3318      	adds	r3, #24
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	440b      	add	r3, r1
 80065f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6819      	ldr	r1, [r3, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	3318      	adds	r3, #24
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	440b      	add	r3, r1
 8006604:	3304      	adds	r3, #4
 8006606:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	7d1b      	ldrb	r3, [r3, #20]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d111      	bne.n	8006634 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3318      	adds	r3, #24
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	6811      	ldr	r1, [r2, #0]
 8006624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3318      	adds	r3, #24
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	440b      	add	r3, r1
 8006630:	3304      	adds	r3, #4
 8006632:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3307      	adds	r3, #7
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	061a      	lsls	r2, r3, #24
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3306      	adds	r3, #6
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3305      	adds	r3, #5
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	4313      	orrs	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	3204      	adds	r2, #4
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	4610      	mov	r0, r2
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	6811      	ldr	r1, [r2, #0]
 800665c:	ea43 0200 	orr.w	r2, r3, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	440b      	add	r3, r1
 8006666:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800666a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3303      	adds	r3, #3
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	061a      	lsls	r2, r3, #24
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3302      	adds	r3, #2
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3301      	adds	r3, #1
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	4313      	orrs	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	4610      	mov	r0, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6811      	ldr	r1, [r2, #0]
 8006692:	ea43 0200 	orr.w	r2, r3, r0
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	440b      	add	r3, r1
 800669c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80066a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	3318      	adds	r3, #24
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	4413      	add	r3, r2
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	6811      	ldr	r1, [r2, #0]
 80066b4:	f043 0201 	orr.w	r2, r3, #1
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	3318      	adds	r3, #24
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	440b      	add	r3, r1
 80066c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e00e      	b.n	80066e4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e006      	b.n	80066e4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3724      	adds	r7, #36	; 0x24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr

080066ee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006700:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d002      	beq.n	800670e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d11d      	bne.n	800674a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800674a:	68fb      	ldr	r3, [r7, #12]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr

08006756 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800676a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d003      	beq.n	800677a <HAL_CAN_GetRxMessage+0x24>
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b02      	cmp	r3, #2
 8006776:	f040 8103 	bne.w	8006980 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10e      	bne.n	800679e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d116      	bne.n	80067bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e0f7      	b.n	800698e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0e8      	b.n	800698e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	331b      	adds	r3, #27
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	4413      	add	r3, r2
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0204 	and.w	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10c      	bne.n	80067f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	331b      	adds	r3, #27
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0d5b      	lsrs	r3, r3, #21
 80067ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e00b      	b.n	800680c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	331b      	adds	r3, #27
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	4413      	add	r3, r2
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	08db      	lsrs	r3, r3, #3
 8006804:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	331b      	adds	r3, #27
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0202 	and.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	331b      	adds	r3, #27
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	2b07      	cmp	r3, #7
 8006838:	d903      	bls.n	8006842 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2208      	movs	r2, #8
 800683e:	611a      	str	r2, [r3, #16]
 8006840:	e00b      	b.n	800685a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	331b      	adds	r3, #27
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	3304      	adds	r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 020f 	and.w	r2, r3, #15
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	331b      	adds	r3, #27
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	3304      	adds	r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	331b      	adds	r3, #27
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4413      	add	r3, r2
 800687e:	3304      	adds	r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	4413      	add	r3, r2
 8006894:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	0a1a      	lsrs	r2, r3, #8
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	0c1a      	lsrs	r2, r3, #16
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	3302      	adds	r3, #2
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	4413      	add	r3, r2
 80068de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	0e1a      	lsrs	r2, r3, #24
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	3303      	adds	r3, #3
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3304      	adds	r3, #4
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4413      	add	r3, r2
 8006910:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	0a1a      	lsrs	r2, r3, #8
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3305      	adds	r3, #5
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	4413      	add	r3, r2
 800692a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	0c1a      	lsrs	r2, r3, #16
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	3306      	adds	r3, #6
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	0e1a      	lsrs	r2, r3, #24
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	3307      	adds	r3, #7
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0220 	orr.w	r2, r2, #32
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e007      	b.n	800697c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0220 	orr.w	r2, r2, #32
 800697a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	e006      	b.n	800698e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr

08006998 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d002      	beq.n	80069b6 <HAL_CAN_ActivateNotification+0x1e>
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d109      	bne.n	80069ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6959      	ldr	r1, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e006      	b.n	80069d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
  }
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b08a      	sub	sp, #40	; 0x28
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d07c      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d023      	beq.n	8006a7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2201      	movs	r2, #1
 8006a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f97d 	bl	8006d44 <HAL_CAN_TxMailbox0CompleteCallback>
 8006a4a:	e016      	b.n	8006a7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	e00c      	b.n	8006a7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	e002      	b.n	8006a7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f980 	bl	8006d7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d024      	beq.n	8006ace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f95c 	bl	8006d56 <HAL_CAN_TxMailbox1CompleteCallback>
 8006a9e:	e016      	b.n	8006ace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab2:	e00c      	b.n	8006ace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac6:	e002      	b.n	8006ace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f95f 	bl	8006d8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d024      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f93b 	bl	8006d68 <HAL_CAN_TxMailbox2CompleteCallback>
 8006af2:	e016      	b.n	8006b22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	e00c      	b.n	8006b22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	e002      	b.n	8006b22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f93e 	bl	8006d9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d006      	beq.n	8006b68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2208      	movs	r2, #8
 8006b60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f924 	bl	8006db0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fe f9ef 	bl	8004f64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2208      	movs	r2, #8
 8006bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f904 	bl	8006dd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8ec 	bl	8006dc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d006      	beq.n	8006c0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8ed 	bl	8006de6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2208      	movs	r2, #8
 8006c26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8e5 	bl	8006df8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d075      	beq.n	8006d24 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d06c      	beq.n	8006d1c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	f043 0302 	orr.w	r3, r3, #2
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03d      	beq.n	8006d1c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d038      	beq.n	8006d1c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d017      	beq.n	8006ce4 <HAL_CAN_IRQHandler+0x302>
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d804      	bhi.n	8006cc2 <HAL_CAN_IRQHandler+0x2e0>
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d009      	beq.n	8006cd0 <HAL_CAN_IRQHandler+0x2ee>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d00c      	beq.n	8006cda <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006cc0:	e024      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8006cc2:	2b50      	cmp	r3, #80	; 0x50
 8006cc4:	d018      	beq.n	8006cf8 <HAL_CAN_IRQHandler+0x316>
 8006cc6:	2b60      	cmp	r3, #96	; 0x60
 8006cc8:	d01b      	beq.n	8006d02 <HAL_CAN_IRQHandler+0x320>
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	d00f      	beq.n	8006cee <HAL_CAN_IRQHandler+0x30c>
            break;
 8006cce:	e01d      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	f043 0308 	orr.w	r3, r3, #8
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cd8:	e018      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	f043 0310 	orr.w	r3, r3, #16
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ce2:	e013      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f043 0320 	orr.w	r3, r3, #32
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cec:	e00e      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cf6:	e009      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d00:	e004      	b.n	8006d0c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2204      	movs	r2, #4
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f867 	bl	8006e0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	3728      	adds	r7, #40	; 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr

08006e0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <__NVIC_SetPriorityGrouping>:
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <__NVIC_SetPriorityGrouping+0x44>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e4e:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <__NVIC_SetPriorityGrouping+0x44>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	60d3      	str	r3, [r2, #12]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <__NVIC_GetPriorityGrouping>:
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <__NVIC_GetPriorityGrouping+0x18>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 0307 	and.w	r3, r3, #7
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000ed00 	.word	0xe000ed00

08006e80 <__NVIC_EnableIRQ>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	db0b      	blt.n	8006eaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	f003 021f 	and.w	r2, r3, #31
 8006e98:	4906      	ldr	r1, [pc, #24]	; (8006eb4 <__NVIC_EnableIRQ+0x34>)
 8006e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	e000e100 	.word	0xe000e100

08006eb8 <__NVIC_SetPriority>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db0a      	blt.n	8006ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	490c      	ldr	r1, [pc, #48]	; (8006f04 <__NVIC_SetPriority+0x4c>)
 8006ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed6:	0112      	lsls	r2, r2, #4
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	440b      	add	r3, r1
 8006edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ee0:	e00a      	b.n	8006ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	4908      	ldr	r1, [pc, #32]	; (8006f08 <__NVIC_SetPriority+0x50>)
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	0112      	lsls	r2, r2, #4
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	761a      	strb	r2, [r3, #24]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	e000e100 	.word	0xe000e100
 8006f08:	e000ed00 	.word	0xe000ed00

08006f0c <NVIC_EncodePriority>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f1c3 0307 	rsb	r3, r3, #7
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf28      	it	cs
 8006f2a:	2304      	movcs	r3, #4
 8006f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3304      	adds	r3, #4
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d902      	bls.n	8006f3c <NVIC_EncodePriority+0x30>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3b03      	subs	r3, #3
 8006f3a:	e000      	b.n	8006f3e <NVIC_EncodePriority+0x32>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	401a      	ands	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5e:	43d9      	mvns	r1, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f64:	4313      	orrs	r3, r2
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3724      	adds	r7, #36	; 0x24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <SysTick_Config>:
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f80:	d301      	bcc.n	8006f86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006f82:	2301      	movs	r3, #1
 8006f84:	e00f      	b.n	8006fa6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f86:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <SysTick_Config+0x40>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f8e:	210f      	movs	r1, #15
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f94:	f7ff ff90 	bl	8006eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <SysTick_Config+0x40>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f9e:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <SysTick_Config+0x40>)
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	e000e010 	.word	0xe000e010

08006fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff ff2d 	bl	8006e1c <__NVIC_SetPriorityGrouping>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fdc:	f7ff ff42 	bl	8006e64 <__NVIC_GetPriorityGrouping>
 8006fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7ff ff90 	bl	8006f0c <NVIC_EncodePriority>
 8006fec:	4602      	mov	r2, r0
 8006fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff5f 	bl	8006eb8 <__NVIC_SetPriority>
}
 8006ffa:	bf00      	nop
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	4603      	mov	r3, r0
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800700c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff35 	bl	8006e80 <__NVIC_EnableIRQ>
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ffa2 	bl	8006f70 <SysTick_Config>
 800702c:	4603      	mov	r3, r0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <HAL_FLASH_Program+0xd8>)
 8007054:	7e1b      	ldrb	r3, [r3, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_FLASH_Program+0x26>
 800705a:	2302      	movs	r3, #2
 800705c:	e054      	b.n	8007108 <HAL_FLASH_Program+0xd0>
 800705e:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <HAL_FLASH_Program+0xd8>)
 8007060:	2201      	movs	r2, #1
 8007062:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007064:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007068:	f000 f8b2 	bl	80071d0 <FLASH_WaitForLastOperation>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d144      	bne.n	8007100 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d102      	bne.n	8007082 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800707c:	2301      	movs	r3, #1
 800707e:	757b      	strb	r3, [r7, #21]
 8007080:	e007      	b.n	8007092 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d102      	bne.n	800708e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007088:	2302      	movs	r3, #2
 800708a:	757b      	strb	r3, [r7, #21]
 800708c:	e001      	b.n	8007092 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800708e:	2304      	movs	r3, #4
 8007090:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007092:	2300      	movs	r3, #0
 8007094:	75bb      	strb	r3, [r7, #22]
 8007096:	e02d      	b.n	80070f4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007098:	7dbb      	ldrb	r3, [r7, #22]
 800709a:	005a      	lsls	r2, r3, #1
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	eb02 0c03 	add.w	ip, r2, r3
 80070a2:	7dbb      	ldrb	r3, [r7, #22]
 80070a4:	0119      	lsls	r1, r3, #4
 80070a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070aa:	f1c1 0620 	rsb	r6, r1, #32
 80070ae:	f1a1 0020 	sub.w	r0, r1, #32
 80070b2:	fa22 f401 	lsr.w	r4, r2, r1
 80070b6:	fa03 f606 	lsl.w	r6, r3, r6
 80070ba:	4334      	orrs	r4, r6
 80070bc:	fa23 f000 	lsr.w	r0, r3, r0
 80070c0:	4304      	orrs	r4, r0
 80070c2:	fa23 f501 	lsr.w	r5, r3, r1
 80070c6:	b2a3      	uxth	r3, r4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4660      	mov	r0, ip
 80070cc:	f000 f864 	bl	8007198 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80070d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80070d4:	f000 f87c 	bl	80071d0 <FLASH_WaitForLastOperation>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <HAL_FLASH_Program+0xdc>)
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <HAL_FLASH_Program+0xdc>)
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80070ee:	7dbb      	ldrb	r3, [r7, #22]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75bb      	strb	r3, [r7, #22]
 80070f4:	7dba      	ldrb	r2, [r7, #22]
 80070f6:	7d7b      	ldrb	r3, [r7, #21]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3cd      	bcc.n	8007098 <HAL_FLASH_Program+0x60>
 80070fc:	e000      	b.n	8007100 <HAL_FLASH_Program+0xc8>
      {
        break;
 80070fe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <HAL_FLASH_Program+0xd8>)
 8007102:	2200      	movs	r2, #0
 8007104:	761a      	strb	r2, [r3, #24]

  return status;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007110:	200020a8 	.word	0x200020a8
 8007114:	40022000 	.word	0x40022000

08007118 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007122:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <HAL_FLASH_Unlock+0x40>)
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800712e:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <HAL_FLASH_Unlock+0x40>)
 8007130:	4a0a      	ldr	r2, [pc, #40]	; (800715c <HAL_FLASH_Unlock+0x44>)
 8007132:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_FLASH_Unlock+0x40>)
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <HAL_FLASH_Unlock+0x48>)
 8007138:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <HAL_FLASH_Unlock+0x40>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800714a:	79fb      	ldrb	r3, [r7, #7]
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40022000 	.word	0x40022000
 800715c:	45670123 	.word	0x45670123
 8007160:	cdef89ab 	.word	0xcdef89ab

08007164 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_FLASH_Lock+0x1c>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <HAL_FLASH_Lock+0x1c>)
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40022000 	.word	0x40022000

08007184 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <HAL_FLASH_GetError+0x10>)
 800718a:	69db      	ldr	r3, [r3, #28]
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	200020a8 	.word	0x200020a8

08007198 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071a4:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <FLASH_Program_HalfWord+0x30>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80071aa:	4b08      	ldr	r3, [pc, #32]	; (80071cc <FLASH_Program_HalfWord+0x34>)
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	4a07      	ldr	r2, [pc, #28]	; (80071cc <FLASH_Program_HalfWord+0x34>)
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	887a      	ldrh	r2, [r7, #2]
 80071ba:	801a      	strh	r2, [r3, #0]
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	200020a8 	.word	0x200020a8
 80071cc:	40022000 	.word	0x40022000

080071d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80071d8:	f7fe ff86 	bl	80060e8 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80071de:	e010      	b.n	8007202 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e6:	d00c      	beq.n	8007202 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <FLASH_WaitForLastOperation+0x2e>
 80071ee:	f7fe ff7b 	bl	80060e8 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d201      	bcs.n	8007202 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e025      	b.n	800724e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e8      	bne.n	80071e0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800720e:	4b12      	ldr	r3, [pc, #72]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 800721c:	2220      	movs	r2, #32
 800721e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007234:	2b00      	cmp	r3, #0
 8007236:	d105      	bne.n	8007244 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <FLASH_WaitForLastOperation+0x88>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007244:	f000 f80a 	bl	800725c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40022000 	.word	0x40022000

0800725c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007266:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f043 0302 	orr.w	r3, r3, #2
 800727a:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 800727c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f043 0310 	orr.w	r3, r3, #16
 8007284:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007286:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007292:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 800729c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f043 0304 	orr.w	r3, r3, #4
 80072a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80072a6:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	4a0f      	ldr	r2, [pc, #60]	; (80072f8 <FLASH_SetErrorCode+0x9c>)
 80072bc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f240 1201 	movw	r2, #257	; 0x101
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d106      	bne.n	80072e2 <FLASH_SetErrorCode+0x86>
 80072d4:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	61d3      	str	r3, [r2, #28]
}  
 80072e0:	e002      	b.n	80072e8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80072e2:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <FLASH_SetErrorCode+0x98>)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	60d3      	str	r3, [r2, #12]
}  
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40022000 	.word	0x40022000
 80072f8:	200020a8 	.word	0x200020a8

080072fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800730e:	4b2f      	ldr	r3, [pc, #188]	; (80073cc <HAL_FLASHEx_Erase+0xd0>)
 8007310:	7e1b      	ldrb	r3, [r3, #24]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_FLASHEx_Erase+0x1e>
 8007316:	2302      	movs	r3, #2
 8007318:	e053      	b.n	80073c2 <HAL_FLASHEx_Erase+0xc6>
 800731a:	4b2c      	ldr	r3, [pc, #176]	; (80073cc <HAL_FLASHEx_Erase+0xd0>)
 800731c:	2201      	movs	r2, #1
 800731e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d116      	bne.n	8007356 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007328:	f24c 3050 	movw	r0, #50000	; 0xc350
 800732c:	f7ff ff50 	bl	80071d0 <FLASH_WaitForLastOperation>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d141      	bne.n	80073ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8007336:	2001      	movs	r0, #1
 8007338:	f000 f84c 	bl	80073d4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800733c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007340:	f7ff ff46 	bl	80071d0 <FLASH_WaitForLastOperation>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007348:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <HAL_FLASHEx_Erase+0xd4>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	4a20      	ldr	r2, [pc, #128]	; (80073d0 <HAL_FLASHEx_Erase+0xd4>)
 800734e:	f023 0304 	bic.w	r3, r3, #4
 8007352:	6113      	str	r3, [r2, #16]
 8007354:	e031      	b.n	80073ba <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007356:	f24c 3050 	movw	r0, #50000	; 0xc350
 800735a:	f7ff ff39 	bl	80071d0 <FLASH_WaitForLastOperation>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d12a      	bne.n	80073ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60bb      	str	r3, [r7, #8]
 8007372:	e019      	b.n	80073a8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f000 f849 	bl	800740c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800737a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800737e:	f7ff ff27 	bl	80071d0 <FLASH_WaitForLastOperation>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007386:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <HAL_FLASHEx_Erase+0xd4>)
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <HAL_FLASHEx_Erase+0xd4>)
 800738c:	f023 0302 	bic.w	r3, r3, #2
 8007390:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	601a      	str	r2, [r3, #0]
            break;
 800739e:	e00c      	b.n	80073ba <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	029a      	lsls	r2, r3, #10
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d3dc      	bcc.n	8007374 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <HAL_FLASHEx_Erase+0xd0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	761a      	strb	r2, [r3, #24]

  return status;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	200020a8 	.word	0x200020a8
 80073d0:	40022000 	.word	0x40022000

080073d4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <FLASH_MassErase+0x30>)
 80073de:	2200      	movs	r2, #0
 80073e0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80073e2:	4b09      	ldr	r3, [pc, #36]	; (8007408 <FLASH_MassErase+0x34>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <FLASH_MassErase+0x34>)
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <FLASH_MassErase+0x34>)
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4a05      	ldr	r2, [pc, #20]	; (8007408 <FLASH_MassErase+0x34>)
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr
 8007404:	200020a8 	.word	0x200020a8
 8007408:	40022000 	.word	0x40022000

0800740c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <FLASH_PageErase+0x38>)
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <FLASH_PageErase+0x3c>)
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <FLASH_PageErase+0x3c>)
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007426:	4a08      	ldr	r2, [pc, #32]	; (8007448 <FLASH_PageErase+0x3c>)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <FLASH_PageErase+0x3c>)
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	4a05      	ldr	r2, [pc, #20]	; (8007448 <FLASH_PageErase+0x3c>)
 8007432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007436:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	200020a8 	.word	0x200020a8
 8007448:	40022000 	.word	0x40022000

0800744c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800744c:	b480      	push	{r7}
 800744e:	b08b      	sub	sp, #44	; 0x2c
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800745a:	2300      	movs	r3, #0
 800745c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800745e:	e127      	b.n	80076b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007460:	2201      	movs	r2, #1
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	4013      	ands	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	429a      	cmp	r2, r3
 800747a:	f040 8116 	bne.w	80076aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b12      	cmp	r3, #18
 8007484:	d034      	beq.n	80074f0 <HAL_GPIO_Init+0xa4>
 8007486:	2b12      	cmp	r3, #18
 8007488:	d80d      	bhi.n	80074a6 <HAL_GPIO_Init+0x5a>
 800748a:	2b02      	cmp	r3, #2
 800748c:	d02b      	beq.n	80074e6 <HAL_GPIO_Init+0x9a>
 800748e:	2b02      	cmp	r3, #2
 8007490:	d804      	bhi.n	800749c <HAL_GPIO_Init+0x50>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d031      	beq.n	80074fa <HAL_GPIO_Init+0xae>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d01c      	beq.n	80074d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800749a:	e048      	b.n	800752e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800749c:	2b03      	cmp	r3, #3
 800749e:	d043      	beq.n	8007528 <HAL_GPIO_Init+0xdc>
 80074a0:	2b11      	cmp	r3, #17
 80074a2:	d01b      	beq.n	80074dc <HAL_GPIO_Init+0x90>
          break;
 80074a4:	e043      	b.n	800752e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80074a6:	4a89      	ldr	r2, [pc, #548]	; (80076cc <HAL_GPIO_Init+0x280>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d026      	beq.n	80074fa <HAL_GPIO_Init+0xae>
 80074ac:	4a87      	ldr	r2, [pc, #540]	; (80076cc <HAL_GPIO_Init+0x280>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d806      	bhi.n	80074c0 <HAL_GPIO_Init+0x74>
 80074b2:	4a87      	ldr	r2, [pc, #540]	; (80076d0 <HAL_GPIO_Init+0x284>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d020      	beq.n	80074fa <HAL_GPIO_Init+0xae>
 80074b8:	4a86      	ldr	r2, [pc, #536]	; (80076d4 <HAL_GPIO_Init+0x288>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_GPIO_Init+0xae>
          break;
 80074be:	e036      	b.n	800752e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80074c0:	4a85      	ldr	r2, [pc, #532]	; (80076d8 <HAL_GPIO_Init+0x28c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d019      	beq.n	80074fa <HAL_GPIO_Init+0xae>
 80074c6:	4a85      	ldr	r2, [pc, #532]	; (80076dc <HAL_GPIO_Init+0x290>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d016      	beq.n	80074fa <HAL_GPIO_Init+0xae>
 80074cc:	4a84      	ldr	r2, [pc, #528]	; (80076e0 <HAL_GPIO_Init+0x294>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_GPIO_Init+0xae>
          break;
 80074d2:	e02c      	b.n	800752e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	623b      	str	r3, [r7, #32]
          break;
 80074da:	e028      	b.n	800752e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	3304      	adds	r3, #4
 80074e2:	623b      	str	r3, [r7, #32]
          break;
 80074e4:	e023      	b.n	800752e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	3308      	adds	r3, #8
 80074ec:	623b      	str	r3, [r7, #32]
          break;
 80074ee:	e01e      	b.n	800752e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	330c      	adds	r3, #12
 80074f6:	623b      	str	r3, [r7, #32]
          break;
 80074f8:	e019      	b.n	800752e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007502:	2304      	movs	r3, #4
 8007504:	623b      	str	r3, [r7, #32]
          break;
 8007506:	e012      	b.n	800752e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d105      	bne.n	800751c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007510:	2308      	movs	r3, #8
 8007512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	611a      	str	r2, [r3, #16]
          break;
 800751a:	e008      	b.n	800752e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800751c:	2308      	movs	r3, #8
 800751e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	615a      	str	r2, [r3, #20]
          break;
 8007526:	e002      	b.n	800752e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007528:	2300      	movs	r3, #0
 800752a:	623b      	str	r3, [r7, #32]
          break;
 800752c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2bff      	cmp	r3, #255	; 0xff
 8007532:	d801      	bhi.n	8007538 <HAL_GPIO_Init+0xec>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	e001      	b.n	800753c <HAL_GPIO_Init+0xf0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3304      	adds	r3, #4
 800753c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2bff      	cmp	r3, #255	; 0xff
 8007542:	d802      	bhi.n	800754a <HAL_GPIO_Init+0xfe>
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	e002      	b.n	8007550 <HAL_GPIO_Init+0x104>
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	3b08      	subs	r3, #8
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	210f      	movs	r1, #15
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	401a      	ands	r2, r3
 8007562:	6a39      	ldr	r1, [r7, #32]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	431a      	orrs	r2, r3
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8096 	beq.w	80076aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <HAL_GPIO_Init+0x298>)
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	4a58      	ldr	r2, [pc, #352]	; (80076e4 <HAL_GPIO_Init+0x298>)
 8007584:	f043 0301 	orr.w	r3, r3, #1
 8007588:	6193      	str	r3, [r2, #24]
 800758a:	4b56      	ldr	r3, [pc, #344]	; (80076e4 <HAL_GPIO_Init+0x298>)
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	60bb      	str	r3, [r7, #8]
 8007594:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007596:	4a54      	ldr	r2, [pc, #336]	; (80076e8 <HAL_GPIO_Init+0x29c>)
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	3302      	adds	r3, #2
 800759e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4013      	ands	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a4b      	ldr	r2, [pc, #300]	; (80076ec <HAL_GPIO_Init+0x2a0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_GPIO_Init+0x19e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a4a      	ldr	r2, [pc, #296]	; (80076f0 <HAL_GPIO_Init+0x2a4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00d      	beq.n	80075e6 <HAL_GPIO_Init+0x19a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a49      	ldr	r2, [pc, #292]	; (80076f4 <HAL_GPIO_Init+0x2a8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <HAL_GPIO_Init+0x196>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a48      	ldr	r2, [pc, #288]	; (80076f8 <HAL_GPIO_Init+0x2ac>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <HAL_GPIO_Init+0x192>
 80075da:	2303      	movs	r3, #3
 80075dc:	e006      	b.n	80075ec <HAL_GPIO_Init+0x1a0>
 80075de:	2304      	movs	r3, #4
 80075e0:	e004      	b.n	80075ec <HAL_GPIO_Init+0x1a0>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e002      	b.n	80075ec <HAL_GPIO_Init+0x1a0>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_GPIO_Init+0x1a0>
 80075ea:	2300      	movs	r3, #0
 80075ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ee:	f002 0203 	and.w	r2, r2, #3
 80075f2:	0092      	lsls	r2, r2, #2
 80075f4:	4093      	lsls	r3, r2
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80075fc:	493a      	ldr	r1, [pc, #232]	; (80076e8 <HAL_GPIO_Init+0x29c>)
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	3302      	adds	r3, #2
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007616:	4b39      	ldr	r3, [pc, #228]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	4938      	ldr	r1, [pc, #224]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	608b      	str	r3, [r1, #8]
 8007622:	e006      	b.n	8007632 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007624:	4b35      	ldr	r3, [pc, #212]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	43db      	mvns	r3, r3
 800762c:	4933      	ldr	r1, [pc, #204]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800762e:	4013      	ands	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800763e:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	492e      	ldr	r1, [pc, #184]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4313      	orrs	r3, r2
 8007648:	60cb      	str	r3, [r1, #12]
 800764a:	e006      	b.n	800765a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800764c:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	43db      	mvns	r3, r3
 8007654:	4929      	ldr	r1, [pc, #164]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007656:	4013      	ands	r3, r2
 8007658:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	4924      	ldr	r1, [pc, #144]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]
 8007672:	e006      	b.n	8007682 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	43db      	mvns	r3, r3
 800767c:	491f      	ldr	r1, [pc, #124]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800767e:	4013      	ands	r3, r2
 8007680:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800768e:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	491a      	ldr	r1, [pc, #104]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	4313      	orrs	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
 800769a:	e006      	b.n	80076aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	4915      	ldr	r1, [pc, #84]	; (80076fc <HAL_GPIO_Init+0x2b0>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	3301      	adds	r3, #1
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f47f aed0 	bne.w	8007460 <HAL_GPIO_Init+0x14>
  }
}
 80076c0:	bf00      	nop
 80076c2:	372c      	adds	r7, #44	; 0x2c
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	10210000 	.word	0x10210000
 80076d0:	10110000 	.word	0x10110000
 80076d4:	10120000 	.word	0x10120000
 80076d8:	10310000 	.word	0x10310000
 80076dc:	10320000 	.word	0x10320000
 80076e0:	10220000 	.word	0x10220000
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40010800 	.word	0x40010800
 80076f0:	40010c00 	.word	0x40010c00
 80076f4:	40011000 	.word	0x40011000
 80076f8:	40011400 	.word	0x40011400
 80076fc:	40010400 	.word	0x40010400

08007700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e001      	b.n	8007722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	807b      	strh	r3, [r7, #2]
 800773a:	4613      	mov	r3, r2
 800773c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800773e:	787b      	ldrb	r3, [r7, #1]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007744:	887a      	ldrh	r2, [r7, #2]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800774a:	e003      	b.n	8007754 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800774c:	887b      	ldrh	r3, [r7, #2]
 800774e:	041a      	lsls	r2, r3, #16
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	611a      	str	r2, [r3, #16]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr

0800775e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007770:	887a      	ldrh	r2, [r7, #2]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4013      	ands	r3, r2
 8007776:	041a      	lsls	r2, r3, #16
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	43d9      	mvns	r1, r3
 800777c:	887b      	ldrh	r3, [r7, #2]
 800777e:	400b      	ands	r3, r1
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	611a      	str	r2, [r3, #16]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e11f      	b.n	80079e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fe fb2e 	bl	8005e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	; 0x24
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077f4:	f001 f952 	bl	8008a9c <HAL_RCC_GetPCLK1Freq>
 80077f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	4a7b      	ldr	r2, [pc, #492]	; (80079ec <HAL_I2C_Init+0x25c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d807      	bhi.n	8007814 <HAL_I2C_Init+0x84>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a7a      	ldr	r2, [pc, #488]	; (80079f0 <HAL_I2C_Init+0x260>)
 8007808:	4293      	cmp	r3, r2
 800780a:	bf94      	ite	ls
 800780c:	2301      	movls	r3, #1
 800780e:	2300      	movhi	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e006      	b.n	8007822 <HAL_I2C_Init+0x92>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a77      	ldr	r2, [pc, #476]	; (80079f4 <HAL_I2C_Init+0x264>)
 8007818:	4293      	cmp	r3, r2
 800781a:	bf94      	ite	ls
 800781c:	2301      	movls	r3, #1
 800781e:	2300      	movhi	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e0db      	b.n	80079e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a72      	ldr	r2, [pc, #456]	; (80079f8 <HAL_I2C_Init+0x268>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a64      	ldr	r2, [pc, #400]	; (80079ec <HAL_I2C_Init+0x25c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d802      	bhi.n	8007864 <HAL_I2C_Init+0xd4>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3301      	adds	r3, #1
 8007862:	e009      	b.n	8007878 <HAL_I2C_Init+0xe8>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	4a63      	ldr	r2, [pc, #396]	; (80079fc <HAL_I2C_Init+0x26c>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	099b      	lsrs	r3, r3, #6
 8007876:	3301      	adds	r3, #1
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	430b      	orrs	r3, r1
 800787e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800788a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4956      	ldr	r1, [pc, #344]	; (80079ec <HAL_I2C_Init+0x25c>)
 8007894:	428b      	cmp	r3, r1
 8007896:	d80d      	bhi.n	80078b4 <HAL_I2C_Init+0x124>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	1e59      	subs	r1, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078a6:	3301      	adds	r3, #1
 80078a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	bf38      	it	cc
 80078b0:	2304      	movcc	r3, #4
 80078b2:	e04f      	b.n	8007954 <HAL_I2C_Init+0x1c4>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d111      	bne.n	80078e0 <HAL_I2C_Init+0x150>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	1e58      	subs	r0, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6859      	ldr	r1, [r3, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	440b      	add	r3, r1
 80078ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80078ce:	3301      	adds	r3, #1
 80078d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e012      	b.n	8007906 <HAL_I2C_Init+0x176>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	1e58      	subs	r0, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6859      	ldr	r1, [r3, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	0099      	lsls	r1, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078f6:	3301      	adds	r3, #1
 80078f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_I2C_Init+0x17e>
 800790a:	2301      	movs	r3, #1
 800790c:	e022      	b.n	8007954 <HAL_I2C_Init+0x1c4>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10e      	bne.n	8007934 <HAL_I2C_Init+0x1a4>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1e58      	subs	r0, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6859      	ldr	r1, [r3, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	440b      	add	r3, r1
 8007924:	fbb0 f3f3 	udiv	r3, r0, r3
 8007928:	3301      	adds	r3, #1
 800792a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800792e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007932:	e00f      	b.n	8007954 <HAL_I2C_Init+0x1c4>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1e58      	subs	r0, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6859      	ldr	r1, [r3, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	440b      	add	r3, r1
 8007942:	0099      	lsls	r1, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	fbb0 f3f3 	udiv	r3, r0, r3
 800794a:	3301      	adds	r3, #1
 800794c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	6809      	ldr	r1, [r1, #0]
 8007958:	4313      	orrs	r3, r2
 800795a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6911      	ldr	r1, [r2, #16]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68d2      	ldr	r2, [r2, #12]
 800798e:	4311      	orrs	r1, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	430b      	orrs	r3, r1
 8007996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	000186a0 	.word	0x000186a0
 80079f0:	001e847f 	.word	0x001e847f
 80079f4:	003d08ff 	.word	0x003d08ff
 80079f8:	431bde83 	.word	0x431bde83
 80079fc:	10624dd3 	.word	0x10624dd3

08007a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	817b      	strh	r3, [r7, #10]
 8007a10:	4613      	mov	r3, r2
 8007a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a14:	f7fe fb68 	bl	80060e8 <HAL_GetTick>
 8007a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	f040 80e0 	bne.w	8007be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	2319      	movs	r3, #25
 8007a2e:	2201      	movs	r2, #1
 8007a30:	4970      	ldr	r1, [pc, #448]	; (8007bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fa92 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e0d3      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_I2C_Master_Transmit+0x50>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e0cc      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d007      	beq.n	8007a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2221      	movs	r2, #33	; 0x21
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2210      	movs	r2, #16
 8007a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	893a      	ldrh	r2, [r7, #8]
 8007aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a50      	ldr	r2, [pc, #320]	; (8007bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007ab8:	8979      	ldrh	r1, [r7, #10]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f9ca 	bl	8007e58 <I2C_MasterRequestWrite>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e08d      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007ae4:	e066      	b.n	8007bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	6a39      	ldr	r1, [r7, #32]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fb50 	bl	8008190 <I2C_WaitOnTXEFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d107      	bne.n	8007b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e06b      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d11b      	bne.n	8007b88 <HAL_I2C_Master_Transmit+0x188>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d017      	beq.n	8007b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	6a39      	ldr	r1, [r7, #32]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fb47 	bl	8008220 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d107      	bne.n	8007bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e01a      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d194      	bne.n	8007ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	00100002 	.word	0x00100002
 8007bf8:	ffff0000 	.word	0xffff0000

08007bfc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007c0c:	f7fe fa6c 	bl	80060e8 <HAL_GetTick>
 8007c10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	f040 8111 	bne.w	8007e46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2319      	movs	r3, #25
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4988      	ldr	r1, [pc, #544]	; (8007e50 <HAL_I2C_IsDeviceReady+0x254>)
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f994 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e104      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_I2C_IsDeviceReady+0x50>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e0fd      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d007      	beq.n	8007c72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2224      	movs	r2, #36	; 0x24
 8007c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a70      	ldr	r2, [pc, #448]	; (8007e54 <HAL_I2C_IsDeviceReady+0x258>)
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f952 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00d      	beq.n	8007cda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ccc:	d103      	bne.n	8007cd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e0b6      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ce8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007cea:	f7fe f9fd 	bl	80060e8 <HAL_GetTick>
 8007cee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d1e:	e025      	b.n	8007d6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d20:	f7fe f9e2 	bl	80060e8 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <HAL_I2C_IsDeviceReady+0x13a>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d103      	bne.n	8007d3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	22a0      	movs	r2, #160	; 0xa0
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2301      	moveq	r3, #1
 8007d4e:	2300      	movne	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d62:	bf0c      	ite	eq
 8007d64:	2301      	moveq	r3, #1
 8007d66:	2300      	movne	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2ba0      	cmp	r3, #160	; 0xa0
 8007d76:	d005      	beq.n	8007d84 <HAL_I2C_IsDeviceReady+0x188>
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <HAL_I2C_IsDeviceReady+0x188>
 8007d7e:	7dbb      	ldrb	r3, [r7, #22]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0cd      	beq.n	8007d20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d129      	bne.n	8007dee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2319      	movs	r3, #25
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4921      	ldr	r1, [pc, #132]	; (8007e50 <HAL_I2C_IsDeviceReady+0x254>)
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f8c6 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e036      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e02c      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2319      	movs	r3, #25
 8007e0e:	2201      	movs	r2, #1
 8007e10:	490f      	ldr	r1, [pc, #60]	; (8007e50 <HAL_I2C_IsDeviceReady+0x254>)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f8a2 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e012      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	3301      	adds	r3, #1
 8007e26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	f4ff af32 	bcc.w	8007c96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007e46:	2302      	movs	r3, #2
  }
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3720      	adds	r7, #32
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	00100002 	.word	0x00100002
 8007e54:	ffff0000 	.word	0xffff0000

08007e58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	460b      	mov	r3, r1
 8007e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d006      	beq.n	8007e82 <I2C_MasterRequestWrite+0x2a>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d003      	beq.n	8007e82 <I2C_MasterRequestWrite+0x2a>
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e80:	d108      	bne.n	8007e94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e00b      	b.n	8007eac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	2b12      	cmp	r3, #18
 8007e9a:	d107      	bne.n	8007eac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f84f 	bl	8007f5c <I2C_WaitOnFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed2:	d103      	bne.n	8007edc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e035      	b.n	8007f4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee8:	d108      	bne.n	8007efc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007eea:	897b      	ldrh	r3, [r7, #10]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ef8:	611a      	str	r2, [r3, #16]
 8007efa:	e01b      	b.n	8007f34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007efc:	897b      	ldrh	r3, [r7, #10]
 8007efe:	11db      	asrs	r3, r3, #7
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0306 	and.w	r3, r3, #6
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f063 030f 	orn	r3, r3, #15
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	490e      	ldr	r1, [pc, #56]	; (8007f54 <I2C_MasterRequestWrite+0xfc>)
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f898 	bl	8008050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e010      	b.n	8007f4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f2a:	897b      	ldrh	r3, [r7, #10]
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	4907      	ldr	r1, [pc, #28]	; (8007f58 <I2C_MasterRequestWrite+0x100>)
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f888 	bl	8008050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	00010008 	.word	0x00010008
 8007f58:	00010002 	.word	0x00010002

08007f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f6c:	e048      	b.n	8008000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f74:	d044      	beq.n	8008000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f76:	f7fe f8b7 	bl	80060e8 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d302      	bcc.n	8007f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d139      	bne.n	8008000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10d      	bne.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	43da      	mvns	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2301      	moveq	r3, #1
 8007faa:	2300      	movne	r3, #0
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	e00c      	b.n	8007fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	43da      	mvns	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bf0c      	ite	eq
 8007fc4:	2301      	moveq	r3, #1
 8007fc6:	2300      	movne	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d116      	bne.n	8008000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e023      	b.n	8008048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d10d      	bne.n	8008026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	43da      	mvns	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4013      	ands	r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	bf0c      	ite	eq
 800801c:	2301      	moveq	r3, #1
 800801e:	2300      	movne	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	e00c      	b.n	8008040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	43da      	mvns	r2, r3
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4013      	ands	r3, r2
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	429a      	cmp	r2, r3
 8008044:	d093      	beq.n	8007f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800805e:	e071      	b.n	8008144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800806a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806e:	d123      	bne.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	f043 0204 	orr.w	r2, r3, #4
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e067      	b.n	8008188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080be:	d041      	beq.n	8008144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c0:	f7fe f812 	bl	80060e8 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d136      	bne.n	8008144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10c      	bne.n	80080fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	43da      	mvns	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4013      	ands	r3, r2
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf14      	ite	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	2300      	moveq	r3, #0
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	e00b      	b.n	8008112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	43da      	mvns	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4013      	ands	r3, r2
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d016      	beq.n	8008144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e021      	b.n	8008188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d10c      	bne.n	8008168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	43da      	mvns	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4013      	ands	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	e00b      	b.n	8008180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	43da      	mvns	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4013      	ands	r3, r2
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf14      	ite	ne
 800817a:	2301      	movne	r3, #1
 800817c:	2300      	moveq	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	f47f af6d 	bne.w	8008060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800819c:	e034      	b.n	8008208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f886 	bl	80082b0 <I2C_IsAcknowledgeFailed>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e034      	b.n	8008218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b4:	d028      	beq.n	8008208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7fd ff97 	bl	80060e8 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11d      	bne.n	8008208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d016      	beq.n	8008208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f043 0220 	orr.w	r2, r3, #32
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e007      	b.n	8008218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d1c3      	bne.n	800819e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800822c:	e034      	b.n	8008298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f83e 	bl	80082b0 <I2C_IsAcknowledgeFailed>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e034      	b.n	80082a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008244:	d028      	beq.n	8008298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7fd ff4f 	bl	80060e8 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11d      	bne.n	8008298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b04      	cmp	r3, #4
 8008268:	d016      	beq.n	8008298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e007      	b.n	80082a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d1c3      	bne.n	800822e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c6:	d11b      	bne.n	8008300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	f043 0204 	orr.w	r2, r3, #4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr

0800830c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e26c      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 8087 	beq.w	800843a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800832c:	4b92      	ldr	r3, [pc, #584]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f003 030c 	and.w	r3, r3, #12
 8008334:	2b04      	cmp	r3, #4
 8008336:	d00c      	beq.n	8008352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008338:	4b8f      	ldr	r3, [pc, #572]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f003 030c 	and.w	r3, r3, #12
 8008340:	2b08      	cmp	r3, #8
 8008342:	d112      	bne.n	800836a <HAL_RCC_OscConfig+0x5e>
 8008344:	4b8c      	ldr	r3, [pc, #560]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008350:	d10b      	bne.n	800836a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008352:	4b89      	ldr	r3, [pc, #548]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d06c      	beq.n	8008438 <HAL_RCC_OscConfig+0x12c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d168      	bne.n	8008438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e246      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008372:	d106      	bne.n	8008382 <HAL_RCC_OscConfig+0x76>
 8008374:	4b80      	ldr	r3, [pc, #512]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a7f      	ldr	r2, [pc, #508]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800837a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	e02e      	b.n	80083e0 <HAL_RCC_OscConfig+0xd4>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10c      	bne.n	80083a4 <HAL_RCC_OscConfig+0x98>
 800838a:	4b7b      	ldr	r3, [pc, #492]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a7a      	ldr	r2, [pc, #488]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	4b78      	ldr	r3, [pc, #480]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a77      	ldr	r2, [pc, #476]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800839c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	e01d      	b.n	80083e0 <HAL_RCC_OscConfig+0xd4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCC_OscConfig+0xbc>
 80083ae:	4b72      	ldr	r3, [pc, #456]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a71      	ldr	r2, [pc, #452]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	4b6f      	ldr	r3, [pc, #444]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a6e      	ldr	r2, [pc, #440]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e00b      	b.n	80083e0 <HAL_RCC_OscConfig+0xd4>
 80083c8:	4b6b      	ldr	r3, [pc, #428]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6a      	ldr	r2, [pc, #424]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4b68      	ldr	r3, [pc, #416]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a67      	ldr	r2, [pc, #412]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80083da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d013      	beq.n	8008410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e8:	f7fd fe7e 	bl	80060e8 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083f0:	f7fd fe7a 	bl	80060e8 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b64      	cmp	r3, #100	; 0x64
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e1fa      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008402:	4b5d      	ldr	r3, [pc, #372]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0f0      	beq.n	80083f0 <HAL_RCC_OscConfig+0xe4>
 800840e:	e014      	b.n	800843a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008410:	f7fd fe6a 	bl	80060e8 <HAL_GetTick>
 8008414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008416:	e008      	b.n	800842a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008418:	f7fd fe66 	bl	80060e8 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b64      	cmp	r3, #100	; 0x64
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e1e6      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800842a:	4b53      	ldr	r3, [pc, #332]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f0      	bne.n	8008418 <HAL_RCC_OscConfig+0x10c>
 8008436:	e000      	b.n	800843a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d063      	beq.n	800850e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008446:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f003 030c 	and.w	r3, r3, #12
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008452:	4b49      	ldr	r3, [pc, #292]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b08      	cmp	r3, #8
 800845c:	d11c      	bne.n	8008498 <HAL_RCC_OscConfig+0x18c>
 800845e:	4b46      	ldr	r3, [pc, #280]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d116      	bne.n	8008498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800846a:	4b43      	ldr	r3, [pc, #268]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_RCC_OscConfig+0x176>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d001      	beq.n	8008482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e1ba      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008482:	4b3d      	ldr	r3, [pc, #244]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4939      	ldr	r1, [pc, #228]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008492:	4313      	orrs	r3, r2
 8008494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008496:	e03a      	b.n	800850e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084a0:	4b36      	ldr	r3, [pc, #216]	; (800857c <HAL_RCC_OscConfig+0x270>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a6:	f7fd fe1f 	bl	80060e8 <HAL_GetTick>
 80084aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ae:	f7fd fe1b 	bl	80060e8 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e19b      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084c0:	4b2d      	ldr	r3, [pc, #180]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0f0      	beq.n	80084ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084cc:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4927      	ldr	r1, [pc, #156]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	600b      	str	r3, [r1, #0]
 80084e0:	e015      	b.n	800850e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084e2:	4b26      	ldr	r3, [pc, #152]	; (800857c <HAL_RCC_OscConfig+0x270>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e8:	f7fd fdfe 	bl	80060e8 <HAL_GetTick>
 80084ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f0:	f7fd fdfa 	bl	80060e8 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e17a      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1f0      	bne.n	80084f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d03a      	beq.n	8008590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008522:	4b17      	ldr	r3, [pc, #92]	; (8008580 <HAL_RCC_OscConfig+0x274>)
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008528:	f7fd fdde 	bl	80060e8 <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008530:	f7fd fdda 	bl	80060e8 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e15a      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <HAL_RCC_OscConfig+0x26c>)
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f0      	beq.n	8008530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800854e:	2001      	movs	r0, #1
 8008550:	f000 fab8 	bl	8008ac4 <RCC_Delay>
 8008554:	e01c      	b.n	8008590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008556:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <HAL_RCC_OscConfig+0x274>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800855c:	f7fd fdc4 	bl	80060e8 <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008562:	e00f      	b.n	8008584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008564:	f7fd fdc0 	bl	80060e8 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d908      	bls.n	8008584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e140      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
 8008576:	bf00      	nop
 8008578:	40021000 	.word	0x40021000
 800857c:	42420000 	.word	0x42420000
 8008580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008584:	4b9e      	ldr	r3, [pc, #632]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e9      	bne.n	8008564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80a6 	beq.w	80086ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800859e:	2300      	movs	r3, #0
 80085a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085a2:	4b97      	ldr	r3, [pc, #604]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10d      	bne.n	80085ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ae:	4b94      	ldr	r3, [pc, #592]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	4a93      	ldr	r2, [pc, #588]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80085b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b8:	61d3      	str	r3, [r2, #28]
 80085ba:	4b91      	ldr	r3, [pc, #580]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c2:	60bb      	str	r3, [r7, #8]
 80085c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ca:	4b8e      	ldr	r3, [pc, #568]	; (8008804 <HAL_RCC_OscConfig+0x4f8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d118      	bne.n	8008608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085d6:	4b8b      	ldr	r3, [pc, #556]	; (8008804 <HAL_RCC_OscConfig+0x4f8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a8a      	ldr	r2, [pc, #552]	; (8008804 <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085e2:	f7fd fd81 	bl	80060e8 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ea:	f7fd fd7d 	bl	80060e8 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b64      	cmp	r3, #100	; 0x64
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e0fd      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085fc:	4b81      	ldr	r3, [pc, #516]	; (8008804 <HAL_RCC_OscConfig+0x4f8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d106      	bne.n	800861e <HAL_RCC_OscConfig+0x312>
 8008610:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	4a7a      	ldr	r2, [pc, #488]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	6213      	str	r3, [r2, #32]
 800861c:	e02d      	b.n	800867a <HAL_RCC_OscConfig+0x36e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <HAL_RCC_OscConfig+0x334>
 8008626:	4b76      	ldr	r3, [pc, #472]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	4a75      	ldr	r2, [pc, #468]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	6213      	str	r3, [r2, #32]
 8008632:	4b73      	ldr	r3, [pc, #460]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	4a72      	ldr	r2, [pc, #456]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008638:	f023 0304 	bic.w	r3, r3, #4
 800863c:	6213      	str	r3, [r2, #32]
 800863e:	e01c      	b.n	800867a <HAL_RCC_OscConfig+0x36e>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b05      	cmp	r3, #5
 8008646:	d10c      	bne.n	8008662 <HAL_RCC_OscConfig+0x356>
 8008648:	4b6d      	ldr	r3, [pc, #436]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	4a6c      	ldr	r2, [pc, #432]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800864e:	f043 0304 	orr.w	r3, r3, #4
 8008652:	6213      	str	r3, [r2, #32]
 8008654:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	4a69      	ldr	r2, [pc, #420]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	6213      	str	r3, [r2, #32]
 8008660:	e00b      	b.n	800867a <HAL_RCC_OscConfig+0x36e>
 8008662:	4b67      	ldr	r3, [pc, #412]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	4a66      	ldr	r2, [pc, #408]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	6213      	str	r3, [r2, #32]
 800866e:	4b64      	ldr	r3, [pc, #400]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	4a63      	ldr	r2, [pc, #396]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008674:	f023 0304 	bic.w	r3, r3, #4
 8008678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d015      	beq.n	80086ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008682:	f7fd fd31 	bl	80060e8 <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008688:	e00a      	b.n	80086a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800868a:	f7fd fd2d 	bl	80060e8 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f241 3288 	movw	r2, #5000	; 0x1388
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e0ab      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086a0:	4b57      	ldr	r3, [pc, #348]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0ee      	beq.n	800868a <HAL_RCC_OscConfig+0x37e>
 80086ac:	e014      	b.n	80086d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ae:	f7fd fd1b 	bl	80060e8 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086b4:	e00a      	b.n	80086cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b6:	f7fd fd17 	bl	80060e8 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e095      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086cc:	4b4c      	ldr	r3, [pc, #304]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ee      	bne.n	80086b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d105      	bne.n	80086ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086de:	4b48      	ldr	r3, [pc, #288]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	4a47      	ldr	r2, [pc, #284]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80086e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8081 	beq.w	80087f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086f4:	4b42      	ldr	r3, [pc, #264]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f003 030c 	and.w	r3, r3, #12
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d061      	beq.n	80087c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d146      	bne.n	8008796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008708:	4b3f      	ldr	r3, [pc, #252]	; (8008808 <HAL_RCC_OscConfig+0x4fc>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800870e:	f7fd fceb 	bl	80060e8 <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008716:	f7fd fce7 	bl	80060e8 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e067      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008728:	4b35      	ldr	r3, [pc, #212]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d108      	bne.n	8008750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800873e:	4b30      	ldr	r3, [pc, #192]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	492d      	ldr	r1, [pc, #180]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800874c:	4313      	orrs	r3, r2
 800874e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008750:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a19      	ldr	r1, [r3, #32]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	430b      	orrs	r3, r1
 8008762:	4927      	ldr	r1, [pc, #156]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 8008764:	4313      	orrs	r3, r2
 8008766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008768:	4b27      	ldr	r3, [pc, #156]	; (8008808 <HAL_RCC_OscConfig+0x4fc>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876e:	f7fd fcbb 	bl	80060e8 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008776:	f7fd fcb7 	bl	80060e8 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e037      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x46a>
 8008794:	e02f      	b.n	80087f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008796:	4b1c      	ldr	r3, [pc, #112]	; (8008808 <HAL_RCC_OscConfig+0x4fc>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879c:	f7fd fca4 	bl	80060e8 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a4:	f7fd fca0 	bl	80060e8 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e020      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087b6:	4b12      	ldr	r3, [pc, #72]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x498>
 80087c2:	e018      	b.n	80087f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e013      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_RCC_OscConfig+0x4f4>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d106      	bne.n	80087f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d001      	beq.n	80087f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40021000 	.word	0x40021000
 8008804:	40007000 	.word	0x40007000
 8008808:	42420060 	.word	0x42420060

0800880c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0d0      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008820:	4b6a      	ldr	r3, [pc, #424]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d910      	bls.n	8008850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882e:	4b67      	ldr	r3, [pc, #412]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f023 0207 	bic.w	r2, r3, #7
 8008836:	4965      	ldr	r1, [pc, #404]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	4313      	orrs	r3, r2
 800883c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800883e:	4b63      	ldr	r3, [pc, #396]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d001      	beq.n	8008850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0b8      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d020      	beq.n	800889e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008868:	4b59      	ldr	r3, [pc, #356]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4a58      	ldr	r2, [pc, #352]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800886e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008880:	4b53      	ldr	r3, [pc, #332]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a52      	ldr	r2, [pc, #328]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800888a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800888c:	4b50      	ldr	r3, [pc, #320]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	494d      	ldr	r1, [pc, #308]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800889a:	4313      	orrs	r3, r2
 800889c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d040      	beq.n	800892c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d107      	bne.n	80088c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088b2:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d115      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e07f      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d107      	bne.n	80088da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e073      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088da:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e06b      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f023 0203 	bic.w	r2, r3, #3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	4936      	ldr	r1, [pc, #216]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088fc:	f7fd fbf4 	bl	80060e8 <HAL_GetTick>
 8008900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008902:	e00a      	b.n	800891a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008904:	f7fd fbf0 	bl	80060e8 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e053      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800891a:	4b2d      	ldr	r3, [pc, #180]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f003 020c 	and.w	r2, r3, #12
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	429a      	cmp	r2, r3
 800892a:	d1eb      	bne.n	8008904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800892c:	4b27      	ldr	r3, [pc, #156]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d210      	bcs.n	800895c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f023 0207 	bic.w	r2, r3, #7
 8008942:	4922      	ldr	r1, [pc, #136]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	4313      	orrs	r3, r2
 8008948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800894a:	4b20      	ldr	r3, [pc, #128]	; (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e032      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4916      	ldr	r1, [pc, #88]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008976:	4313      	orrs	r3, r2
 8008978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008986:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	490e      	ldr	r1, [pc, #56]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 8008996:	4313      	orrs	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800899a:	f000 f821 	bl	80089e0 <HAL_RCC_GetSysClockFreq>
 800899e:	4601      	mov	r1, r0
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	091b      	lsrs	r3, r3, #4
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <HAL_RCC_ClockConfig+0x1c8>)
 80089ac:	5cd3      	ldrb	r3, [r2, r3]
 80089ae:	fa21 f303 	lsr.w	r3, r1, r3
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <HAL_RCC_ClockConfig+0x1cc>)
 80089b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <HAL_RCC_ClockConfig+0x1d0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fd fb52 	bl	8006064 <HAL_InitTick>

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40022000 	.word	0x40022000
 80089d0:	40021000 	.word	0x40021000
 80089d4:	08009444 	.word	0x08009444
 80089d8:	20000008 	.word	0x20000008
 80089dc:	2000000c 	.word	0x2000000c

080089e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80089fa:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f003 030c 	and.w	r3, r3, #12
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d002      	beq.n	8008a10 <HAL_RCC_GetSysClockFreq+0x30>
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d003      	beq.n	8008a16 <HAL_RCC_GetSysClockFreq+0x36>
 8008a0e:	e027      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a10:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a12:	613b      	str	r3, [r7, #16]
      break;
 8008a14:	e027      	b.n	8008a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	0c9b      	lsrs	r3, r3, #18
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a20:	5cd3      	ldrb	r3, [r2, r3]
 8008a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d010      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	0c5b      	lsrs	r3, r3, #17
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a3a:	5cd3      	ldrb	r3, [r2, r3]
 8008a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a0d      	ldr	r2, [pc, #52]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a42:	fb02 f203 	mul.w	r2, r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	e004      	b.n	8008a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a0c      	ldr	r2, [pc, #48]	; (8008a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
      break;
 8008a5e:	e002      	b.n	8008a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a62:	613b      	str	r3, [r7, #16]
      break;
 8008a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a66:	693b      	ldr	r3, [r7, #16]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	371c      	adds	r7, #28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40021000 	.word	0x40021000
 8008a78:	007a1200 	.word	0x007a1200
 8008a7c:	0800945c 	.word	0x0800945c
 8008a80:	0800946c 	.word	0x0800946c
 8008a84:	003d0900 	.word	0x003d0900

08008a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	20000008 	.word	0x20000008

08008a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008aa0:	f7ff fff2 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	4a03      	ldr	r2, [pc, #12]	; (8008ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ab2:	5cd3      	ldrb	r3, [r2, r3]
 8008ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40021000 	.word	0x40021000
 8008ac0:	08009454 	.word	0x08009454

08008ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <RCC_Delay+0x34>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <RCC_Delay+0x38>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	0a5b      	lsrs	r3, r3, #9
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008ae0:	bf00      	nop
  }
  while (Delay --);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	60fa      	str	r2, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f9      	bne.n	8008ae0 <RCC_Delay+0x1c>
}
 8008aec:	bf00      	nop
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000008 	.word	0x20000008
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	2500      	movs	r5, #0
 8008b04:	4e0c      	ldr	r6, [pc, #48]	; (8008b38 <__libc_init_array+0x38>)
 8008b06:	4c0d      	ldr	r4, [pc, #52]	; (8008b3c <__libc_init_array+0x3c>)
 8008b08:	1ba4      	subs	r4, r4, r6
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	42a5      	cmp	r5, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	f000 f822 	bl	8008b58 <_init>
 8008b14:	2500      	movs	r5, #0
 8008b16:	4e0a      	ldr	r6, [pc, #40]	; (8008b40 <__libc_init_array+0x40>)
 8008b18:	4c0a      	ldr	r4, [pc, #40]	; (8008b44 <__libc_init_array+0x44>)
 8008b1a:	1ba4      	subs	r4, r4, r6
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	42a5      	cmp	r5, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b28:	4798      	blx	r3
 8008b2a:	3501      	adds	r5, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b32:	4798      	blx	r3
 8008b34:	3501      	adds	r5, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	08009470 	.word	0x08009470
 8008b3c:	08009470 	.word	0x08009470
 8008b40:	08009470 	.word	0x08009470
 8008b44:	08009474 	.word	0x08009474

08008b48 <memset>:
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4402      	add	r2, r0
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d100      	bne.n	8008b52 <memset+0xa>
 8008b50:	4770      	bx	lr
 8008b52:	f803 1b01 	strb.w	r1, [r3], #1
 8008b56:	e7f9      	b.n	8008b4c <memset+0x4>

08008b58 <_init>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr

08008b64 <_fini>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr
